// This file is auto-generated by @hey-api/openapi-ts

/**
 * AbiDocFormatted
 */
export type AbiDocFormatted = {
  /**
   * Abi
   */
  abi: {
    [key: string]: unknown;
  };
  /**
   * Abi Inputs Parameters Description
   */
  abi_inputs_parameters_description: {
    [key: string]: string;
  } | null;
  /**
   * Abi Inputs Description
   */
  abi_inputs_description: string | null;
  /**
   * Abi Outputs Parameters Description
   */
  abi_outputs_parameters_description: {
    [key: string]: string;
  } | null;
  /**
   * Function Description
   */
  function_description: string | null;
  /**
   * Function Signature
   */
  function_signature: string;
  /**
   * Full Signature
   */
  full_signature: string;
};

/**
 * AgentActionContext
 */
export type AgentActionContext = {
  /**
   * Type
   */
  type?: "context";
  /**
   * Session Id
   */
  session_id: string;
  /**
   * Request Id
   */
  request_id: string;
  /**
   * Source
   */
  source?: string;
  /**
   * Tool Name
   */
  tool_name?: string | null;
  /**
   * Description
   */
  description?: string | null;
  /**
   * Kwargs
   */
  kwargs?: {
    [key: string]: unknown;
  } | null;
  /**
   * Data
   */
  data: CompletionContextOutput | string;
};

/**
 * AgentActionEval
 */
export type AgentActionEval = {
  /**
   * Type
   */
  type?: "eval";
  /**
   * Session Id
   */
  session_id: string;
  /**
   * Request Id
   */
  request_id: string;
  /**
   * Source
   */
  source?: string;
  /**
   * Tool Name
   */
  tool_name?: string | null;
  /**
   * Description
   */
  description?: string | null;
  /**
   * Kwargs
   */
  kwargs?: {
    [key: string]: unknown;
  } | null;
  /**
   * Data
   */
  data: string;
};

/**
 * AgentActionExecution
 */
export type AgentActionExecution = {
  /**
   * Type
   */
  type?: "execution";
  /**
   * Session Id
   */
  session_id: string;
  /**
   * Request Id
   */
  request_id: string;
  /**
   * Source
   */
  source?: string;
  /**
   * Tool Name
   */
  tool_name?: string | null;
  /**
   * Description
   */
  description?: string | null;
  /**
   * Kwargs
   */
  kwargs?: {
    [key: string]: unknown;
  } | null;
  data: AgentTransactionExecution;
};

/**
 * AgentActionImage
 */
export type AgentActionImage = {
  /**
   * Type
   */
  type?: "image";
  /**
   * Session Id
   */
  session_id: string;
  /**
   * Request Id
   */
  request_id: string;
  /**
   * Source
   */
  source?: string;
  /**
   * Tool Name
   */
  tool_name?: string | null;
  /**
   * Description
   */
  description?: string | null;
  /**
   * Kwargs
   */
  kwargs?: {
    [key: string]: unknown;
  } | null;
  data: AgentActionImageData;
};

/**
 * AgentActionImageData
 */
export type AgentActionImageData = {
  /**
   * Url
   */
  url: string;
  /**
   * Width
   */
  width: number;
  /**
   * Height
   */
  height: number;
};

/**
 * AgentActionInit
 */
export type AgentActionInit = {
  /**
   * Type
   */
  type?: "init";
  /**
   * Session Id
   */
  session_id: string;
  /**
   * Request Id
   */
  request_id: string;
  /**
   * Source
   */
  source?: string;
  /**
   * Tool Name
   */
  tool_name?: string | null;
  /**
   * Description
   */
  description?: string | null;
  /**
   * Kwargs
   */
  kwargs?: {
    [key: string]: unknown;
  } | null;
  /**
   * Data
   */
  data?: null;
};

/**
 * AgentActionPresence
 */
export type AgentActionPresence = {
  /**
   * Type
   */
  type?: "presence";
  /**
   * Session Id
   */
  session_id: string;
  /**
   * Request Id
   */
  request_id: string;
  /**
   * Source
   */
  source?: string;
  /**
   * Tool Name
   */
  tool_name?: string | null;
  /**
   * Description
   */
  description?: string | null;
  /**
   * Kwargs
   */
  kwargs?: {
    [key: string]: unknown;
  } | null;
  /**
   * Data
   */
  data: string;
};

/**
 * AgentActionSignSwap
 */
export type AgentActionSignSwap = {
  /**
   * Type
   */
  type?: "sign_swap";
  /**
   * Session Id
   */
  session_id: string;
  /**
   * Request Id
   */
  request_id: string;
  /**
   * Source
   */
  source?: string;
  /**
   * Tool Name
   */
  tool_name?: string | null;
  /**
   * Description
   */
  description?: string | null;
  /**
   * Kwargs
   */
  kwargs?: {
    [key: string]: unknown;
  } | null;
  /**
   * Data
   */
  data: AgentActionSignSwapData | string;
};

/**
 * AgentActionSignSwapData
 */
export type AgentActionSignSwapData = {
  transaction: AgentActionSignTransactionData;
  /**
   * Action
   */
  action: string | null;
  intent: AgentActionSignSwapDataIntent;
  from: AgentActionSignSwapDataToken;
  to: AgentActionSignSwapDataToken;
};

/**
 * AgentActionSignSwapDataIntent
 */
export type AgentActionSignSwapDataIntent = {
  /**
   * Originchainid
   */
  originChainId: number;
  /**
   * Origintokenaddress
   */
  originTokenAddress: string;
  /**
   * Destinationchainid
   */
  destinationChainId: number;
  /**
   * Destinationtokenaddress
   */
  destinationTokenAddress: string;
  /**
   * Amount
   */
  amount: string;
  /**
   * Sender
   */
  sender: string;
  /**
   * Receiver
   */
  receiver: string;
  /**
   * Maxsteps
   */
  maxSteps: number;
};

/**
 * AgentActionSignSwapDataToken
 */
export type AgentActionSignSwapDataToken = {
  /**
   * Address
   */
  address: string;
  /**
   * Chain Id
   */
  chain_id: number;
  /**
   * Amount
   */
  amount: string;
  /**
   * Symbol
   */
  symbol: string;
  /**
   * Decimals
   */
  decimals: number;
  /**
   * Price
   */
  price: number | null;
};

/**
 * AgentActionSignTransaction
 */
export type AgentActionSignTransaction = {
  /**
   * Type
   */
  type?: "sign_transaction";
  /**
   * Session Id
   */
  session_id: string;
  /**
   * Request Id
   */
  request_id: string;
  /**
   * Source
   */
  source?: string;
  /**
   * Tool Name
   */
  tool_name?: string | null;
  /**
   * Description
   */
  description?: string | null;
  /**
   * Kwargs
   */
  kwargs?: {
    [key: string]: unknown;
  } | null;
  /**
   * Data
   */
  data: AgentActionSignTransactionData | string;
};

/**
 * AgentActionSignTransactionData
 */
export type AgentActionSignTransactionData = {
  /**
   * Chainid
   */
  chainId: number;
  /**
   * Function
   */
  function?: string | null;
  /**
   * To
   */
  to: string;
  /**
   * Value
   */
  value: string;
  /**
   * Data
   */
  data: string;
};

/**
 * AgentListResponse
 */
export type AgentListResponse = {
  /**
   * Id
   */
  id: string;
  /**
   * Name
   */
  name: string;
  /**
   * Description
   */
  description?: string | null;
  /**
   * Created At
   */
  created_at: string;
  /**
   * Updated At
   */
  updated_at: string;
};

/**
 * AgentMemoryResponse
 */
export type AgentMemoryResponse = {
  /**
   * Id
   */
  id: string;
};

/**
 * AgentResponse
 */
export type AgentResponse = {
  /**
   * Id
   */
  id: string;
  /**
   * User Id
   */
  user_id: string;
  /**
   * Name
   */
  name: string;
  /**
   * Description
   */
  description?: string | null;
  /**
   * Model Name
   */
  model_name: string;
  /**
   * Is Public
   */
  is_public: boolean;
  context: AgentTaskContext;
  /**
   * Prompts
   */
  prompts?: Array<ChatMessage>;
  /**
   * Tools
   */
  tools?: Array<AgentToolResponse>;
  /**
   * Triggers
   */
  triggers?: Array<AgentTriggerResponse>;
  /**
   * Memories
   */
  memories?: Array<AgentMemoryResponse>;
  /**
   * Wallets
   */
  wallets?: Array<AgentWalletResponse>;
  /**
   * Created At
   */
  created_at: string;
  /**
   * Updated At
   */
  updated_at: string;
};

/**
 * AgentStepImage
 */
export type AgentStepImage = {
  /**
   * Type
   */
  type?: "image";
  image: AgentActionImageData;
};

/**
 * AgentStepText
 */
export type AgentStepText = {
  /**
   * Type
   */
  type?: "text";
  /**
   * Text
   */
  text: string;
};

/**
 * AgentTaskContext
 */
export type AgentTaskContext = {
  /**
   * Chain Ids
   */
  chain_ids?: Array<number> | null;
  /**
   * Chain Type
   */
  chain_type?: "all" | "mainnet" | "testnet";
  /**
   * Automatic Execution
   */
  automatic_execution?: boolean;
};

/**
 * AgentTaskOptions
 */
export type AgentTaskOptions = {
  /**
   * Temperature
   */
  temperature?: number | null;
  /**
   * Max Tokens
   */
  max_tokens?: number | null;
  /**
   * Seed
   */
  seed?: number | null;
};

/**
 * AgentTaskUsage
 */
export type AgentTaskUsageReadable = {
  /**
   * Input Cached Tokens
   */
  input_cached_tokens: number;
  /**
   * Input Text Tokens
   */
  input_text_tokens: number;
  /**
   * Input Image Tokens
   */
  input_image_tokens: number;
  /**
   * Output Text Tokens
   */
  output_text_tokens: number;
  /**
   * Output Image Tokens
   */
  output_image_tokens: number;
  /**
   * Output Reasoning Tokens
   */
  output_reasoning_tokens: number;
  /**
   * Tool Read Tokens
   */
  tool_read_tokens: number;
  /**
   * Tool Write Tokens
   */
  tool_write_tokens: number;
  /**
   * Tool Requests
   */
  tool_requests: number;
  /**
   * Input Tokens
   */
  readonly input_tokens: number;
  /**
   * Output Tokens
   */
  readonly output_tokens: number;
  /**
   * Total Tokens
   */
  readonly total_tokens: number;
  /**
   * Tool Tokens
   */
  readonly tool_tokens: number;
};

/**
 * AgentTaskUsage
 */
export type AgentTaskUsageWritable = {
  /**
   * Input Cached Tokens
   */
  input_cached_tokens: number;
  /**
   * Input Text Tokens
   */
  input_text_tokens: number;
  /**
   * Input Image Tokens
   */
  input_image_tokens: number;
  /**
   * Output Text Tokens
   */
  output_text_tokens: number;
  /**
   * Output Image Tokens
   */
  output_image_tokens: number;
  /**
   * Output Reasoning Tokens
   */
  output_reasoning_tokens: number;
  /**
   * Tool Read Tokens
   */
  tool_read_tokens: number;
  /**
   * Tool Write Tokens
   */
  tool_write_tokens: number;
  /**
   * Tool Requests
   */
  tool_requests: number;
};

/**
 * AgentToolDataAgent
 */
export type AgentToolDataAgent = {
  /**
   * Type
   */
  type?: "agent";
  /**
   * Agent Id
   */
  agent_id: string;
};

/**
 * AgentToolDataMcp
 */
export type AgentToolDataMcp = {
  /**
   * Type
   */
  type?: "mcp";
  config: McpConfig;
};

/**
 * AgentToolDescription
 */
export type AgentToolDescription = {
  /**
   * Agent Id
   */
  agent_id: string;
  /**
   * Name
   */
  name: string;
  /**
   * Description
   */
  description: string;
};

/**
 * AgentToolResponse
 */
export type AgentToolResponse = {
  /**
   * Id
   */
  id: string;
  /**
   * Name
   */
  name: string | null;
  /**
   * Description
   */
  description: string | null;
  /**
   * Data
   */
  data:
    | ({
        type: "agent";
      } & AgentToolDataAgent)
    | ({
        type: "mcp";
      } & AgentToolDataMcp);
  /**
   * Created At
   */
  created_at: string;
  /**
   * Updated At
   */
  updated_at: string;
};

/**
 * AgentTransaction
 */
export type AgentTransaction = {
  /**
   * Action
   */
  action: string;
  /**
   * Transactions
   */
  transactions: Array<AgentTransactionDataTransaction>;
  simulation?: AgentTransactionDataSimulation | null;
  /**
   * Description
   */
  description?: string | null;
};

/**
 * AgentTransactionDataSimulation
 */
export type AgentTransactionDataSimulation = {
  /**
   * Success
   */
  success: boolean;
  /**
   * Message
   */
  message: string;
  /**
   * Chains
   */
  chains: Array<AgentTransactionDataSimulationChain>;
  /**
   * Contracts
   */
  contracts?: Array<AgentTransactionDataSimulationContract> | null;
  /**
   * Tokens
   */
  tokens?: Array<AgentTransactionDataSimulationToken> | null;
};

/**
 * AgentTransactionDataSimulationChain
 */
export type AgentTransactionDataSimulationChain = {
  /**
   * Chain Id
   */
  chain_id: number;
  /**
   * Name
   */
  name: string;
};

/**
 * AgentTransactionDataSimulationContract
 */
export type AgentTransactionDataSimulationContract = {
  /**
   * Chain Id
   */
  chain_id: number;
  /**
   * Address
   */
  address: string;
  /**
   * Name
   */
  name: string;
  /**
   * Type
   */
  type: "call" | "create";
  /**
   * Function Name
   */
  function_name?: string | null;
  /**
   * Function Args
   */
  function_args?: {
    [key: string]: unknown;
  } | null;
};

/**
 * AgentTransactionDataSimulationToken
 */
export type AgentTransactionDataSimulationToken = {
  /**
   * Chain Id
   */
  chain_id: number;
  /**
   * Address
   */
  address: string;
  /**
   * Name
   */
  name: string;
  /**
   * Symbol
   */
  symbol: string;
  /**
   * Decimals
   */
  decimals: number;
  /**
   * Amount
   */
  amount: number;
};

/**
 * AgentTransactionDataTransaction
 */
export type AgentTransactionDataTransaction = {
  /**
   * To
   */
  to: string;
  /**
   * Value
   */
  value: string;
  /**
   * Data
   */
  data: string;
  /**
   * Chain Id
   */
  chain_id: number;
};

/**
 * AgentTransactionExecution
 */
export type AgentTransactionExecution = {
  /**
   * Id
   */
  id: string;
  /**
   * Wallet Address
   */
  wallet_address: string;
  /**
   * Chain Id
   */
  chain_id: number;
  /**
   * Status
   */
  status: "pending" | "confirmed" | "failed";
  /**
   * Transaction Hash
   */
  transaction_hash?: string | null;
  /**
   * Error Message
   */
  error_message?: string | null;
  /**
   * Transactions
   */
  transactions?: Array<AgentTransactionDataTransaction> | null;
};

/**
 * AgentTriggerData
 */
export type AgentTriggerData = {
  /**
   * Type
   */
  type: unknown;
};

/**
 * AgentTriggerDataContinuous
 */
export type AgentTriggerDataContinuous = {
  /**
   * Type
   */
  type?: "continuous";
};

/**
 * AgentTriggerDataTime
 */
export type AgentTriggerDataTime = {
  /**
   * Type
   */
  type?: "time";
  /**
   * Cron Expression
   */
  cron_expression?: string | null;
};

/**
 * AgentTriggerResponse
 */
export type AgentTriggerResponse = {
  /**
   * Id
   */
  id: string;
  /**
   * Name
   */
  name: string;
  type: AgentTriggerType;
  data: AgentTriggerData;
  /**
   * Prompts
   */
  prompts: Array<ChatMessage>;
  /**
   * Is Paused
   */
  is_paused: boolean;
  /**
   * Created At
   */
  created_at: string;
  /**
   * Updated At
   */
  updated_at: string;
};

/**
 * AgentTriggerType
 */
export type AgentTriggerType = "continuous" | "time";

/**
 * AgentWalletResponse
 */
export type AgentWalletResponse = {
  /**
   * Id
   */
  id: string;
  type: WalletType;
  /**
   * Address
   */
  address: string;
  /**
   * Data
   */
  data:
    | ({
        type: "server";
      } & WalletDataServer)
    | ({
        type: "eip4337";
      } & WalletDataEip4337);
  /**
   * Transactions
   */
  transactions?: Array<WalletTransaction>;
  /**
   * Created At
   */
  created_at: string;
  /**
   * Updated At
   */
  updated_at: string;
};

/**
 * BlockchainEntity
 * Base class for all blockchain entities tracked in memory.
 */
export type BlockchainEntity = {
  /**
   * Chain Id
   */
  chain_id: number;
  /**
   * Address
   */
  address: string;
  /**
   * Roles
   */
  roles?: Array<EntityRole>;
  /**
   * First Mentioned At
   */
  first_mentioned_at?: string;
  /**
   * Last Mentioned At
   */
  last_mentioned_at?: string;
};

/**
 * ChatContentImage
 */
export type ChatContentImage = {
  /**
   * Type
   */
  type?: "image";
  /**
   * Image Url
   */
  image_url?: string | null;
  /**
   * B64
   */
  b64?: string | null;
};

/**
 * ChatContentText
 */
export type ChatContentText = {
  /**
   * Type
   */
  type?: "text";
  /**
   * Text
   */
  text: string;
};

/**
 * ChatContentTransaction
 */
export type ChatContentTransaction = {
  /**
   * Type
   */
  type?: "transaction";
  /**
   * Chain Id
   */
  chain_id: number;
  /**
   * Transaction Hash
   */
  transaction_hash: string;
};

/**
 * ChatMessage
 */
export type ChatMessage = {
  /**
   * Role
   */
  role: "system" | "user" | "assistant";
  /**
   * Content
   */
  content:
    | string
    | Array<
        | ({
            type: "image";
          } & ChatContentImage)
        | ({
            type: "text";
          } & ChatContentText)
        | ({
            type: "transaction";
          } & ChatContentTransaction)
      >;
};

/**
 * ChatParamsMultiMessages
 */
export type ChatParamsMultiMessages = {
  /**
   * Stream
   */
  stream?: boolean | null;
  /**
   * Model Name
   */
  model_name?: string | null;
  /**
   * Session Id
   */
  session_id?: string | null;
  context?: CompletionContextInput | null;
  /**
   * Max Tokens
   */
  max_tokens?: number | null;
  /**
   * Max Completion Tokens
   */
  max_completion_tokens?: number | null;
  /**
   * Frequency Penalty
   */
  frequency_penalty?: number | null;
  /**
   * Presence Penalty
   */
  presence_penalty?: number | null;
  /**
   * Temperature
   */
  temperature?: number | null;
  /**
   * Top P
   */
  top_p?: number | null;
  /**
   * Response Format
   */
  response_format?:
    | (
        | ({
            type: "json_object";
          } & CompletionResponseFormatJsonObject)
        | ({
            type: "json_schema";
          } & CompletionResponseFormatJsonSchema)
      )
    | null;
  /**
   * Messages
   */
  messages: Array<ChatMessage>;
};

/**
 * ChatParamsSingleMessage
 */
export type ChatParamsSingleMessage = {
  /**
   * Stream
   */
  stream?: boolean | null;
  /**
   * Model Name
   */
  model_name?: string | null;
  /**
   * Session Id
   */
  session_id?: string | null;
  context?: CompletionContextInput | null;
  /**
   * Max Tokens
   */
  max_tokens?: number | null;
  /**
   * Max Completion Tokens
   */
  max_completion_tokens?: number | null;
  /**
   * Frequency Penalty
   */
  frequency_penalty?: number | null;
  /**
   * Presence Penalty
   */
  presence_penalty?: number | null;
  /**
   * Temperature
   */
  temperature?: number | null;
  /**
   * Top P
   */
  top_p?: number | null;
  /**
   * Response Format
   */
  response_format?:
    | (
        | ({
            type: "json_object";
          } & CompletionResponseFormatJsonObject)
        | ({
            type: "json_schema";
          } & CompletionResponseFormatJsonSchema)
      )
    | null;
  /**
   * Message
   */
  message: string;
};

/**
 * ChatResponse
 */
export type ChatResponse = {
  /**
   * Message
   */
  message: string;
  /**
   * Actions
   */
  actions: Array<
    | ({
        type: "init";
      } & AgentActionInit)
    | ({
        type: "eval";
      } & AgentActionEval)
    | ({
        type: "presence";
      } & AgentActionPresence)
    | ({
        type: "context";
      } & AgentActionContext)
    | ({
        type: "image";
      } & AgentActionImage)
    | ({
        type: "execution";
      } & AgentActionExecution)
    | ({
        type: "sign_transaction";
      } & AgentActionSignTransaction)
    | ({
        type: "sign_swap";
      } & AgentActionSignSwap)
  > | null;
  /**
   * Session Id
   */
  session_id: string | null;
  /**
   * Request Id
   */
  request_id: string | null;
};

/**
 * CompletionChoice
 */
export type CompletionChoice = {
  message: CompletionChoiceChatMessage;
  /**
   * Finish Reason
   */
  finish_reason: "stop" | "length";
  /**
   * Index
   */
  index: number;
};

/**
 * CompletionChoiceChatMessage
 */
export type CompletionChoiceChatMessage = {
  /**
   * Role
   */
  role: "user" | "assistant";
  /**
   * Content
   */
  content: string;
};

/**
 * CompletionContext
 */
export type CompletionContextInput = {
  /**
   * Session Id
   */
  session_id?: string | null;
  /**
   * Wallet Address
   */
  wallet_address?:
    | string
    | ({
        type: "server_wallet";
      } & ContextFilterServerWallet)
    | null;
  /**
   * Chain Ids
   */
  chain_ids?: Array<number> | null;
  /**
   * Networks
   */
  networks?: "all" | "mainnet" | "testnet";
  /**
   * Prompts
   */
  prompts?: Array<ChatMessage>;
  /**
   * Mcp Tools
   */
  mcp_tools?: Array<McpTool> | null;
  /**
   * Agent Tools
   */
  agent_tools?: Array<AgentToolDescription> | null;
  /**
   * Deployed Contracts
   */
  deployed_contracts?: Array<ContractBase>;
  /**
   * Entities
   */
  entities?: {
    [key: string]: BlockchainEntity;
  };
};

/**
 * CompletionContext
 */
export type CompletionContextOutput = {
  /**
   * Session Id
   */
  session_id?: string | null;
  /**
   * Wallet Address
   */
  wallet_address?:
    | string
    | ({
        type: "server_wallet";
      } & ContextFilterServerWallet)
    | null;
  /**
   * Chain Ids
   */
  chain_ids?: Array<number> | null;
  /**
   * Networks
   */
  networks?: "all" | "mainnet" | "testnet";
  /**
   * Prompts
   */
  prompts?: Array<ChatMessage>;
};

/**
 * CompletionParams
 */
export type CompletionParams = {
  /**
   * Messages
   */
  messages: Array<ChatMessage>;
  /**
   * Model
   */
  model?: string | null;
  /**
   * Stream
   */
  stream?: boolean;
  /**
   * Max Tokens
   */
  max_tokens?: number | null;
  /**
   * Max Completion Tokens
   */
  max_completion_tokens?: number | null;
  /**
   * Frequency Penalty
   */
  frequency_penalty?: number | null;
  /**
   * Presence Penalty
   */
  presence_penalty?: number | null;
  /**
   * Temperature
   */
  temperature?: number | null;
  /**
   * Top P
   */
  top_p?: number | null;
  /**
   * Response Format
   */
  response_format?:
    | (
        | ({
            type: "json_object";
          } & CompletionResponseFormatJsonObject)
        | ({
            type: "json_schema";
          } & CompletionResponseFormatJsonSchema)
      )
    | null;
  context?: CompletionContextInput | null;
};

/**
 * CompletionResponse
 */
export type CompletionResponse = {
  /**
   * Id
   */
  id: string;
  /**
   * Choices
   */
  choices: Array<CompletionChoice>;
  /**
   * Created
   */
  created: number;
  /**
   * Object
   */
  object: "chat.completion";
  usage: CompletionUsage;
  /**
   * Actions
   */
  actions: Array<
    | ({
        type: "init";
      } & AgentActionInit)
    | ({
        type: "eval";
      } & AgentActionEval)
    | ({
        type: "presence";
      } & AgentActionPresence)
    | ({
        type: "context";
      } & AgentActionContext)
    | ({
        type: "image";
      } & AgentActionImage)
    | ({
        type: "execution";
      } & AgentActionExecution)
    | ({
        type: "sign_transaction";
      } & AgentActionSignTransaction)
    | ({
        type: "sign_swap";
      } & AgentActionSignSwap)
  > | null;
  context: CompletionContextOutput | null;
};

/**
 * CompletionResponseFormatJsonObject
 */
export type CompletionResponseFormatJsonObject = {
  /**
   * Type
   */
  type: "json_object";
};

/**
 * CompletionResponseFormatJsonSchema
 */
export type CompletionResponseFormatJsonSchema = {
  /**
   * Type
   */
  type: "json_schema";
  /**
   * Json Schema
   */
  json_schema: {
    [key: string]: unknown;
  };
};

/**
 * CompletionUsage
 */
export type CompletionUsage = {
  /**
   * Prompt Tokens
   */
  prompt_tokens: number;
  /**
   * Completion Tokens
   */
  completion_tokens: number;
  /**
   * Total Tokens
   */
  total_tokens: number;
};

/**
 * ContextFilterServerWallet
 */
export type ContextFilterServerWallet = {
  /**
   * Type
   */
  type: "server_wallet";
  /**
   * Server Wallet Id
   */
  server_wallet_id?: string | null;
  /**
   * Server Wallet Address
   */
  server_wallet_address?: string | null;
};

/**
 * ContractBase
 * Base class for contract-like entities that can be processed by ContractMetadata.
 */
export type ContractBase = {
  /**
   * Chain Id
   */
  chain_id: number;
  /**
   * Address
   */
  address: string;
  /**
   * Roles
   */
  roles?: Array<EntityRole>;
  /**
   * First Mentioned At
   */
  first_mentioned_at?: string;
  /**
   * Last Mentioned At
   */
  last_mentioned_at?: string;
  /**
   * Name
   */
  name?: string | null;
  /**
   * Symbol
   */
  symbol?: string | null;
  /**
   * Standard
   */
  standard?: ("ERC20" | "ERC721" | "ERC1155" | "Unknown") | null;
  /**
   * Description
   */
  description?: string | null;
  /**
   * Total Supply
   */
  total_supply?: number | null;
  /**
   * Price
   */
  price?: string | null;
  /**
   * Abi
   */
  abi?: Array<AbiDocFormatted> | null;
  deployment_status?: DeploymentStatus;
};

/**
 * ConversationListResponse
 */
export type ConversationListResponse = {
  /**
   * Id
   */
  id: string;
  /**
   * Title
   */
  title?: string;
};

/**
 * ConversationMessageResponse
 */
export type ConversationMessageResponseReadable = {
  /**
   * Id
   */
  id: string;
  /**
   * Inputs
   */
  inputs?: Array<ChatMessage>;
  /**
   * Responses
   */
  responses?: Array<ChatMessage>;
  /**
   * Steps
   */
  steps?: Array<
    | ({
        type: "text";
      } & AgentStepText)
    | ({
        type: "image";
      } & AgentStepImage)
  >;
  /**
   * Transactions
   */
  transactions?: Array<AgentTransaction>;
  usage?: AgentTaskUsageReadable | null;
};

/**
 * ConversationMessageResponse
 */
export type ConversationMessageResponseWritable = {
  /**
   * Id
   */
  id: string;
  /**
   * Inputs
   */
  inputs?: Array<ChatMessage>;
  /**
   * Responses
   */
  responses?: Array<ChatMessage>;
  /**
   * Steps
   */
  steps?: Array<
    | ({
        type: "text";
      } & AgentStepText)
    | ({
        type: "image";
      } & AgentStepImage)
  >;
  /**
   * Transactions
   */
  transactions?: Array<AgentTransaction>;
  usage?: AgentTaskUsageWritable | null;
};

/**
 * ConversationResponse
 */
export type ConversationResponseReadable = {
  /**
   * Id
   */
  id: string;
  /**
   * Title
   */
  title: string;
  /**
   * User Id
   */
  user_id: string;
  /**
   * Agent Id
   */
  agent_id: string;
  /**
   * Is Public
   */
  is_public: boolean;
  /**
   * Created At
   */
  created_at: string;
  /**
   * Updated At
   */
  updated_at: string;
  /**
   * Messages
   */
  messages?: Array<ConversationMessageResponseReadable>;
};

/**
 * ConversationResponse
 */
export type ConversationResponseWritable = {
  /**
   * Id
   */
  id: string;
  /**
   * Title
   */
  title: string;
  /**
   * User Id
   */
  user_id: string;
  /**
   * Agent Id
   */
  agent_id: string;
  /**
   * Is Public
   */
  is_public: boolean;
  /**
   * Created At
   */
  created_at: string;
  /**
   * Updated At
   */
  updated_at: string;
  /**
   * Messages
   */
  messages?: Array<ConversationMessageResponseWritable>;
};

/**
 * CreateAgentHandlerParams
 * inherits from CreateAgentParams, but adds triggers and tools
 */
export type CreateAgentHandlerParams = {
  /**
   * Name
   */
  name: string;
  /**
   * Description
   */
  description?: string | null;
  /**
   * Prompts
   */
  prompts?: Array<ChatMessage> | null;
  /**
   * Triggers
   */
  triggers?: Array<CreateAgentTriggerParams> | null;
  /**
   * Tools
   */
  tools?: Array<CreateAgentToolParams> | null;
};

/**
 * CreateAgentToolParams
 */
export type CreateAgentToolParams = {
  /**
   * Name
   */
  name: string;
  /**
   * Data
   */
  data:
    | ({
        type: "agent";
      } & AgentToolDataAgent)
    | ({
        type: "mcp";
      } & AgentToolDataMcp);
  /**
   * Description
   */
  description?: string | null;
};

/**
 * CreateAgentTriggerParams
 */
export type CreateAgentTriggerParams = {
  /**
   * Name
   */
  name: string;
  /**
   * Data
   */
  data:
    | ({
        type: "continuous";
      } & AgentTriggerDataContinuous)
    | ({
        type: "time";
      } & AgentTriggerDataTime);
  /**
   * Prompts
   */
  prompts?: Array<ChatMessage> | null;
};

/**
 * CreateConversationHandlerParams
 */
export type CreateConversationHandlerParams = {
  /**
   * Title
   */
  title?: string | null;
  /**
   * Is Public
   */
  is_public?: boolean | null;
  /**
   * Agent Id
   */
  agent_id: string;
};

/**
 * CreateMessageHandlerParams
 */
export type CreateMessageHandlerParams = {
  /**
   * Inputs
   */
  inputs: Array<ChatMessage>;
  options?: AgentTaskOptions | null;
  context?: AgentTaskContext | null;
  /**
   * Stream
   */
  stream?: boolean;
};

/**
 * CreateSessionParams
 */
export type CreateSessionParams = {
  /**
   * Model Name
   */
  model_name?: string;
  /**
   * Title
   */
  title?: string | null;
  /**
   * Is Public
   */
  is_public?: boolean | null;
  context?: CompletionContextInput | null;
};

/**
 * CreateUserWalletParams
 */
export type CreateUserWalletParams = {
  type: WalletType;
  /**
   * Data
   */
  data?: WalletDataServer | WalletDataEip4337 | null;
};

/**
 * DeploymentStatus
 */
export type DeploymentStatus = "unknown" | "pending" | "deployed" | "failed";

/**
 * EntityRole
 */
export type EntityRole = "mentioned" | "deployed" | "user";

/**
 * Feedback
 */
export type Feedback = {
  /**
   * Id
   */
  id: string;
  /**
   * Session Id
   */
  session_id: string;
  /**
   * Request Id
   */
  request_id: string;
  /**
   * Feedback Rating
   */
  feedback_rating: number | null;
  /**
   * Feedback Response
   */
  feedback_response: string | null;
  /**
   * Comment
   */
  comment: string | null;
  /**
   * Created At
   */
  created_at: string | null;
  /**
   * Updated At
   */
  updated_at: string | null;
};

/**
 * FeedbackParams
 */
export type FeedbackParams = {
  /**
   * Session Id
   */
  session_id: string;
  /**
   * Request Id
   */
  request_id: string;
  /**
   * Feedback Rating
   */
  feedback_rating?: number | null;
  /**
   * Feedback Response
   */
  feedback_response?: string | null;
  /**
   * Comment
   */
  comment?: string | null;
};

/**
 * GetPayloadParams
 */
export type GetPayloadParams = {
  /**
   * Address
   */
  address: string;
  /**
   * Chain Id
   */
  chain_id?: number | string | null;
};

/**
 * GetPayloadResponse
 */
export type GetPayloadResponse = {
  payload: Payload;
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
  /**
   * Detail
   */
  detail?: Array<ValidationError>;
};

/**
 * LoginParams
 */
export type LoginParams = {
  payload: Payload;
  /**
   * Signature
   */
  signature?: string | null;
  /**
   * Token
   */
  token?: string | null;
};

/**
 * LoginResponse
 */
export type LoginResponse = {
  /**
   * Token
   */
  token: string;
};

/**
 * McpConfig
 */
export type McpConfig = {
  /**
   * Url
   */
  url: string;
  /**
   * Headers
   */
  headers?: {
    [key: string]: unknown;
  } | null;
};

/**
 * McpTool
 */
export type McpTool = {
  /**
   * Url
   */
  url: string;
  /**
   * Headers
   */
  headers?: {
    [key: string]: string;
  } | null;
};

/**
 * Model
 */
export type Model = {
  /**
   * Id
   */
  id: string;
  /**
   * Object
   */
  object: "model";
  /**
   * Created
   */
  created: number;
  /**
   * Owned By
   */
  owned_by: "thirdweb";
};

/**
 * ModelResponse
 */
export type ModelResponse = {
  /**
   * Object
   */
  object: "list";
  /**
   * Data
   */
  data: Array<Model>;
};

/**
 * Payload
 */
export type Payload = {
  /**
   * Address
   */
  address: string;
  /**
   * Chain Id
   */
  chain_id: number | null;
  /**
   * Domain
   */
  domain: string;
  /**
   * Expiration Time
   */
  expiration_time: string;
  /**
   * Invalid Before
   */
  invalid_before: string;
  /**
   * Issued At
   */
  issued_at: string;
  /**
   * Nonce
   */
  nonce: string;
  /**
   * Statement
   */
  statement: string;
  /**
   * Version
   */
  version: string;
  /**
   * Resources
   */
  resources: Array<string> | null;
  /**
   * Uri
   */
  uri: string;
};

/**
 * RegistryAgentListResponse
 */
export type RegistryAgentListResponse = {
  /**
   * Id
   */
  id: string;
  /**
   * User Id
   */
  user_id: string;
  /**
   * Name
   */
  name: string;
  /**
   * Description
   */
  description: string;
  /**
   * Created At
   */
  created_at: string;
  /**
   * Updated At
   */
  updated_at: string;
};

/**
 * ResponseModel[AgentResponse]
 */
export type ResponseModelAgentResponse = {
  result: AgentResponse;
};

/**
 * ResponseModel[AgentToolResponse]
 */
export type ResponseModelAgentToolResponse = {
  result: AgentToolResponse;
};

/**
 * ResponseModel[AgentTriggerResponse]
 */
export type ResponseModelAgentTriggerResponse = {
  result: AgentTriggerResponse;
};

/**
 * ResponseModel[AgentWalletResponse]
 */
export type ResponseModelAgentWalletResponse = {
  result: AgentWalletResponse;
};

/**
 * ResponseModel[ConversationMessageResponse]
 */
export type ResponseModelConversationMessageResponseReadable = {
  result: ConversationMessageResponseReadable;
};

/**
 * ResponseModel[ConversationMessageResponse]
 */
export type ResponseModelConversationMessageResponseWritable = {
  result: ConversationMessageResponseWritable;
};

/**
 * ResponseModel[ConversationResponse]
 */
export type ResponseModelConversationResponseReadable = {
  result: ConversationResponseReadable;
};

/**
 * ResponseModel[ConversationResponse]
 */
export type ResponseModelConversationResponseWritable = {
  result: ConversationResponseWritable;
};

/**
 * ResponseModel[Feedback]
 */
export type ResponseModelFeedback = {
  result: Feedback;
};

/**
 * ResponseModel[GetPayloadResponse]
 */
export type ResponseModelGetPayloadResponse = {
  result: GetPayloadResponse;
};

/**
 * ResponseModel[LoginResponse]
 */
export type ResponseModelLoginResponse = {
  result: LoginResponse;
};

/**
 * ResponseModel[SessionDeleteResponse]
 */
export type ResponseModelSessionDeleteResponse = {
  result: SessionDeleteResponse;
};

/**
 * ResponseModel[Session]
 */
export type ResponseModelSession = {
  result: Session;
};

/**
 * ResponseModel[UUID]
 */
export type ResponseModelUuid = {
  /**
   * Result
   */
  result: string;
};

/**
 * ResponseModel[UserResponse]
 */
export type ResponseModelUserResponse = {
  result: UserResponse;
};

/**
 * ResponseModel[UserWalletResponse]
 */
export type ResponseModelUserWalletResponse = {
  result: UserWalletResponse;
};

/**
 * ResponseModel[VerifyJwtResponse]
 */
export type ResponseModelVerifyJwtResponse = {
  result: VerifyJwtResponse;
};

/**
 * ResponseModel[list[AgentListResponse]]
 */
export type ResponseModelListAgentListResponse = {
  /**
   * Result
   */
  result: Array<AgentListResponse>;
};

/**
 * ResponseModel[list[AgentWalletResponse]]
 */
export type ResponseModelListAgentWalletResponse = {
  /**
   * Result
   */
  result: Array<AgentWalletResponse>;
};

/**
 * ResponseModel[list[ConversationListResponse]]
 */
export type ResponseModelListConversationListResponse = {
  /**
   * Result
   */
  result: Array<ConversationListResponse>;
};

/**
 * ResponseModel[list[RegistryAgentListResponse]]
 */
export type ResponseModelListRegistryAgentListResponse = {
  /**
   * Result
   */
  result: Array<RegistryAgentListResponse>;
};

/**
 * ResponseModel[list[SessionList]]
 */
export type ResponseModelListSessionList = {
  /**
   * Result
   */
  result: Array<SessionList>;
};

/**
 * ResponseModel[list[UserWalletResponse]]
 */
export type ResponseModelListUserWalletResponse = {
  /**
   * Result
   */
  result: Array<UserWalletResponse>;
};

/**
 * Session
 */
export type Session = {
  /**
   * Id
   */
  id: string;
  /**
   * Team Id
   */
  team_id: string;
  /**
   * Project Id
   */
  project_id: string | null;
  /**
   * Model Name
   */
  model_name: string;
  /**
   * Is Public
   */
  is_public: boolean | null;
  /**
   * Title
   */
  title: string | null;
  /**
   * Memory
   */
  memory: Array<{
    [key: string]: unknown;
  }> | null;
  /**
   * History
   */
  history: Array<{
    [key: string]: unknown;
  }> | null;
  /**
   * Action
   */
  action: Array<{
    [key: string]: unknown;
  }> | null;
  context?: CompletionContextOutput | null;
  /**
   * Archive At
   */
  archive_at: string | null;
  /**
   * Deleted At
   */
  deleted_at: string | null;
  /**
   * Created At
   */
  created_at: string | null;
  /**
   * Updated At
   */
  updated_at: string | null;
};

/**
 * SessionDeleteResponse
 */
export type SessionDeleteResponse = {
  /**
   * Id
   */
  id: string;
  /**
   * Deleted At
   */
  deleted_at: string;
};

/**
 * SessionList
 */
export type SessionList = {
  /**
   * Id
   */
  id: string;
  /**
   * Title
   */
  title: string | null;
  /**
   * Created At
   */
  created_at: string;
  /**
   * Updated At
   */
  updated_at: string;
};

/**
 * TransactionParams
 */
export type TransactionParams = {
  /**
   * To
   */
  to: string;
  /**
   * Value
   */
  value: string;
  /**
   * Data
   */
  data: string;
};

/**
 * UpdateAgentHandlerParams
 */
export type UpdateAgentHandlerParams = {
  /**
   * Name
   */
  name?: string | null;
  /**
   * Description
   */
  description?: string | null;
  /**
   * Prompts
   */
  prompts?: Array<ChatMessage> | null;
};

/**
 * UpdateAgentToolParams
 */
export type UpdateAgentToolParams = {
  /**
   * Name
   */
  name?: string | null;
  /**
   * Data
   */
  data?:
    | (
        | ({
            type: "agent";
          } & AgentToolDataAgent)
        | ({
            type: "mcp";
          } & AgentToolDataMcp)
      )
    | null;
  /**
   * Description
   */
  description?: string | null;
};

/**
 * UpdateAgentTriggerParams
 */
export type UpdateAgentTriggerParams = {
  /**
   * Name
   */
  name?: string | null;
  /**
   * Data
   */
  data?:
    | (
        | ({
            type: "continuous";
          } & AgentTriggerDataContinuous)
        | ({
            type: "time";
          } & AgentTriggerDataTime)
      )
    | null;
  /**
   * Is Paused
   */
  is_paused?: boolean | null;
  /**
   * Prompts
   */
  prompts?: Array<ChatMessage> | null;
};

/**
 * UpdateConversationHandlerParams
 */
export type UpdateConversationHandlerParams = {
  /**
   * Title
   */
  title?: string | null;
  /**
   * Is Public
   */
  is_public?: boolean | null;
};

/**
 * UpdateMessageHandlerParams
 */
export type UpdateMessageHandlerParams = {
  /**
   * Inputs
   */
  inputs?: Array<ChatMessage> | null;
  options?: AgentTaskOptions | null;
  /**
   * Stream
   */
  stream?: boolean;
};

/**
 * UpdateSessionParams
 */
export type UpdateSessionParams = {
  /**
   * Title
   */
  title?: string | null;
  /**
   * Model Name
   */
  model_name?: string | null;
  /**
   * Is Public
   */
  is_public?: boolean | null;
  context?: CompletionContextInput | null;
};

/**
 * UpdateUserWalletParams
 */
export type UpdateUserWalletParams = {
  type?: WalletType | null;
  /**
   * Data
   */
  data?: WalletDataServer | WalletDataEip4337 | null;
};

/**
 * UserAgentResponse
 */
export type UserAgentResponse = {
  /**
   * Id
   */
  id: string;
  /**
   * Name
   */
  name: string;
  /**
   * Description
   */
  description?: string | null;
  /**
   * Created At
   */
  created_at: string;
  /**
   * Updated At
   */
  updated_at: string;
};

/**
 * UserConversationResponse
 */
export type UserConversationResponse = {
  /**
   * Id
   */
  id: string;
  /**
   * Title
   */
  title: string;
  /**
   * Created At
   */
  created_at: string;
  /**
   * Updated At
   */
  updated_at: string;
  /**
   * Agent Id
   */
  agent_id: string;
};

/**
 * UserMemoryResponse
 */
export type UserMemoryResponse = {
  /**
   * Id
   */
  id: string;
};

/**
 * UserResponse
 */
export type UserResponse = {
  /**
   * Id
   */
  id: string;
  /**
   * Agents
   */
  agents: Array<UserAgentResponse>;
  /**
   * Memories
   */
  memories: Array<UserMemoryResponse>;
  /**
   * Conversations
   */
  conversations: Array<UserConversationResponse>;
  /**
   * Wallets
   */
  wallets: Array<UserWalletResponse>;
};

/**
 * UserWalletResponse
 */
export type UserWalletResponse = {
  /**
   * Id
   */
  id: string;
  type: WalletType;
  /**
   * Address
   */
  address: string;
  /**
   * Data
   */
  data:
    | ({
        type: "server";
      } & WalletDataServer)
    | ({
        type: "eip4337";
      } & WalletDataEip4337);
  /**
   * Transactions
   */
  transactions?: Array<WalletTransaction>;
  /**
   * Created At
   */
  created_at: string;
  /**
   * Updated At
   */
  updated_at: string;
};

/**
 * ValidationError
 */
export type ValidationError = {
  /**
   * Location
   */
  loc: Array<string | number>;
  /**
   * Message
   */
  msg: string;
  /**
   * Error Type
   */
  type: string;
};

/**
 * VerifyJwtResponse
 */
export type VerifyJwtResponse = {
  /**
   * Address
   */
  address: string;
  /**
   * Is Valid
   */
  is_valid: boolean;
};

/**
 * WalletDataEIP4337
 */
export type WalletDataEip4337 = {
  /**
   * Type
   */
  type?: "eip4337";
  /**
   * Signer Address
   */
  signer_address: string;
  /**
   * Factory Address
   */
  factory_address: string;
  /**
   * Smart Account Address
   */
  smart_account_address: string;
  /**
   * Entrypoint Address
   */
  entrypoint_address: string;
  /**
   * Sponsor Gas
   */
  sponsor_gas?: boolean;
  /**
   * Chain Ids
   */
  chain_ids?: Array<number> | null;
};

/**
 * WalletDataServer
 */
export type WalletDataServer = {
  /**
   * Type
   */
  type?: "server";
  /**
   * Smart Account Address
   */
  smart_account_address: string;
};

/**
 * WalletTransaction
 */
export type WalletTransaction = {
  /**
   * Id
   */
  id: string;
  /**
   * Chain Id
   */
  chain_id: number;
  /**
   * Params
   */
  params: Array<TransactionParams>;
  /**
   * Hash
   */
  hash: string | null;
  /**
   * Submitted At
   */
  submitted_at: string | null;
  /**
   * Cancelled At
   */
  cancelled_at: string | null;
  /**
   * Errored At
   */
  errored_at: string | null;
  /**
   * Error Message
   */
  error_message: string | null;
  /**
   * Created At
   */
  created_at: string;
  /**
   * Updated At
   */
  updated_at: string;
};

/**
 * WalletType
 */
export type WalletType = "eoa" | "server" | "eip4337" | "eip7702";

export type DeprecatedGetSessionsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/session/list";
};

export type DeprecatedGetSessionsResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelListSessionList;
};

export type DeprecatedGetSessionsResponse =
  DeprecatedGetSessionsResponses[keyof DeprecatedGetSessionsResponses];

export type DeprecatedDeleteSessionData = {
  body?: never;
  path: {
    /**
     * The id of the session to delete
     */
    session_id: string;
  };
  query?: never;
  url: "/session/{session_id}";
};

export type DeprecatedDeleteSessionErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type DeprecatedDeleteSessionError =
  DeprecatedDeleteSessionErrors[keyof DeprecatedDeleteSessionErrors];

export type DeprecatedDeleteSessionResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelSessionDeleteResponse;
};

export type DeprecatedDeleteSessionResponse =
  DeprecatedDeleteSessionResponses[keyof DeprecatedDeleteSessionResponses];

export type DeprecatedGetSessionData = {
  body?: never;
  path: {
    /**
     * The id of the session to fetch
     */
    session_id: string;
  };
  query?: never;
  url: "/session/{session_id}";
};

export type DeprecatedGetSessionErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type DeprecatedGetSessionError =
  DeprecatedGetSessionErrors[keyof DeprecatedGetSessionErrors];

export type DeprecatedGetSessionResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelSession;
};

export type DeprecatedGetSessionResponse =
  DeprecatedGetSessionResponses[keyof DeprecatedGetSessionResponses];

export type DeprecatedUpdateSessionData = {
  body: UpdateSessionParams;
  path: {
    /**
     * The id of the session to update
     */
    session_id: string;
  };
  query?: never;
  url: "/session/{session_id}";
};

export type DeprecatedUpdateSessionErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type DeprecatedUpdateSessionError =
  DeprecatedUpdateSessionErrors[keyof DeprecatedUpdateSessionErrors];

export type DeprecatedUpdateSessionResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelSession;
};

export type DeprecatedUpdateSessionResponse =
  DeprecatedUpdateSessionResponses[keyof DeprecatedUpdateSessionResponses];

export type DeprecatedCreateSessionData = {
  body: CreateSessionParams;
  path?: never;
  query?: never;
  url: "/session";
};

export type DeprecatedCreateSessionErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type DeprecatedCreateSessionError =
  DeprecatedCreateSessionErrors[keyof DeprecatedCreateSessionErrors];

export type DeprecatedCreateSessionResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelSession;
};

export type DeprecatedCreateSessionResponse =
  DeprecatedCreateSessionResponses[keyof DeprecatedCreateSessionResponses];

export type DeprecatedClearSessionData = {
  body?: never;
  path: {
    /**
     * The id of the session to update
     */
    session_id: string;
  };
  query?: never;
  url: "/session/{session_id}/clear";
};

export type DeprecatedClearSessionErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type DeprecatedClearSessionError =
  DeprecatedClearSessionErrors[keyof DeprecatedClearSessionErrors];

export type DeprecatedClearSessionResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelSession;
};

export type DeprecatedClearSessionResponse =
  DeprecatedClearSessionResponses[keyof DeprecatedClearSessionResponses];

export type DeprecatedChatData = {
  /**
   * Req
   */
  body: ChatParamsSingleMessage | ChatParamsMultiMessages;
  path?: never;
  query?: never;
  url: "/chat";
};

export type DeprecatedChatErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type DeprecatedChatError =
  DeprecatedChatErrors[keyof DeprecatedChatErrors];

export type DeprecatedChatResponses = {
  /**
   * Successful Response
   */
  200: ChatResponse;
};

export type DeprecatedChatResponse =
  DeprecatedChatResponses[keyof DeprecatedChatResponses];

export type DeprecatedChatCompletionsData = {
  body: CompletionParams;
  path?: never;
  query?: never;
  url: "/chat/completions";
};

export type DeprecatedChatCompletionsErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type DeprecatedChatCompletionsError =
  DeprecatedChatCompletionsErrors[keyof DeprecatedChatCompletionsErrors];

export type DeprecatedChatCompletionsResponses = {
  /**
   * Successful Response
   */
  200: CompletionResponse;
};

export type DeprecatedChatCompletionsResponse =
  DeprecatedChatCompletionsResponses[keyof DeprecatedChatCompletionsResponses];

export type DeprecatedExecuteData = {
  /**
   * Req
   */
  body: ChatParamsSingleMessage | ChatParamsMultiMessages;
  path?: never;
  query?: never;
  url: "/execute";
};

export type DeprecatedExecuteErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type DeprecatedExecuteError =
  DeprecatedExecuteErrors[keyof DeprecatedExecuteErrors];

export type DeprecatedExecuteResponses = {
  /**
   * Successful Response
   */
  200: ChatResponse;
};

export type DeprecatedExecuteResponse =
  DeprecatedExecuteResponses[keyof DeprecatedExecuteResponses];

export type FeedbackData = {
  body: FeedbackParams;
  path?: never;
  query?: never;
  url: "/feedback";
};

export type FeedbackErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type FeedbackError = FeedbackErrors[keyof FeedbackErrors];

export type FeedbackResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelFeedback;
};

export type FeedbackResponse = FeedbackResponses[keyof FeedbackResponses];

export type GetModelsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/models";
};

export type GetModelsResponses = {
  /**
   * Successful Response
   */
  200: ModelResponse;
};

export type GetModelsResponse = GetModelsResponses[keyof GetModelsResponses];

export type GetAuthDelegatePayloadData = {
  body: GetPayloadParams;
  path?: never;
  query?: never;
  url: "/auth/delegate/payload";
};

export type GetAuthDelegatePayloadErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetAuthDelegatePayloadError =
  GetAuthDelegatePayloadErrors[keyof GetAuthDelegatePayloadErrors];

export type GetAuthDelegatePayloadResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelGetPayloadResponse;
};

export type GetAuthDelegatePayloadResponse =
  GetAuthDelegatePayloadResponses[keyof GetAuthDelegatePayloadResponses];

export type AuthDelegateLoginData = {
  body: LoginParams;
  path?: never;
  query?: never;
  url: "/auth/delegate/login";
};

export type AuthDelegateLoginErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type AuthDelegateLoginError =
  AuthDelegateLoginErrors[keyof AuthDelegateLoginErrors];

export type AuthDelegateLoginResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelLoginResponse;
};

export type AuthDelegateLoginResponse =
  AuthDelegateLoginResponses[keyof AuthDelegateLoginResponses];

export type VerifyAuthData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/auth/verify";
};

export type VerifyAuthResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelVerifyJwtResponse;
};

export type VerifyAuthResponse = VerifyAuthResponses[keyof VerifyAuthResponses];

export type GetUserData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/user";
};

export type GetUserResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelUserResponse;
};

export type GetUserResponse = GetUserResponses[keyof GetUserResponses];

export type GetUserWalletsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/user/wallets";
};

export type GetUserWalletsResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelListUserWalletResponse;
};

export type GetUserWalletsResponse =
  GetUserWalletsResponses[keyof GetUserWalletsResponses];

export type DeleteUserWalletData = {
  body?: never;
  path: {
    /**
     * Wallet Id
     */
    wallet_id: string;
  };
  query?: never;
  url: "/user/wallet/{wallet_id}";
};

export type DeleteUserWalletErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type DeleteUserWalletError =
  DeleteUserWalletErrors[keyof DeleteUserWalletErrors];

export type DeleteUserWalletResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type GetUserWalletData = {
  body?: never;
  path: {
    /**
     * Wallet Id
     */
    wallet_id: string;
  };
  query?: never;
  url: "/user/wallet/{wallet_id}";
};

export type GetUserWalletErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetUserWalletError = GetUserWalletErrors[keyof GetUserWalletErrors];

export type GetUserWalletResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelUserWalletResponse;
};

export type GetUserWalletResponse =
  GetUserWalletResponses[keyof GetUserWalletResponses];

export type UpdateUserWalletData = {
  body: UpdateUserWalletParams;
  path: {
    /**
     * Wallet Id
     */
    wallet_id: string;
  };
  query?: never;
  url: "/user/wallet/{wallet_id}";
};

export type UpdateUserWalletErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type UpdateUserWalletError =
  UpdateUserWalletErrors[keyof UpdateUserWalletErrors];

export type UpdateUserWalletResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type CreateUserWalletData = {
  body: CreateUserWalletParams;
  path?: never;
  query?: never;
  url: "/user/wallet";
};

export type CreateUserWalletErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type CreateUserWalletError =
  CreateUserWalletErrors[keyof CreateUserWalletErrors];

export type CreateUserWalletResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type GetAgentsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/agents";
};

export type GetAgentsResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelListAgentListResponse;
};

export type GetAgentsResponse = GetAgentsResponses[keyof GetAgentsResponses];

export type DeleteAgentData = {
  body?: never;
  path: {
    /**
     * Agent Id
     */
    agent_id: string;
  };
  query?: never;
  url: "/agent/{agent_id}";
};

export type DeleteAgentErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type DeleteAgentError = DeleteAgentErrors[keyof DeleteAgentErrors];

export type DeleteAgentResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelUuid;
};

export type DeleteAgentResponse =
  DeleteAgentResponses[keyof DeleteAgentResponses];

export type GetAgentData = {
  body?: never;
  path: {
    /**
     * Agent Id
     */
    agent_id: string;
  };
  query?: never;
  url: "/agent/{agent_id}";
};

export type GetAgentErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetAgentError = GetAgentErrors[keyof GetAgentErrors];

export type GetAgentResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelAgentResponse;
};

export type GetAgentResponse = GetAgentResponses[keyof GetAgentResponses];

export type UpdateAgentData = {
  body: UpdateAgentHandlerParams;
  path: {
    /**
     * Agent Id
     */
    agent_id: string;
  };
  query?: never;
  url: "/agent/{agent_id}";
};

export type UpdateAgentErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type UpdateAgentError = UpdateAgentErrors[keyof UpdateAgentErrors];

export type UpdateAgentResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelAgentResponse;
};

export type UpdateAgentResponse =
  UpdateAgentResponses[keyof UpdateAgentResponses];

export type CreateAgentData = {
  body: CreateAgentHandlerParams;
  path?: never;
  query?: never;
  url: "/agent";
};

export type CreateAgentErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type CreateAgentError = CreateAgentErrors[keyof CreateAgentErrors];

export type CreateAgentResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelAgentResponse;
};

export type CreateAgentResponse =
  CreateAgentResponses[keyof CreateAgentResponses];

export type DeleteAgentTriggerData = {
  body?: never;
  path: {
    /**
     * Agent Id
     */
    agent_id: string;
    /**
     * Trigger Id
     */
    trigger_id: string;
  };
  query?: never;
  url: "/agent/{agent_id}/trigger/{trigger_id}";
};

export type DeleteAgentTriggerErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type DeleteAgentTriggerError =
  DeleteAgentTriggerErrors[keyof DeleteAgentTriggerErrors];

export type DeleteAgentTriggerResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelUuid;
};

export type DeleteAgentTriggerResponse =
  DeleteAgentTriggerResponses[keyof DeleteAgentTriggerResponses];

export type GetAgentTriggerData = {
  body?: never;
  path: {
    /**
     * Agent Id
     */
    agent_id: string;
    /**
     * Trigger Id
     */
    trigger_id: string;
  };
  query?: never;
  url: "/agent/{agent_id}/trigger/{trigger_id}";
};

export type GetAgentTriggerErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetAgentTriggerError =
  GetAgentTriggerErrors[keyof GetAgentTriggerErrors];

export type GetAgentTriggerResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelAgentTriggerResponse;
};

export type GetAgentTriggerResponse =
  GetAgentTriggerResponses[keyof GetAgentTriggerResponses];

export type UpdateAgentTriggerData = {
  body: UpdateAgentTriggerParams;
  path: {
    /**
     * Agent Id
     */
    agent_id: string;
    /**
     * Trigger Id
     */
    trigger_id: string;
  };
  query?: never;
  url: "/agent/{agent_id}/trigger/{trigger_id}";
};

export type UpdateAgentTriggerErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type UpdateAgentTriggerError =
  UpdateAgentTriggerErrors[keyof UpdateAgentTriggerErrors];

export type UpdateAgentTriggerResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelAgentTriggerResponse;
};

export type UpdateAgentTriggerResponse =
  UpdateAgentTriggerResponses[keyof UpdateAgentTriggerResponses];

export type CreateAgentTriggerData = {
  body: CreateAgentTriggerParams;
  path: {
    /**
     * Agent Id
     */
    agent_id: string;
  };
  query?: never;
  url: "/agent/{agent_id}/trigger";
};

export type CreateAgentTriggerErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type CreateAgentTriggerError =
  CreateAgentTriggerErrors[keyof CreateAgentTriggerErrors];

export type CreateAgentTriggerResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelAgentTriggerResponse;
};

export type CreateAgentTriggerResponse =
  CreateAgentTriggerResponses[keyof CreateAgentTriggerResponses];

export type DeleteAgentToolData = {
  body?: never;
  path: {
    /**
     * Agent Id
     */
    agent_id: string;
    /**
     * Tool Id
     */
    tool_id: string;
  };
  query?: never;
  url: "/agent/{agent_id}/tool/{tool_id}";
};

export type DeleteAgentToolErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type DeleteAgentToolError =
  DeleteAgentToolErrors[keyof DeleteAgentToolErrors];

export type DeleteAgentToolResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelUuid;
};

export type DeleteAgentToolResponse =
  DeleteAgentToolResponses[keyof DeleteAgentToolResponses];

export type GetAgentToolData = {
  body?: never;
  path: {
    /**
     * Agent Id
     */
    agent_id: string;
    /**
     * Tool Id
     */
    tool_id: string;
  };
  query?: never;
  url: "/agent/{agent_id}/tool/{tool_id}";
};

export type GetAgentToolErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetAgentToolError = GetAgentToolErrors[keyof GetAgentToolErrors];

export type GetAgentToolResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelAgentToolResponse;
};

export type GetAgentToolResponse =
  GetAgentToolResponses[keyof GetAgentToolResponses];

export type UpdateAgentToolData = {
  body: UpdateAgentToolParams;
  path: {
    /**
     * Agent Id
     */
    agent_id: string;
    /**
     * Tool Id
     */
    tool_id: string;
  };
  query?: never;
  url: "/agent/{agent_id}/tool/{tool_id}";
};

export type UpdateAgentToolErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type UpdateAgentToolError =
  UpdateAgentToolErrors[keyof UpdateAgentToolErrors];

export type UpdateAgentToolResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelAgentToolResponse;
};

export type UpdateAgentToolResponse =
  UpdateAgentToolResponses[keyof UpdateAgentToolResponses];

export type CreateAgentToolData = {
  body: CreateAgentToolParams;
  path: {
    /**
     * Agent Id
     */
    agent_id: string;
  };
  query?: never;
  url: "/agent/{agent_id}/tool";
};

export type CreateAgentToolErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type CreateAgentToolError =
  CreateAgentToolErrors[keyof CreateAgentToolErrors];

export type CreateAgentToolResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelAgentToolResponse;
};

export type CreateAgentToolResponse =
  CreateAgentToolResponses[keyof CreateAgentToolResponses];

export type GetAgentWalletsData = {
  body?: never;
  path: {
    /**
     * Agent Id
     */
    agent_id: string;
  };
  query?: never;
  url: "/agent/{agent_id}/wallets";
};

export type GetAgentWalletsErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetAgentWalletsError =
  GetAgentWalletsErrors[keyof GetAgentWalletsErrors];

export type GetAgentWalletsResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelListAgentWalletResponse;
};

export type GetAgentWalletsResponse =
  GetAgentWalletsResponses[keyof GetAgentWalletsResponses];

export type GetAgentWalletData = {
  body?: never;
  path: {
    /**
     * Agent Id
     */
    agent_id: string;
    /**
     * Wallet Id
     */
    wallet_id: string;
  };
  query?: never;
  url: "/agent/{agent_id}/wallet/{wallet_id}";
};

export type GetAgentWalletErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetAgentWalletError =
  GetAgentWalletErrors[keyof GetAgentWalletErrors];

export type GetAgentWalletResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelAgentWalletResponse;
};

export type GetAgentWalletResponse =
  GetAgentWalletResponses[keyof GetAgentWalletResponses];

export type GetConversationsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Agent Id
     */
    agent_id?: string | null;
  };
  url: "/conversations";
};

export type GetConversationsErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetConversationsError =
  GetConversationsErrors[keyof GetConversationsErrors];

export type GetConversationsResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelListConversationListResponse;
};

export type GetConversationsResponse =
  GetConversationsResponses[keyof GetConversationsResponses];

export type DeleteConversationData = {
  body?: never;
  path: {
    /**
     * Conversation Id
     */
    conversation_id: string;
  };
  query?: never;
  url: "/conversation/{conversation_id}";
};

export type DeleteConversationErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type DeleteConversationError =
  DeleteConversationErrors[keyof DeleteConversationErrors];

export type DeleteConversationResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelUuid;
};

export type DeleteConversationResponse =
  DeleteConversationResponses[keyof DeleteConversationResponses];

export type GetConversationData = {
  body?: never;
  path: {
    /**
     * Conversation Id
     */
    conversation_id: string;
  };
  query?: never;
  url: "/conversation/{conversation_id}";
};

export type GetConversationErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetConversationError =
  GetConversationErrors[keyof GetConversationErrors];

export type GetConversationResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelConversationResponseReadable;
};

export type GetConversationResponse =
  GetConversationResponses[keyof GetConversationResponses];

export type UpdateConversationData = {
  body: UpdateConversationHandlerParams;
  path: {
    /**
     * Conversation Id
     */
    conversation_id: string;
  };
  query?: never;
  url: "/conversation/{conversation_id}";
};

export type UpdateConversationErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type UpdateConversationError =
  UpdateConversationErrors[keyof UpdateConversationErrors];

export type UpdateConversationResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelConversationResponseReadable;
};

export type UpdateConversationResponse =
  UpdateConversationResponses[keyof UpdateConversationResponses];

export type CreateConversationData = {
  body: CreateConversationHandlerParams;
  path?: never;
  query?: never;
  url: "/conversation";
};

export type CreateConversationErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type CreateConversationError =
  CreateConversationErrors[keyof CreateConversationErrors];

export type CreateConversationResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelConversationResponseReadable;
};

export type CreateConversationResponse =
  CreateConversationResponses[keyof CreateConversationResponses];

export type CreateConversationMessageData = {
  body: CreateMessageHandlerParams;
  path: {
    /**
     * Conversation Id
     */
    conversation_id: string;
  };
  query?: never;
  url: "/conversation/{conversation_id}/message";
};

export type CreateConversationMessageErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type CreateConversationMessageError =
  CreateConversationMessageErrors[keyof CreateConversationMessageErrors];

export type CreateConversationMessageResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelConversationMessageResponseReadable;
};

export type CreateConversationMessageResponse =
  CreateConversationMessageResponses[keyof CreateConversationMessageResponses];

export type UpdateConversationMessageData = {
  body: UpdateMessageHandlerParams;
  path: {
    /**
     * Conversation Id
     */
    conversation_id: string;
    /**
     * Message Id
     */
    message_id: string;
  };
  query?: never;
  url: "/conversation/{conversation_id}/message/{message_id}";
};

export type UpdateConversationMessageErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type UpdateConversationMessageError =
  UpdateConversationMessageErrors[keyof UpdateConversationMessageErrors];

export type UpdateConversationMessageResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelConversationMessageResponseReadable;
};

export type UpdateConversationMessageResponse =
  UpdateConversationMessageResponses[keyof UpdateConversationMessageResponses];

export type GetRegistryAgentsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Search Name
     */
    search_name?: string | null;
    /**
     * Search Description
     */
    search_description?: string | null;
    /**
     * Created After
     */
    created_after?: string | null;
    /**
     * Created Before
     */
    created_before?: string | null;
    /**
     * Updated After
     */
    updated_after?: string | null;
    /**
     * Updated Before
     */
    updated_before?: string | null;
    /**
     * Sort By
     */
    sort_by?: "created_at" | "updated_at" | "name";
    /**
     * Sort Order
     */
    sort_order?: "asc" | "desc";
    /**
     * Limit
     */
    limit?: number;
    /**
     * Offset
     */
    offset?: number;
  };
  url: "/registry/agents";
};

export type GetRegistryAgentsErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetRegistryAgentsError =
  GetRegistryAgentsErrors[keyof GetRegistryAgentsErrors];

export type GetRegistryAgentsResponses = {
  /**
   * Successful Response
   */
  200: ResponseModelListRegistryAgentListResponse;
};

export type GetRegistryAgentsResponse =
  GetRegistryAgentsResponses[keyof GetRegistryAgentsResponses];

export type ClientOptions = {
  baseUrl: "http://localhost:4242" | (string & {});
};
