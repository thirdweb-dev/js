// This file is auto-generated by @hey-api/openapi-ts

import type {
  Client,
  Options as ClientOptions,
  TDataShape,
} from "@hey-api/client-fetch";
import { client as _heyApiClient } from "./client.gen.js";
import type {
  AuthDelegateLoginData,
  AuthDelegateLoginErrors,
  AuthDelegateLoginResponses,
  CreateAgentData,
  CreateAgentErrors,
  CreateAgentResponses,
  CreateAgentToolData,
  CreateAgentToolErrors,
  CreateAgentToolResponses,
  CreateAgentTriggerData,
  CreateAgentTriggerErrors,
  CreateAgentTriggerResponses,
  CreateConversationData,
  CreateConversationErrors,
  CreateConversationMessageData,
  CreateConversationMessageErrors,
  CreateConversationMessageResponses,
  CreateConversationResponses,
  CreateUserWalletData,
  CreateUserWalletErrors,
  CreateUserWalletResponses,
  DeleteAgentData,
  DeleteAgentErrors,
  DeleteAgentResponses,
  DeleteAgentToolData,
  DeleteAgentToolErrors,
  DeleteAgentToolResponses,
  DeleteAgentTriggerData,
  DeleteAgentTriggerErrors,
  DeleteAgentTriggerResponses,
  DeleteConversationData,
  DeleteConversationErrors,
  DeleteConversationResponses,
  DeleteUserWalletData,
  DeleteUserWalletErrors,
  DeleteUserWalletResponses,
  DeprecatedChatCompletionsData,
  DeprecatedChatCompletionsErrors,
  DeprecatedChatCompletionsResponses,
  DeprecatedChatData,
  DeprecatedChatErrors,
  DeprecatedChatResponses,
  DeprecatedClearSessionData,
  DeprecatedClearSessionErrors,
  DeprecatedClearSessionResponses,
  DeprecatedCreateSessionData,
  DeprecatedCreateSessionErrors,
  DeprecatedCreateSessionResponses,
  DeprecatedDeleteSessionData,
  DeprecatedDeleteSessionErrors,
  DeprecatedDeleteSessionResponses,
  DeprecatedExecuteData,
  DeprecatedExecuteErrors,
  DeprecatedExecuteResponses,
  DeprecatedGetSessionData,
  DeprecatedGetSessionErrors,
  DeprecatedGetSessionResponses,
  DeprecatedGetSessionsData,
  DeprecatedGetSessionsResponses,
  DeprecatedUpdateSessionData,
  DeprecatedUpdateSessionErrors,
  DeprecatedUpdateSessionResponses,
  FeedbackData,
  FeedbackErrors,
  FeedbackResponses,
  GetAgentData,
  GetAgentErrors,
  GetAgentResponses,
  GetAgentsData,
  GetAgentsResponses,
  GetAgentToolData,
  GetAgentToolErrors,
  GetAgentToolResponses,
  GetAgentTriggerData,
  GetAgentTriggerErrors,
  GetAgentTriggerResponses,
  GetAgentWalletData,
  GetAgentWalletErrors,
  GetAgentWalletResponses,
  GetAgentWalletsData,
  GetAgentWalletsErrors,
  GetAgentWalletsResponses,
  GetAuthDelegatePayloadData,
  GetAuthDelegatePayloadErrors,
  GetAuthDelegatePayloadResponses,
  GetConversationData,
  GetConversationErrors,
  GetConversationResponses,
  GetConversationsData,
  GetConversationsErrors,
  GetConversationsResponses,
  GetModelsData,
  GetModelsResponses,
  GetRegistryAgentsData,
  GetRegistryAgentsErrors,
  GetRegistryAgentsResponses,
  GetUserData,
  GetUserResponses,
  GetUserWalletData,
  GetUserWalletErrors,
  GetUserWalletResponses,
  GetUserWalletsData,
  GetUserWalletsResponses,
  UpdateAgentData,
  UpdateAgentErrors,
  UpdateAgentResponses,
  UpdateAgentToolData,
  UpdateAgentToolErrors,
  UpdateAgentToolResponses,
  UpdateAgentTriggerData,
  UpdateAgentTriggerErrors,
  UpdateAgentTriggerResponses,
  UpdateConversationData,
  UpdateConversationErrors,
  UpdateConversationMessageData,
  UpdateConversationMessageErrors,
  UpdateConversationMessageResponses,
  UpdateConversationResponses,
  UpdateUserWalletData,
  UpdateUserWalletErrors,
  UpdateUserWalletResponses,
  VerifyAuthData,
  VerifyAuthResponses,
} from "./types.gen.js";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Get Session List
 */
export const deprecatedGetSessions = <ThrowOnError extends boolean = false>(
  options?: Options<DeprecatedGetSessionsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    DeprecatedGetSessionsResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/session/list",
    ...options,
  });
};

/**
 * Delete Session
 */
export const deprecatedDeleteSession = <ThrowOnError extends boolean = false>(
  options: Options<DeprecatedDeleteSessionData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeprecatedDeleteSessionResponses,
    DeprecatedDeleteSessionErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/session/{session_id}",
    ...options,
  });
};

/**
 * Get Session
 */
export const deprecatedGetSession = <ThrowOnError extends boolean = false>(
  options: Options<DeprecatedGetSessionData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    DeprecatedGetSessionResponses,
    DeprecatedGetSessionErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/session/{session_id}",
    ...options,
  });
};

/**
 * Update Session
 */
export const deprecatedUpdateSession = <ThrowOnError extends boolean = false>(
  options: Options<DeprecatedUpdateSessionData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    DeprecatedUpdateSessionResponses,
    DeprecatedUpdateSessionErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/session/{session_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Create Session
 */
export const deprecatedCreateSession = <ThrowOnError extends boolean = false>(
  options: Options<DeprecatedCreateSessionData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    DeprecatedCreateSessionResponses,
    DeprecatedCreateSessionErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/session",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Clear Session
 */
export const deprecatedClearSession = <ThrowOnError extends boolean = false>(
  options: Options<DeprecatedClearSessionData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    DeprecatedClearSessionResponses,
    DeprecatedClearSessionErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/session/{session_id}/clear",
    ...options,
  });
};

/**
 * Chat
 * Process a chat message and return the response
 */
export const deprecatedChat = <ThrowOnError extends boolean = false>(
  options: Options<DeprecatedChatData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    DeprecatedChatResponses,
    DeprecatedChatErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/chat",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Chat Completions
 * Process a chat message and return the response
 */
export const deprecatedChatCompletions = <ThrowOnError extends boolean = false>(
  options: Options<DeprecatedChatCompletionsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    DeprecatedChatCompletionsResponses,
    DeprecatedChatCompletionsErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/chat/completions",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Execute
 * Process an execute request and return the response
 */
export const deprecatedExecute = <ThrowOnError extends boolean = false>(
  options: Options<DeprecatedExecuteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    DeprecatedExecuteResponses,
    DeprecatedExecuteErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/execute",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Feedback
 * Process a feedback request and return the response
 */
export const feedback = <ThrowOnError extends boolean = false>(
  options: Options<FeedbackData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    FeedbackResponses,
    FeedbackErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/feedback",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get Models
 * Get all models
 */
export const getModels = <ThrowOnError extends boolean = false>(
  options?: Options<GetModelsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetModelsResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/models",
    ...options,
  });
};

/**
 * Get Delegate Payload
 * Get a delegate payload
 */
export const getAuthDelegatePayload = <ThrowOnError extends boolean = false>(
  options: Options<GetAuthDelegatePayloadData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    GetAuthDelegatePayloadResponses,
    GetAuthDelegatePayloadErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/auth/delegate/payload",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Login Delegate
 * Login with SIWE
 */
export const authDelegateLogin = <ThrowOnError extends boolean = false>(
  options: Options<AuthDelegateLoginData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    AuthDelegateLoginResponses,
    AuthDelegateLoginErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/auth/delegate/login",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Verify Auth
 * Verify a delegate payload
 */
export const verifyAuth = <ThrowOnError extends boolean = false>(
  options?: Options<VerifyAuthData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    VerifyAuthResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/auth/verify",
    ...options,
  });
};

/**
 * Get User
 * Get the current user
 */
export const getUser = <ThrowOnError extends boolean = false>(
  options?: Options<GetUserData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetUserResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/user",
    ...options,
  });
};

/**
 * Get User Wallets
 * Get all user wallets
 */
export const getUserWallets = <ThrowOnError extends boolean = false>(
  options?: Options<GetUserWalletsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetUserWalletsResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/user/wallets",
    ...options,
  });
};

/**
 * Delete User Wallet
 * Delete a user wallet
 */
export const deleteUserWallet = <ThrowOnError extends boolean = false>(
  options: Options<DeleteUserWalletData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteUserWalletResponses,
    DeleteUserWalletErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/user/wallet/{wallet_id}",
    ...options,
  });
};

/**
 * Get User Wallet
 * Get a user wallet
 */
export const getUserWallet = <ThrowOnError extends boolean = false>(
  options: Options<GetUserWalletData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetUserWalletResponses,
    GetUserWalletErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/user/wallet/{wallet_id}",
    ...options,
  });
};

/**
 * Put User Wallet
 * Update a user wallet
 */
export const updateUserWallet = <ThrowOnError extends boolean = false>(
  options: Options<UpdateUserWalletData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateUserWalletResponses,
    UpdateUserWalletErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/user/wallet/{wallet_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Post User Wallet
 * Create a user wallet
 */
export const createUserWallet = <ThrowOnError extends boolean = false>(
  options: Options<CreateUserWalletData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateUserWalletResponses,
    CreateUserWalletErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/user/wallet",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get Agents
 * Get all agents
 */
export const getAgents = <ThrowOnError extends boolean = false>(
  options?: Options<GetAgentsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAgentsResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/agents",
    ...options,
  });
};

/**
 * Delete Agent
 * Delete an agent
 */
export const deleteAgent = <ThrowOnError extends boolean = false>(
  options: Options<DeleteAgentData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteAgentResponses,
    DeleteAgentErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/agent/{agent_id}",
    ...options,
  });
};

/**
 * Get Agent
 * Get an agent
 */
export const getAgent = <ThrowOnError extends boolean = false>(
  options: Options<GetAgentData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetAgentResponses,
    GetAgentErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/agent/{agent_id}",
    ...options,
  });
};

/**
 * Update Agent
 * Update an agent
 */
export const updateAgent = <ThrowOnError extends boolean = false>(
  options: Options<UpdateAgentData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateAgentResponses,
    UpdateAgentErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/agent/{agent_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Create Agent
 * Create an agent
 */
export const createAgent = <ThrowOnError extends boolean = false>(
  options: Options<CreateAgentData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateAgentResponses,
    CreateAgentErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/agent",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete Agent Trigger
 * Delete an agent trigger
 */
export const deleteAgentTrigger = <ThrowOnError extends boolean = false>(
  options: Options<DeleteAgentTriggerData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteAgentTriggerResponses,
    DeleteAgentTriggerErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/agent/{agent_id}/trigger/{trigger_id}",
    ...options,
  });
};

/**
 * Get Agent Trigger
 * Get an agent trigger
 */
export const getAgentTrigger = <ThrowOnError extends boolean = false>(
  options: Options<GetAgentTriggerData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetAgentTriggerResponses,
    GetAgentTriggerErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/agent/{agent_id}/trigger/{trigger_id}",
    ...options,
  });
};

/**
 * Update Agent Trigger
 * Update an agent trigger
 */
export const updateAgentTrigger = <ThrowOnError extends boolean = false>(
  options: Options<UpdateAgentTriggerData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateAgentTriggerResponses,
    UpdateAgentTriggerErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/agent/{agent_id}/trigger/{trigger_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Create Agent Trigger
 * Create an agent trigger
 */
export const createAgentTrigger = <ThrowOnError extends boolean = false>(
  options: Options<CreateAgentTriggerData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateAgentTriggerResponses,
    CreateAgentTriggerErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/agent/{agent_id}/trigger",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete Agent Tool
 * Delete an agent tool
 */
export const deleteAgentTool = <ThrowOnError extends boolean = false>(
  options: Options<DeleteAgentToolData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteAgentToolResponses,
    DeleteAgentToolErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/agent/{agent_id}/tool/{tool_id}",
    ...options,
  });
};

/**
 * Get Agent Tool
 * Get an agent tool
 */
export const getAgentTool = <ThrowOnError extends boolean = false>(
  options: Options<GetAgentToolData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetAgentToolResponses,
    GetAgentToolErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/agent/{agent_id}/tool/{tool_id}",
    ...options,
  });
};

/**
 * Update Agent Tool
 * Update an agent tool
 */
export const updateAgentTool = <ThrowOnError extends boolean = false>(
  options: Options<UpdateAgentToolData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateAgentToolResponses,
    UpdateAgentToolErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/agent/{agent_id}/tool/{tool_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Create Agent Tool
 * Create an agent tool
 */
export const createAgentTool = <ThrowOnError extends boolean = false>(
  options: Options<CreateAgentToolData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateAgentToolResponses,
    CreateAgentToolErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/agent/{agent_id}/tool",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get Agent Wallets
 * Get all agent wallets
 */
export const getAgentWallets = <ThrowOnError extends boolean = false>(
  options: Options<GetAgentWalletsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetAgentWalletsResponses,
    GetAgentWalletsErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/agent/{agent_id}/wallets",
    ...options,
  });
};

/**
 * Get Agent Wallet
 * Get an agent wallet
 */
export const getAgentWallet = <ThrowOnError extends boolean = false>(
  options: Options<GetAgentWalletData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetAgentWalletResponses,
    GetAgentWalletErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/agent/{agent_id}/wallet/{wallet_id}",
    ...options,
  });
};

/**
 * Get Conversations
 * Get all conversations
 */
export const getConversations = <ThrowOnError extends boolean = false>(
  options?: Options<GetConversationsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetConversationsResponses,
    GetConversationsErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/conversations",
    ...options,
  });
};

/**
 * Delete Conversation
 * Delete a conversation
 */
export const deleteConversation = <ThrowOnError extends boolean = false>(
  options: Options<DeleteConversationData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteConversationResponses,
    DeleteConversationErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/conversation/{conversation_id}",
    ...options,
  });
};

/**
 * Get Conversation
 * Get a conversation
 */
export const getConversation = <ThrowOnError extends boolean = false>(
  options: Options<GetConversationData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetConversationResponses,
    GetConversationErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/conversation/{conversation_id}",
    ...options,
  });
};

/**
 * Update Conversation
 * Update a conversation
 */
export const updateConversation = <ThrowOnError extends boolean = false>(
  options: Options<UpdateConversationData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateConversationResponses,
    UpdateConversationErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/conversation/{conversation_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Create Conversation
 * Create a conversation
 */
export const createConversation = <ThrowOnError extends boolean = false>(
  options: Options<CreateConversationData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateConversationResponses,
    CreateConversationErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/conversation",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Create Conversation Message
 * Create a message for a conversation
 */
export const createConversationMessage = <ThrowOnError extends boolean = false>(
  options: Options<CreateConversationMessageData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateConversationMessageResponses,
    CreateConversationMessageErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/conversation/{conversation_id}/message",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Update Conversation Message
 * Update a message for a conversation
 */
export const updateConversationMessage = <ThrowOnError extends boolean = false>(
  options: Options<UpdateConversationMessageData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateConversationMessageResponses,
    UpdateConversationMessageErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/conversation/{conversation_id}/message/{message_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get Registry Agents
 * Get all agents from the registry
 */
export const getRegistryAgents = <ThrowOnError extends boolean = false>(
  options?: Options<GetRegistryAgentsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetRegistryAgentsResponses,
    GetRegistryAgentsErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/registry/agents",
    ...options,
  });
};
