{
  "useContract": {
    "name": "useContract",
    "summary": "Use this resolve a contract address to a smart contract instance.\n\n",
    "examples": {
      "javascript": "const { contract, isLoading, error } = useContract(\"{{contract_address}}\");"
    },
    "subhooks": [
      {
        "name": "useAddress",
        "example": "import { useAddress } from \"@thirdweb-dev/react\"\n\nconst App = () => {\n  const address = useAddress()\n\n  return <div>{address}</div>\n}",
        "reference": "https://portal.thirdweb.com/react/react.useaddress"
      },
      {
        "name": "useAllRoleMembers",
        "example": "const { data: roles, isLoading, error } = useAllRoleMembers(SmartContract);",
        "reference": "https://portal.thirdweb.com/react/react.useallrolemembers"
      },
      {
        "name": "useChainId",
        "example": "import { useChainId } from \"@thirdweb-dev/react\"\n\nconst App = () => {\n  const chainId = useChainId()\n\n  return <div>{chainId}</div>\n}",
        "reference": "https://portal.thirdweb.com/react/react.usechainid"
      },
      {
        "name": "useCoinbaseWallet",
        "example": "import { useCoinbaseWallet } from \"@thirdweb-dev/react\"\n\nconst App = () => {\n  const connectWithCoinbaseWallet = useCoinbaseWallet()\n\n  return (\n    <button onClick={connectWithCoinbaseWallet}>\n      Connect Coinbase Wallet\n    </button>\n  )\n}",
        "reference": "https://portal.thirdweb.com/react/react.usecoinbasewallet"
      },
      {
        "name": "useContract",
        "example": "const { contract, isLoading, error } = useContract(\"{{contract_address}}\");",
        "reference": "https://portal.thirdweb.com/react/react.usecontract"
      },
      {
        "name": "useContractEvents",
        "example": "",
        "reference": "https://portal.thirdweb.com/react/react.usecontractevents"
      },
      {
        "name": "useContractMetadata",
        "example": "const { data: contractMetadata, isLoading, error } = useContractMetadata(>);",
        "reference": "https://portal.thirdweb.com/react/react.usecontractmetadata"
      },
      {
        "name": "useContractRead",
        "example": "const { contract } = useContract(\"{{contract_address}}\");\nconst { data, isLoading, error } = useContractRead(contract, \"functionName\", ...args);",
        "reference": "https://portal.thirdweb.com/react/react.usecontractread"
      },
      {
        "name": "useContractType",
        "example": "",
        "reference": "https://portal.thirdweb.com/react/react.usecontracttype"
      },
      {
        "name": "useContractWrite",
        "example": "const { contract } = useContract(\"{{contract_address}}\");\nconst { mutate: myFunction, isLoading, error } = useContractWrite(contract, \"myFunction\");\n\n// the function can be called as follows:\n// myFunction([\"param 1\", \"param 2\", ...])",
        "reference": "https://portal.thirdweb.com/react/react.usecontractwrite"
      },
      {
        "name": "useDisconnect",
        "example": "import { useDisconnect } from \"@thirdweb-dev/react\"\n\nconst App = () => {\n  const disconnect = useDisconnect()\n\n  return (\n    <button onClick={disconnect}>\n      Disconnect\n    </button>\n  )\n}",
        "reference": "https://portal.thirdweb.com/react/react.usedisconnect"
      },
      {
        "name": "useGnosis",
        "example": "import { useGnosis } from \"@thirdweb-dev/react\"\n\nconst App = () => {\n  const connectWithGnosis = useGnosis()\n\n  return (\n    <button onClick={() => connectWithGnosis({ safeAddress: \"0x...\", safeChainId: 1 })}>\n      Connect Gnosis Safe\n    </button>\n  )\n}",
        "reference": "https://portal.thirdweb.com/react/react.usegnosis"
      },
      {
        "name": "useGrantRole",
        "example": "const Component = () => {\n  const {\n    mutate: grantRole,\n    isLoading,\n    error,\n  } = useGrantRole(SmartContract);\n\n  if (error) {\n    console.error(\"failed to grant role\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => grantRole({  role: \"admin\", address: \"0x123\" })}\n    >\n      Grant Role\n    </button>\n  );\n};",
        "reference": "https://portal.thirdweb.com/react/react.usegrantrole"
      },
      {
        "name": "useIsAddressRole",
        "example": "const { data: isMember, isLoading, error } = useIsAddressRole(SmartContract, \"admin\", \"0x123\");",
        "reference": "https://portal.thirdweb.com/react/react.useisaddressrole"
      },
      {
        "name": "useMagic",
        "example": "import { useMagic } from \"@thirdweb-dev/react\"\nimport { useState } from \"react\"\n\nconst LoginWithMagicLink = () => {\n  const connectWithMagic = useMagic()\n  const [email, setEmail] = useState()\n\n  return (\n    <div>\n      <input value={email} onChange={(e) => setEmail(e.target.value)} />\n      <button onClick={() => connectWithMagic({ email })}>Login</button>\n    </div>\n  )\n}",
        "reference": "https://portal.thirdweb.com/react/react.usemagic"
      },
      {
        "name": "useMetadata",
        "example": "const { data: metadata, isLoading, error } = useMetadata(SmartContract);",
        "reference": "https://portal.thirdweb.com/react/react.usemetadata"
      },
      {
        "name": "useMetamask",
        "example": "import { useMetamask } from \"@thirdweb-dev/react\"\n\nconst App = () => {\n  const connectWithMetamask = useMetamask()\n\n  return (\n    <button onClick={connectWithMetamask}>\n      Connect Metamask\n    </button>\n  )\n}",
        "reference": "https://portal.thirdweb.com/react/react.usemetamask"
      },
      {
        "name": "useNetwork",
        "example": "import { useNetwork, ChainId } from \"@thirdweb-dev/react\";\n\nconst App = () => {\n  const [, switchNetwork] = useNetwork();\n\n  return (\n    <button onClick={() => switchNetwork(ChainId.Polygon)}>\n       Switch Network\n    </button>\n  );\n};",
        "reference": "https://portal.thirdweb.com/react/react.usenetwork"
      },
      {
        "name": "useNetworkMismatch",
        "example": "import { useNetworkMismatch } from \"@thirdweb-dev/react\"\n\nconst App = () => {\n  const isMismatched = useNetworkMismatch()\n\n  return <div>{isMismatched}</div>\n}",
        "reference": "https://portal.thirdweb.com/react/react.usenetworkmismatch"
      },
      {
        "name": "usePlatformFees",
        "example": "const { data: platformFees, isLoading, error } = usePlatformFees(SmartContract);",
        "reference": "https://portal.thirdweb.com/react/react.useplatformfees"
      },
      {
        "name": "useRevokeRole",
        "example": "const Component = () => {\n  const {\n    mutate: revokeRole,\n    isLoading,\n    error,\n  } = useRevokeRole(SmartContract);\n\n  if (error) {\n    console.error(\"failed to revoke role\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => revokeRole({  role: \"admin\", address: \"0x123\" })}\n    >\n      Revoke Role\n    </button>\n  );\n};",
        "reference": "https://portal.thirdweb.com/react/react.userevokerole"
      },
      {
        "name": "useRoleMembers",
        "example": "const { data: members, isLoading, error } = useRoleMembers(SmartContract, \"admin\");",
        "reference": "https://portal.thirdweb.com/react/react.userolemembers"
      },
      {
        "name": "useRoyaltySettings",
        "example": "const { data: settings, isLoading, error } = useRoyaltySettings(SmartContract);",
        "reference": "https://portal.thirdweb.com/react/react.useroyaltysettings"
      },
      {
        "name": "useSetAllRoleMembers",
        "example": "const Component = () => {\n  const {\n    mutate: overwriteRoles,\n    isLoading,\n    error,\n  } = useSetAllRoleMembers(SmartContract);\n\n  if (error) {\n    console.error(\"failed to overwrite roles\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => overwriteRoles({  rolesWithAddresses: { minter: [] } })}\n    >\n      Overwrite Roles\n    </button>\n  );\n};",
        "reference": "https://portal.thirdweb.com/react/react.usesetallrolemembers"
      },
      {
        "name": "useUpdateMetadata",
        "example": "const Component = () => {\n  const {\n    mutate: updateMetadata,\n    isLoading,\n    error,\n  } = useUpdateMetadata(SmartContract);\n\n  if (error) {\n    console.error(\"failed to update metadata\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => updateMetadata({ updatePayload: { name: \"My Contract\", description: \"This is my contract\" } })}\n    >\n      Update Metadata\n    </button>\n  );\n};",
        "reference": "https://portal.thirdweb.com/react/react.useupdatemetadata"
      },
      {
        "name": "useUpdatePlatformFees",
        "example": "const Component = () => {\n  const {\n    mutate: updatePlatformFees,\n    isLoading,\n    error,\n  } = useUpdatePlatformFees(SmartContract);\n\n  if (error) {\n    console.error(\"failed to update platform fees\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => updatePlatformFees({ updatePayload: { fee_recipient: \"0x123\", platform_fee_basis_points: 5_00 } })}\n    >\n      Update Platform fees\n    </button>\n  );\n};",
        "reference": "https://portal.thirdweb.com/react/react.useupdateplatformfees"
      },
      {
        "name": "useUpdatePrimarySaleRecipient",
        "example": "const Component = () => {\n  const {\n    mutate: updatePrimarySalesRecipient,\n    isLoading,\n    error,\n  } = useUpdatePrimarySaleRecipient(SmartContract);\n\n  if (error) {\n    console.error(\"failed to update recipient\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => updatePrimarySalesRecipient({ newRecipient: \"0x123\" })}\n    >\n      Update Recipient\n    </button>\n  );\n};",
        "reference": "https://portal.thirdweb.com/react/react.useupdateprimarysalerecipient"
      },
      {
        "name": "useUpdateRoyaltySettings",
        "example": "const Component = () => {\n  const {\n    mutate: updateRoyaltySettings,\n    isLoading,\n    error,\n  } = useUpdateRoyaltySettings(SmartContract);\n\n  if (error) {\n    console.error(\"failed to update royalty settings\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => updateRoyaltySettings({ updatePayload: { fee_recipient: \"0x123\", seller_fee_basis_points: 5_00 } })}\n    >\n      Update Royalty Settings\n    </button>\n  );\n};",
        "reference": "https://portal.thirdweb.com/react/react.useupdateroyaltysettings"
      },
      {
        "name": "useWalletConnect",
        "example": "import { useWalletConnect } from \"@thirdweb-dev/react\"\n\nconst App = () => {\n  const connectWithWalletConnect = useWalletConnect()\n\n  return (\n    <button onClick={connectWithWalletConnect}>\n      Connect WalletConnect\n    </button>\n  )\n}",
        "reference": "https://portal.thirdweb.com/react/react.usewalletconnect"
      }
    ],
    "reference": "https://docs.thirdweb.com/typescript/react.useContract"
  },
  "useEdition": {
    "name": "useEdition",
    "summary": "Hook for getting an instance of an `Edition` contract. This contract is used to interface with ERC1155 compliant NFTs.\n\n",
    "examples": {
      "javascript": "import { useEdition } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const edition = useEdition(\"<YOUR-CONTRACT-ADDRESS>\")\n\n  // Now you can use the edition contract in the rest of the component\n}"
    },
    "subhooks": [
      {
        "name": "useMintNFT",
        "example": "const Component = () => {\n  const { contract } = useContract(<ContractAddress>);\n  const {\n    mutate: mintNft,\n    isLoading,\n    error,\n  } = useMintNFT(contract);\n\n  if (error) {\n    console.error(\"failed to mint nft\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => mintNft({ name: \"My awesome NFT!\", to: \"0x...\" })}\n    >\n      Mint!\n    </button>\n  );\n};",
        "reference": "https://portal.thirdweb.com/react/react.usemintnft"
      },
      {
        "name": "useNFT",
        "example": "const { contract } = useContract(<ContractAddress>);\nconst { data: nft, isLoading, error } = useNFT(contract, <tokenId>);",
        "reference": "https://portal.thirdweb.com/react/react.usenft"
      },
      {
        "name": "useNFTBalance",
        "example": "const { contract } = useContract(<ContractAddress>);\nconst { data: ownerBalance, isLoading, error } = useNFTBalance(contract, <OwnerWalletAddress>);",
        "reference": "https://portal.thirdweb.com/react/react.usenftbalance"
      },
      {
        "name": "useNFTs",
        "example": "const { contract } = useContract(<ContractAddress>);\nconst { data: nfts, isLoading, error } = useNFTs(contract, { start: 0, count: 100 });",
        "reference": "https://portal.thirdweb.com/react/react.usenfts"
      },
      {
        "name": "useOwnedNFTs",
        "example": "const { contract } = useContract(<ContractAddress>);\nconst { data: ownedNFTs, isLoading, error } = useOwnedNFTs(contract, <OwnerWalletAddress>);",
        "reference": "https://portal.thirdweb.com/react/react.useownednfts"
      },
      {
        "name": "useTotalCirculatingSupply",
        "example": "const { contract } = useContract(<ContractAddress>);\nconst { data: totalCirculatingSupply, isLoading, error } = useTotalCirculatingSupply(contract);",
        "reference": "https://portal.thirdweb.com/react/react.usetotalcirculatingsupply"
      }
    ],
    "reference": "https://docs.thirdweb.com/typescript/react.useEdition"
  },
  "useEditionDrop": {
    "name": "useEditionDrop",
    "summary": "Hook for getting an instance of an `EditionDrop` contract. This conract is used to interface with ERC1155 compliant NFTs that can be lazily minted.\n\n",
    "examples": {
      "javascript": "import { useEditionDrop } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const editionDrop = useEditionDrop(\"<YOUR-CONTRACT-ADDRESS>\")\n\n  // Now you can use the edition drop contract in the rest of the component\n}"
    },
    "subhooks": [
      {
        "name": "useActiveClaimCondition",
        "example": "const { data: activeClaimCondition, isLoading, error } = useActiveClaimCondition(<YourERC1155ContractInstance>, <tokenId>);",
        "reference": "https://portal.thirdweb.com/react/react.useactiveclaimcondition"
      },
      {
        "name": "useClaimConditions",
        "example": "const { data: claimConditions, isLoading, error } = useClaimConditions(<YourERC1155ContractInstance>, <tokenId>);",
        "reference": "https://portal.thirdweb.com/react/react.useclaimconditions"
      },
      {
        "name": "useClaimedNFTs",
        "example": "const { data: claimedNFTs, isLoading, error } = useClaimedNFTs(<YourERC721DropContractInstance>, { start: 0, count: 100 });",
        "reference": "https://portal.thirdweb.com/react/react.useclaimednfts"
      },
      {
        "name": "useClaimedNFTSupply",
        "example": "",
        "reference": "https://portal.thirdweb.com/react/react.useclaimednftsupply"
      },
      {
        "name": "useClaimIneligibilityReasons",
        "example": "const { data: claimIneligibilityReasons, isLoading, error } = useClaimIneligibilityReasons(<YourERC1155ContractInstance>, { quantity: <quantity>, walletAddress: <walletAddress> }, <tokenId>);",
        "reference": "https://portal.thirdweb.com/react/react.useclaimineligibilityreasons"
      },
      {
        "name": "useClaimNFT",
        "example": "const Component = () => {\n  const { contract } = useContract(<ContractAddress>);\n  const {\n    mutate: claimNft,\n    isLoading,\n    error,\n  } = useClaimNFT(contract);\n\n  if (error) {\n    console.error(\"failed to claim nft\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => claimNft({ to: \"0x...\", quantity: 1 })}\n    >\n      Claim NFT!\n    </button>\n  );\n};",
        "reference": "https://portal.thirdweb.com/react/react.useclaimnft"
      },
      {
        "name": "useClaimToken",
        "example": "const Component = () => {\n  const {\n    mutate: claimTokens,\n    isLoading,\n    error,\n  } = useClaimToken(TokenDropContract);\n\n  if (error) {\n    console.error(\"failed to claim tokens\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => claimTokens({ to: \"0x...\", amount: 100 })}\n    >\n      Claim Tokens!\n    </button>\n  );\n};",
        "reference": "https://portal.thirdweb.com/react/react.useclaimtoken"
      },
      {
        "name": "useMintNFT",
        "example": "const Component = () => {\n  const { contract } = useContract(<ContractAddress>);\n  const {\n    mutate: mintNft,\n    isLoading,\n    error,\n  } = useMintNFT(contract);\n\n  if (error) {\n    console.error(\"failed to mint nft\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => mintNft({ name: \"My awesome NFT!\", to: \"0x...\" })}\n    >\n      Mint!\n    </button>\n  );\n};",
        "reference": "https://portal.thirdweb.com/react/react.usemintnft"
      },
      {
        "name": "useNFT",
        "example": "const { contract } = useContract(<ContractAddress>);\nconst { data: nft, isLoading, error } = useNFT(contract, <tokenId>);",
        "reference": "https://portal.thirdweb.com/react/react.usenft"
      },
      {
        "name": "useNFTBalance",
        "example": "const { contract } = useContract(<ContractAddress>);\nconst { data: ownerBalance, isLoading, error } = useNFTBalance(contract, <OwnerWalletAddress>);",
        "reference": "https://portal.thirdweb.com/react/react.usenftbalance"
      },
      {
        "name": "useNFTs",
        "example": "const { contract } = useContract(<ContractAddress>);\nconst { data: nfts, isLoading, error } = useNFTs(contract, { start: 0, count: 100 });",
        "reference": "https://portal.thirdweb.com/react/react.usenfts"
      },
      {
        "name": "useOwnedNFTs",
        "example": "const { contract } = useContract(<ContractAddress>);\nconst { data: ownedNFTs, isLoading, error } = useOwnedNFTs(contract, <OwnerWalletAddress>);",
        "reference": "https://portal.thirdweb.com/react/react.useownednfts"
      },
      {
        "name": "useTotalCirculatingSupply",
        "example": "const { contract } = useContract(<ContractAddress>);\nconst { data: totalCirculatingSupply, isLoading, error } = useTotalCirculatingSupply(contract);",
        "reference": "https://portal.thirdweb.com/react/react.usetotalcirculatingsupply"
      },
      {
        "name": "useUnclaimedNFTs",
        "example": "const { data: unclaimedNfts, isLoading, error } = useUnclaimedNFTs(<YourERC721DropContractInstance>, { start: 0, count: 100 });",
        "reference": "https://portal.thirdweb.com/react/react.useunclaimednfts"
      },
      {
        "name": "useUnclaimedNFTSupply",
        "example": "",
        "reference": "https://portal.thirdweb.com/react/react.useunclaimednftsupply"
      }
    ],
    "reference": "https://docs.thirdweb.com/typescript/react.useEditionDrop"
  },
  "useMarketplace": {
    "name": "useMarketplace",
    "summary": "Hook for getting an instance of a `Marketplace` contract. This contract is used to support marketplace for purchase and sale of on-chain assets.\n\n",
    "examples": {
      "javascript": "import { useMarketplace } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const marketplace = useMarketplace(\"<YOUR-CONTRACT-ADDRESS>\")\n\n  // Now you can use the marketplace contract in the rest of the component\n}"
    },
    "subhooks": [
      {
        "name": "useActiveListings",
        "example": "const { data: listings, isLoading, error } = useActiveListings(<YourMarketplaceContractInstance>, { seller: \"0x...\", tokenContract: \"0x...\", tokenId: 1, start: 0, count: 100 });",
        "reference": "https://portal.thirdweb.com/react/react.useactivelistings"
      },
      {
        "name": "useAuctionWinner",
        "example": "const { data: auctionWinner, isLoading, error } = useAuctionWinner(<YourMarketplaceContractInstance>, <listingId>);",
        "reference": "https://portal.thirdweb.com/react/react.useauctionwinner"
      },
      {
        "name": "useBidBuffer",
        "example": "const { data: auctionWinner, isLoading, error } = useBidBuffer(<YourMarketplaceContractInstance>);",
        "reference": "https://portal.thirdweb.com/react/react.usebidbuffer"
      },
      {
        "name": "useBuyNow",
        "example": "const Component = () => {\n  const {\n    mutate: buyNow,\n    isLoading,\n    error,\n  } = useBuyNow(\">>YourMarketplaceContractInstance<<\");\n\n  if (error) {\n    console.error(\"failed to buyout listing\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => buyNow({listingId: 1, type: ListingType.Auction})}\n    >\n      Buy listing!\n    </button>\n  );\n};",
        "reference": "https://portal.thirdweb.com/react/react.usebuynow"
      },
      {
        "name": "useCreateAuctionListing",
        "example": "const Component = () => {\n  const {\n    mutate: createAuctionListing,\n    isLoading,\n    error,\n  } = useCreateAuctionListing(\">>YourMarketplaceContractInstance<<\");\n\n  if (error) {\n    console.error(\"failed to create auction listing\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => createAuctionListing(auctionListingData)}\n    >\n      Create Auction Listing!\n    </button>\n  );\n};",
        "reference": "https://portal.thirdweb.com/react/react.usecreateauctionlisting"
      },
      {
        "name": "useCreateDirectListing",
        "example": "const Component = () => {\n  const {\n    mutate: createDirectListing,\n    isLoading,\n    error,\n  } = useCreateDirectListing(\">>YourMarketplaceContractInstance<<\");\n\n  if (error) {\n    console.error(\"failed to create direct listing\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => createDirectListing(directListingData)}\n    >\n      Create Direct Listing!\n    </button>\n  );\n};",
        "reference": "https://portal.thirdweb.com/react/react.usecreatedirectlisting"
      },
      {
        "name": "useListing",
        "example": "const { data: listing, isLoading, error } = useListing(<YourMarketplaceContractInstance>, <listingId>);",
        "reference": "https://portal.thirdweb.com/react/react.uselisting"
      },
      {
        "name": "useListings",
        "example": "const { data: listings, isLoading, error } = useListings(<YourMarketplaceContractInstance>, { start: 0, count: 100 });",
        "reference": "https://portal.thirdweb.com/react/react.uselistings"
      },
      {
        "name": "useMakeBid",
        "example": "const Component = () => {\n  const {\n    mutate: makeBid,\n    isLoading,\n    error,\n  } = useMakeBid(\">>YourMarketplaceContractInstance<<\");\n\n  if (error) {\n    console.error(\"failed to make a bid\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => makeBid({ listingId: 1, bid: 2 })}\n    >\n      Bid!\n    </button>\n  );\n};",
        "reference": "https://portal.thirdweb.com/react/react.usemakebid"
      },
      {
        "name": "useWinningBid",
        "example": "const { data: winningBid, isLoading, error } = useWinningBid(<YourMarketplaceContractInstance>, <listingId>);",
        "reference": "https://portal.thirdweb.com/react/react.usewinningbid"
      }
    ],
    "reference": "https://docs.thirdweb.com/typescript/react.useMarketplace"
  },
  "useMultiwrap": {
    "name": "useMultiwrap",
    "summary": "Hook for getting an instance of an `Multiwrap` contract. This contract is an ERC721 in which you can wrap ERC721, ERC1155 and ERC20 tokens.\n\n",
    "examples": {
      "javascript": "import { useMultiwrap } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const multiwrap = useMultiwrap(\"<YOUR-CONTRACT-ADDRESS>\")\n\n  // Now you can use the multiwrap contract in the rest of the component\n}"
    },
    "subhooks": [
      {
        "name": "useMintNFT",
        "example": "const Component = () => {\n  const { contract } = useContract(<ContractAddress>);\n  const {\n    mutate: mintNft,\n    isLoading,\n    error,\n  } = useMintNFT(contract);\n\n  if (error) {\n    console.error(\"failed to mint nft\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => mintNft({ name: \"My awesome NFT!\", to: \"0x...\" })}\n    >\n      Mint!\n    </button>\n  );\n};",
        "reference": "https://portal.thirdweb.com/react/react.usemintnft"
      },
      {
        "name": "useNFT",
        "example": "const { contract } = useContract(<ContractAddress>);\nconst { data: nft, isLoading, error } = useNFT(contract, <tokenId>);",
        "reference": "https://portal.thirdweb.com/react/react.usenft"
      },
      {
        "name": "useNFTBalance",
        "example": "const { contract } = useContract(<ContractAddress>);\nconst { data: ownerBalance, isLoading, error } = useNFTBalance(contract, <OwnerWalletAddress>);",
        "reference": "https://portal.thirdweb.com/react/react.usenftbalance"
      },
      {
        "name": "useNFTs",
        "example": "const { contract } = useContract(<ContractAddress>);\nconst { data: nfts, isLoading, error } = useNFTs(contract, { start: 0, count: 100 });",
        "reference": "https://portal.thirdweb.com/react/react.usenfts"
      },
      {
        "name": "useOwnedNFTs",
        "example": "const { contract } = useContract(<ContractAddress>);\nconst { data: ownedNFTs, isLoading, error } = useOwnedNFTs(contract, <OwnerWalletAddress>);",
        "reference": "https://portal.thirdweb.com/react/react.useownednfts"
      },
      {
        "name": "useTotalCirculatingSupply",
        "example": "const { contract } = useContract(<ContractAddress>);\nconst { data: totalCirculatingSupply, isLoading, error } = useTotalCirculatingSupply(contract);",
        "reference": "https://portal.thirdweb.com/react/react.usetotalcirculatingsupply"
      }
    ],
    "reference": "https://docs.thirdweb.com/typescript/react.useMultiwrap"
  },
  "useNFTCollection": {
    "name": "useNFTCollection",
    "summary": "Hook for getting an instance of an `NFTCollection` contract. This contract is meant to interface with ERC721 compliant NFTs.\n\n",
    "examples": {
      "javascript": "import { useNFTCollection } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const nftCollection = useNFTCollection(\"<YOUR-CONTRACT-ADDRESS>\")\n\n  // Now you can use the nftCollection contract in the rest of the component\n}"
    },
    "subhooks": [
      {
        "name": "useMintNFT",
        "example": "const Component = () => {\n  const { contract } = useContract(<ContractAddress>);\n  const {\n    mutate: mintNft,\n    isLoading,\n    error,\n  } = useMintNFT(contract);\n\n  if (error) {\n    console.error(\"failed to mint nft\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => mintNft({ name: \"My awesome NFT!\", to: \"0x...\" })}\n    >\n      Mint!\n    </button>\n  );\n};",
        "reference": "https://portal.thirdweb.com/react/react.usemintnft"
      },
      {
        "name": "useNFT",
        "example": "const { contract } = useContract(<ContractAddress>);\nconst { data: nft, isLoading, error } = useNFT(contract, <tokenId>);",
        "reference": "https://portal.thirdweb.com/react/react.usenft"
      },
      {
        "name": "useNFTBalance",
        "example": "const { contract } = useContract(<ContractAddress>);\nconst { data: ownerBalance, isLoading, error } = useNFTBalance(contract, <OwnerWalletAddress>);",
        "reference": "https://portal.thirdweb.com/react/react.usenftbalance"
      },
      {
        "name": "useNFTs",
        "example": "const { contract } = useContract(<ContractAddress>);\nconst { data: nfts, isLoading, error } = useNFTs(contract, { start: 0, count: 100 });",
        "reference": "https://portal.thirdweb.com/react/react.usenfts"
      },
      {
        "name": "useOwnedNFTs",
        "example": "const { contract } = useContract(<ContractAddress>);\nconst { data: ownedNFTs, isLoading, error } = useOwnedNFTs(contract, <OwnerWalletAddress>);",
        "reference": "https://portal.thirdweb.com/react/react.useownednfts"
      },
      {
        "name": "useTotalCirculatingSupply",
        "example": "const { contract } = useContract(<ContractAddress>);\nconst { data: totalCirculatingSupply, isLoading, error } = useTotalCirculatingSupply(contract);",
        "reference": "https://portal.thirdweb.com/react/react.usetotalcirculatingsupply"
      }
    ],
    "reference": "https://docs.thirdweb.com/typescript/react.useNFTCollection"
  },
  "useNFTDrop": {
    "name": "useNFTDrop",
    "summary": "Hook for getting an instance of an `NFTDrop` contract. This contract is meant to interface with ERC721 compliant NFTs that can be lazily minted.\n\n",
    "examples": {
      "javascript": "import { useNFTDrop } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const nftDrop = useNFTDrop(\"<YOUR-CONTRACT-ADDRESS>\")\n\n  // Now you can use the nft drop contract in the rest of the component\n}"
    },
    "subhooks": [
      {
        "name": "useActiveClaimCondition",
        "example": "const { data: activeClaimCondition, isLoading, error } = useActiveClaimCondition(<YourERC1155ContractInstance>, <tokenId>);",
        "reference": "https://portal.thirdweb.com/react/react.useactiveclaimcondition"
      },
      {
        "name": "useClaimConditions",
        "example": "const { data: claimConditions, isLoading, error } = useClaimConditions(<YourERC1155ContractInstance>, <tokenId>);",
        "reference": "https://portal.thirdweb.com/react/react.useclaimconditions"
      },
      {
        "name": "useClaimedNFTs",
        "example": "const { data: claimedNFTs, isLoading, error } = useClaimedNFTs(<YourERC721DropContractInstance>, { start: 0, count: 100 });",
        "reference": "https://portal.thirdweb.com/react/react.useclaimednfts"
      },
      {
        "name": "useClaimedNFTSupply",
        "example": "",
        "reference": "https://portal.thirdweb.com/react/react.useclaimednftsupply"
      },
      {
        "name": "useClaimIneligibilityReasons",
        "example": "const { data: claimIneligibilityReasons, isLoading, error } = useClaimIneligibilityReasons(<YourERC1155ContractInstance>, { quantity: <quantity>, walletAddress: <walletAddress> }, <tokenId>);",
        "reference": "https://portal.thirdweb.com/react/react.useclaimineligibilityreasons"
      },
      {
        "name": "useClaimNFT",
        "example": "const Component = () => {\n  const { contract } = useContract(<ContractAddress>);\n  const {\n    mutate: claimNft,\n    isLoading,\n    error,\n  } = useClaimNFT(contract);\n\n  if (error) {\n    console.error(\"failed to claim nft\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => claimNft({ to: \"0x...\", quantity: 1 })}\n    >\n      Claim NFT!\n    </button>\n  );\n};",
        "reference": "https://portal.thirdweb.com/react/react.useclaimnft"
      },
      {
        "name": "useClaimToken",
        "example": "const Component = () => {\n  const {\n    mutate: claimTokens,\n    isLoading,\n    error,\n  } = useClaimToken(TokenDropContract);\n\n  if (error) {\n    console.error(\"failed to claim tokens\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => claimTokens({ to: \"0x...\", amount: 100 })}\n    >\n      Claim Tokens!\n    </button>\n  );\n};",
        "reference": "https://portal.thirdweb.com/react/react.useclaimtoken"
      },
      {
        "name": "useMintNFT",
        "example": "const Component = () => {\n  const { contract } = useContract(<ContractAddress>);\n  const {\n    mutate: mintNft,\n    isLoading,\n    error,\n  } = useMintNFT(contract);\n\n  if (error) {\n    console.error(\"failed to mint nft\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => mintNft({ name: \"My awesome NFT!\", to: \"0x...\" })}\n    >\n      Mint!\n    </button>\n  );\n};",
        "reference": "https://portal.thirdweb.com/react/react.usemintnft"
      },
      {
        "name": "useNFT",
        "example": "const { contract } = useContract(<ContractAddress>);\nconst { data: nft, isLoading, error } = useNFT(contract, <tokenId>);",
        "reference": "https://portal.thirdweb.com/react/react.usenft"
      },
      {
        "name": "useNFTBalance",
        "example": "const { contract } = useContract(<ContractAddress>);\nconst { data: ownerBalance, isLoading, error } = useNFTBalance(contract, <OwnerWalletAddress>);",
        "reference": "https://portal.thirdweb.com/react/react.usenftbalance"
      },
      {
        "name": "useNFTs",
        "example": "const { contract } = useContract(<ContractAddress>);\nconst { data: nfts, isLoading, error } = useNFTs(contract, { start: 0, count: 100 });",
        "reference": "https://portal.thirdweb.com/react/react.usenfts"
      },
      {
        "name": "useOwnedNFTs",
        "example": "const { contract } = useContract(<ContractAddress>);\nconst { data: ownedNFTs, isLoading, error } = useOwnedNFTs(contract, <OwnerWalletAddress>);",
        "reference": "https://portal.thirdweb.com/react/react.useownednfts"
      },
      {
        "name": "useTotalCirculatingSupply",
        "example": "const { contract } = useContract(<ContractAddress>);\nconst { data: totalCirculatingSupply, isLoading, error } = useTotalCirculatingSupply(contract);",
        "reference": "https://portal.thirdweb.com/react/react.usetotalcirculatingsupply"
      },
      {
        "name": "useUnclaimedNFTs",
        "example": "const { data: unclaimedNfts, isLoading, error } = useUnclaimedNFTs(<YourERC721DropContractInstance>, { start: 0, count: 100 });",
        "reference": "https://portal.thirdweb.com/react/react.useunclaimednfts"
      },
      {
        "name": "useUnclaimedNFTSupply",
        "example": "",
        "reference": "https://portal.thirdweb.com/react/react.useunclaimednftsupply"
      }
    ],
    "reference": "https://docs.thirdweb.com/typescript/react.useNFTDrop"
  },
  "usePack": {
    "name": "usePack",
    "summary": "Hook for getting an instance of a `Pack` contract. This contract supports the creation of on-chain luck-based lootboxes.\n\n",
    "examples": {
      "javascript": "import { usePack } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const pack = usePack(\"<YOUR-CONTRACT-ADDRESS>\")\n\n  // Now you can use the pack contract in the rest of the component\n}"
    },
    "subhooks": [
      {
        "name": "useMintNFT",
        "example": "const Component = () => {\n  const { contract } = useContract(<ContractAddress>);\n  const {\n    mutate: mintNft,\n    isLoading,\n    error,\n  } = useMintNFT(contract);\n\n  if (error) {\n    console.error(\"failed to mint nft\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => mintNft({ name: \"My awesome NFT!\", to: \"0x...\" })}\n    >\n      Mint!\n    </button>\n  );\n};",
        "reference": "https://portal.thirdweb.com/react/react.usemintnft"
      },
      {
        "name": "useNFT",
        "example": "const { contract } = useContract(<ContractAddress>);\nconst { data: nft, isLoading, error } = useNFT(contract, <tokenId>);",
        "reference": "https://portal.thirdweb.com/react/react.usenft"
      },
      {
        "name": "useNFTBalance",
        "example": "const { contract } = useContract(<ContractAddress>);\nconst { data: ownerBalance, isLoading, error } = useNFTBalance(contract, <OwnerWalletAddress>);",
        "reference": "https://portal.thirdweb.com/react/react.usenftbalance"
      },
      {
        "name": "useNFTs",
        "example": "const { contract } = useContract(<ContractAddress>);\nconst { data: nfts, isLoading, error } = useNFTs(contract, { start: 0, count: 100 });",
        "reference": "https://portal.thirdweb.com/react/react.usenfts"
      },
      {
        "name": "useOwnedNFTs",
        "example": "const { contract } = useContract(<ContractAddress>);\nconst { data: ownedNFTs, isLoading, error } = useOwnedNFTs(contract, <OwnerWalletAddress>);",
        "reference": "https://portal.thirdweb.com/react/react.useownednfts"
      },
      {
        "name": "useTotalCirculatingSupply",
        "example": "const { contract } = useContract(<ContractAddress>);\nconst { data: totalCirculatingSupply, isLoading, error } = useTotalCirculatingSupply(contract);",
        "reference": "https://portal.thirdweb.com/react/react.usetotalcirculatingsupply"
      }
    ],
    "reference": "https://docs.thirdweb.com/typescript/react.usePack"
  },
  "useSignatureDrop": {
    "name": "useSignatureDrop",
    "summary": "Hook for getting an instance of an `SignatureDrop` contract. This contract is meant to interface with ERC721 compliant NFTs that can be lazily minted.\n\n",
    "examples": {
      "javascript": "import { useSignatureDrop } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const signatureDrop = useSignatureDrop(\"<YOUR-CONTRACT-ADDRESS>\")\n\n  // Now you can use the Signature drop contract in the rest of the component\n}"
    },
    "subhooks": [
      {
        "name": "useActiveClaimCondition",
        "example": "const { data: activeClaimCondition, isLoading, error } = useActiveClaimCondition(<YourERC1155ContractInstance>, <tokenId>);",
        "reference": "https://portal.thirdweb.com/react/react.useactiveclaimcondition"
      },
      {
        "name": "useClaimConditions",
        "example": "const { data: claimConditions, isLoading, error } = useClaimConditions(<YourERC1155ContractInstance>, <tokenId>);",
        "reference": "https://portal.thirdweb.com/react/react.useclaimconditions"
      },
      {
        "name": "useClaimedNFTs",
        "example": "const { data: claimedNFTs, isLoading, error } = useClaimedNFTs(<YourERC721DropContractInstance>, { start: 0, count: 100 });",
        "reference": "https://portal.thirdweb.com/react/react.useclaimednfts"
      },
      {
        "name": "useClaimedNFTSupply",
        "example": "",
        "reference": "https://portal.thirdweb.com/react/react.useclaimednftsupply"
      },
      {
        "name": "useClaimIneligibilityReasons",
        "example": "const { data: claimIneligibilityReasons, isLoading, error } = useClaimIneligibilityReasons(<YourERC1155ContractInstance>, { quantity: <quantity>, walletAddress: <walletAddress> }, <tokenId>);",
        "reference": "https://portal.thirdweb.com/react/react.useclaimineligibilityreasons"
      },
      {
        "name": "useClaimNFT",
        "example": "const Component = () => {\n  const { contract } = useContract(<ContractAddress>);\n  const {\n    mutate: claimNft,\n    isLoading,\n    error,\n  } = useClaimNFT(contract);\n\n  if (error) {\n    console.error(\"failed to claim nft\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => claimNft({ to: \"0x...\", quantity: 1 })}\n    >\n      Claim NFT!\n    </button>\n  );\n};",
        "reference": "https://portal.thirdweb.com/react/react.useclaimnft"
      },
      {
        "name": "useClaimToken",
        "example": "const Component = () => {\n  const {\n    mutate: claimTokens,\n    isLoading,\n    error,\n  } = useClaimToken(TokenDropContract);\n\n  if (error) {\n    console.error(\"failed to claim tokens\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => claimTokens({ to: \"0x...\", amount: 100 })}\n    >\n      Claim Tokens!\n    </button>\n  );\n};",
        "reference": "https://portal.thirdweb.com/react/react.useclaimtoken"
      },
      {
        "name": "useMintNFT",
        "example": "const Component = () => {\n  const { contract } = useContract(<ContractAddress>);\n  const {\n    mutate: mintNft,\n    isLoading,\n    error,\n  } = useMintNFT(contract);\n\n  if (error) {\n    console.error(\"failed to mint nft\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => mintNft({ name: \"My awesome NFT!\", to: \"0x...\" })}\n    >\n      Mint!\n    </button>\n  );\n};",
        "reference": "https://portal.thirdweb.com/react/react.usemintnft"
      },
      {
        "name": "useNFT",
        "example": "const { contract } = useContract(<ContractAddress>);\nconst { data: nft, isLoading, error } = useNFT(contract, <tokenId>);",
        "reference": "https://portal.thirdweb.com/react/react.usenft"
      },
      {
        "name": "useNFTBalance",
        "example": "const { contract } = useContract(<ContractAddress>);\nconst { data: ownerBalance, isLoading, error } = useNFTBalance(contract, <OwnerWalletAddress>);",
        "reference": "https://portal.thirdweb.com/react/react.usenftbalance"
      },
      {
        "name": "useNFTs",
        "example": "const { contract } = useContract(<ContractAddress>);\nconst { data: nfts, isLoading, error } = useNFTs(contract, { start: 0, count: 100 });",
        "reference": "https://portal.thirdweb.com/react/react.usenfts"
      },
      {
        "name": "useOwnedNFTs",
        "example": "const { contract } = useContract(<ContractAddress>);\nconst { data: ownedNFTs, isLoading, error } = useOwnedNFTs(contract, <OwnerWalletAddress>);",
        "reference": "https://portal.thirdweb.com/react/react.useownednfts"
      },
      {
        "name": "useTotalCirculatingSupply",
        "example": "const { contract } = useContract(<ContractAddress>);\nconst { data: totalCirculatingSupply, isLoading, error } = useTotalCirculatingSupply(contract);",
        "reference": "https://portal.thirdweb.com/react/react.usetotalcirculatingsupply"
      },
      {
        "name": "useUnclaimedNFTs",
        "example": "const { data: unclaimedNfts, isLoading, error } = useUnclaimedNFTs(<YourERC721DropContractInstance>, { start: 0, count: 100 });",
        "reference": "https://portal.thirdweb.com/react/react.useunclaimednfts"
      },
      {
        "name": "useUnclaimedNFTSupply",
        "example": "",
        "reference": "https://portal.thirdweb.com/react/react.useunclaimednftsupply"
      }
    ],
    "reference": "https://docs.thirdweb.com/typescript/react.useSignatureDrop"
  },
  "useSplit": {
    "name": "useSplit",
    "summary": "Hook for getting an instance of a `Split` contract. This contract supports fund distribution to multiple parties.\n\n",
    "examples": {
      "javascript": "import { useSplit } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const split = useSplit(\"<YOUR-CONTRACT-ADDRESS>\")\n\n  // Now you can use the split contract in the rest of the component\n}"
    },
    "subhooks": [],
    "reference": "https://docs.thirdweb.com/typescript/react.useSplit"
  },
  "useToken": {
    "name": "useToken",
    "summary": "Hook for getting an instance of a `Token` contract. This contract supports ERC20 compliant tokens.\n\n",
    "examples": {
      "javascript": "import { useToken } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const token = useToken(\"<YOUR-CONTRACT-ADDRESS>\")\n\n  // Now you can use the token contract in the rest of the component\n}"
    },
    "subhooks": [
      {
        "name": "useMintToken",
        "example": "const Component = () => {\n  const {\n    mutate: mintTokens,\n    isLoading,\n    error,\n  } = useMintToken(\">>YourERC20ContractInstance<<\");\n\n  if (error) {\n    console.error(\"failed to mint tokens\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => mintTokens({ to: \"0x...\", amount: 1000 })}\n    >\n      Mint!\n    </button>\n  );\n};",
        "reference": "https://portal.thirdweb.com/react/react.useminttoken"
      },
      {
        "name": "useTokenBalance",
        "example": "const { data: balance, isLoading, error } = useTokenBalance(<YourTokenContractInstance>);",
        "reference": "https://portal.thirdweb.com/react/react.usetokenbalance"
      },
      {
        "name": "useTokenSupply",
        "example": "const { data: totalSupply, isLoading, error } = useTokenSupply(<YourTokenContractInstance>);",
        "reference": "https://portal.thirdweb.com/react/react.usetokensupply"
      }
    ],
    "reference": "https://docs.thirdweb.com/typescript/react.useToken"
  },
  "useTokenDrop": {
    "name": "useTokenDrop",
    "summary": "Hook for getting an instance of a `Token Drop` contract.\n\n",
    "examples": {
      "javascript": "import { useTokenDrop } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const tokenDrop = useTokenDrop(\"<YOUR-CONTRACT-ADDRESS>\")\n\n  // Now you can use the token drop contract in the rest of the component\n}"
    },
    "subhooks": [
      {
        "name": "useActiveClaimCondition",
        "example": "const { data: activeClaimCondition, isLoading, error } = useActiveClaimCondition(<YourERC1155ContractInstance>, <tokenId>);",
        "reference": "https://portal.thirdweb.com/react/react.useactiveclaimcondition"
      },
      {
        "name": "useClaimConditions",
        "example": "const { data: claimConditions, isLoading, error } = useClaimConditions(<YourERC1155ContractInstance>, <tokenId>);",
        "reference": "https://portal.thirdweb.com/react/react.useclaimconditions"
      },
      {
        "name": "useClaimedNFTs",
        "example": "const { data: claimedNFTs, isLoading, error } = useClaimedNFTs(<YourERC721DropContractInstance>, { start: 0, count: 100 });",
        "reference": "https://portal.thirdweb.com/react/react.useclaimednfts"
      },
      {
        "name": "useClaimedNFTSupply",
        "example": "",
        "reference": "https://portal.thirdweb.com/react/react.useclaimednftsupply"
      },
      {
        "name": "useClaimIneligibilityReasons",
        "example": "const { data: claimIneligibilityReasons, isLoading, error } = useClaimIneligibilityReasons(<YourERC1155ContractInstance>, { quantity: <quantity>, walletAddress: <walletAddress> }, <tokenId>);",
        "reference": "https://portal.thirdweb.com/react/react.useclaimineligibilityreasons"
      },
      {
        "name": "useClaimNFT",
        "example": "const Component = () => {\n  const { contract } = useContract(<ContractAddress>);\n  const {\n    mutate: claimNft,\n    isLoading,\n    error,\n  } = useClaimNFT(contract);\n\n  if (error) {\n    console.error(\"failed to claim nft\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => claimNft({ to: \"0x...\", quantity: 1 })}\n    >\n      Claim NFT!\n    </button>\n  );\n};",
        "reference": "https://portal.thirdweb.com/react/react.useclaimnft"
      },
      {
        "name": "useClaimToken",
        "example": "const Component = () => {\n  const {\n    mutate: claimTokens,\n    isLoading,\n    error,\n  } = useClaimToken(TokenDropContract);\n\n  if (error) {\n    console.error(\"failed to claim tokens\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => claimTokens({ to: \"0x...\", amount: 100 })}\n    >\n      Claim Tokens!\n    </button>\n  );\n};",
        "reference": "https://portal.thirdweb.com/react/react.useclaimtoken"
      },
      {
        "name": "useMintToken",
        "example": "const Component = () => {\n  const {\n    mutate: mintTokens,\n    isLoading,\n    error,\n  } = useMintToken(\">>YourERC20ContractInstance<<\");\n\n  if (error) {\n    console.error(\"failed to mint tokens\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => mintTokens({ to: \"0x...\", amount: 1000 })}\n    >\n      Mint!\n    </button>\n  );\n};",
        "reference": "https://portal.thirdweb.com/react/react.useminttoken"
      },
      {
        "name": "useTokenBalance",
        "example": "const { data: balance, isLoading, error } = useTokenBalance(<YourTokenContractInstance>);",
        "reference": "https://portal.thirdweb.com/react/react.usetokenbalance"
      },
      {
        "name": "useTokenSupply",
        "example": "const { data: totalSupply, isLoading, error } = useTokenSupply(<YourTokenContractInstance>);",
        "reference": "https://portal.thirdweb.com/react/react.usetokensupply"
      },
      {
        "name": "useUnclaimedNFTs",
        "example": "const { data: unclaimedNfts, isLoading, error } = useUnclaimedNFTs(<YourERC721DropContractInstance>, { start: 0, count: 100 });",
        "reference": "https://portal.thirdweb.com/react/react.useunclaimednfts"
      },
      {
        "name": "useUnclaimedNFTSupply",
        "example": "",
        "reference": "https://portal.thirdweb.com/react/react.useunclaimednftsupply"
      }
    ],
    "reference": "https://docs.thirdweb.com/typescript/react.useTokenDrop"
  },
  "useVote": {
    "name": "useVote",
    "summary": "Hook for getting an instance of an `Vote` contract. This contract enables fully featured voting-based decentralized governance systems.\n\n",
    "examples": {
      "javascript": "import { useVote } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const vote = useVote(\"<YOUR-CONTRACT-ADDRESS>\")\n\n  // Now you can use the vote contract in the rest of the component\n}"
    },
    "subhooks": [],
    "reference": "https://docs.thirdweb.com/typescript/react.useVote"
  }
}