// This file is auto-generated by @hey-api/openapi-ts

import type {
	Client,
	Options as ClientOptions,
	TDataShape,
} from "./client/index.js";
import { client as _heyApiClient } from "./client.gen.js";
import type {
	BuyTokenWithUsdData,
	BuyTokenWithUsdErrors,
	BuyTokenWithUsdResponses,
	CreateWalletData,
	CreateWalletErrors,
	CreateWalletResponses,
	DeployContractData,
	DeployContractErrors,
	DeployContractResponses,
	GeneratePasskeyChallengeData,
	GeneratePasskeyChallengeErrors,
	GeneratePasskeyChallengeResponses,
	GenerateSiwePayloadData,
	GenerateSiwePayloadErrors,
	GenerateSiwePayloadResponses,
	GetContractEventsData,
	GetContractEventsErrors,
	GetContractEventsResponses,
	GetContractTransactionsData,
	GetContractTransactionsErrors,
	GetContractTransactionsResponses,
	GetTransactionByIdData,
	GetTransactionByIdErrors,
	GetTransactionByIdResponses,
	GetWalletBalanceData,
	GetWalletBalanceErrors,
	GetWalletBalanceResponses,
	GetWalletDetailsData,
	GetWalletDetailsErrors,
	GetWalletDetailsResponses,
	GetWalletNftsData,
	GetWalletNftsErrors,
	GetWalletNftsResponses,
	GetWalletTokensData,
	GetWalletTokensErrors,
	GetWalletTokensResponses,
	GetWalletTransactionsData,
	GetWalletTransactionsErrors,
	GetWalletTransactionsResponses,
	InitOauthData,
	InitOauthErrors,
	ListContractsData,
	ListContractsErrors,
	ListContractsResponses,
	ListTransactionsData,
	ListTransactionsErrors,
	ListTransactionsResponses,
	ListWalletsData,
	ListWalletsErrors,
	ListWalletsResponses,
	ReadContractData,
	ReadContractErrors,
	ReadContractResponses,
	SellTokenForUsdData,
	SellTokenForUsdErrors,
	SellTokenForUsdResponses,
	SendCodeData,
	SendCodeErrors,
	SendCodeResponses,
	SendTransactionsData,
	SendTransactionsErrors,
	SendTransactionsResponses,
	SignMessageData,
	SignMessageErrors,
	SignMessageResponses,
	SignTypedDataData,
	SignTypedDataErrors,
	SignTypedDataResponses,
	TransferTokenWithUsdData,
	TransferTokenWithUsdErrors,
	TransferTokenWithUsdResponses,
	VerifyCodeData,
	VerifyCodeErrors,
	VerifyCodeResponses,
	VerifyPasskeyData,
	VerifyPasskeyErrors,
	VerifyPasskeyResponses,
	VerifySiweSignatureData,
	VerifySiweSignatureErrors,
	VerifySiweSignatureResponses,
	WriteContractData,
	WriteContractErrors,
	WriteContractResponses,
} from "./types.gen.js";

export type Options<
	TData extends TDataShape = TDataShape,
	ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
	/**
	 * You can provide a client instance returned by `createClient()` instead of
	 * individual options. This might be also useful if you want to implement a
	 * custom client.
	 */
	client?: Client;
	/**
	 * You can pass arbitrary values through the `meta` object. This can be
	 * used to access values that aren't defined as part of the SDK function.
	 */
	meta?: Record<string, unknown>;
};

/**
 * List Contracts
 * Retrieves a list of all smart contracts imported by the authenticated client on the thirdweb dashboard. This endpoint provides access to contracts that have been added to your dashboard for management and interaction. Results include contract metadata, deployment information, and import timestamps.
 *
 * **Authentication**: This endpoint requires backend authentication using the `x-secret-key` header. The secret key should never be exposed publicly.
 *
 * **ABI Enrichment**: When `includeAbi=true`, the endpoint will fetch the contract ABI (Application Binary Interface) from the thirdweb contract service for each contract. The ABI contains function signatures, event definitions, and interface specifications required for contract interaction.
 *
 * **Metadata Enrichment**: When `includeMetadata=true`, the endpoint will fetch additional metadata from the thirdweb contract metadata service for each contract. This includes information like contract name, description, compilation details, and more. The metadata is returned in an optional `metadata` object within each contract.
 */
export const listContracts = <ThrowOnError extends boolean = false>(
	options?: Options<ListContractsData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<
		ListContractsResponses,
		ListContractsErrors,
		ThrowOnError
	>({
		security: [
			{
				name: "x-client-id",
				type: "apiKey",
			},
			{
				name: "x-secret-key",
				type: "apiKey",
			},
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/v1/contracts",
		...options,
	});
};

/**
 * Deploy Contract
 * Deploy a new smart contract to a blockchain network. This endpoint allows you to deploy contracts by providing the contract source URL, target chain, constructor parameters, and optional salt for deterministic deployment.
 *
 * **Authentication**: This endpoint requires backend authentication using the `x-secret-key` header. The secret key should never be exposed publicly.
 */
export const deployContract = <ThrowOnError extends boolean = false>(
	options?: Options<DeployContractData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<
		DeployContractResponses,
		DeployContractErrors,
		ThrowOnError
	>({
		security: [
			{
				name: "x-client-id",
				type: "apiKey",
			},
			{
				name: "x-secret-key",
				type: "apiKey",
			},
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/v1/contracts",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};

/**
 * Read Contract Methods
 * Executes multiple read-only contract method calls in a single batch request. This endpoint allows efficient batch reading from multiple contracts on the same chain, significantly reducing the number of HTTP requests needed. Each call specifies the contract address, method signature, and optional parameters. Results are returned in the same order as the input calls, with individual success/failure status for each operation.
 *
 * **Authentication**: Pass `x-client-id` header for frontend usage from allowlisted origins or `x-secret-key` for backend usage.
 */
export const readContract = <ThrowOnError extends boolean = false>(
	options?: Options<ReadContractData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<
		ReadContractResponses,
		ReadContractErrors,
		ThrowOnError
	>({
		security: [
			{
				name: "x-client-id",
				type: "apiKey",
			},
			{
				name: "x-secret-key",
				type: "apiKey",
			},
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/v1/contracts/read",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};

/**
 * Get Contract Transactions
 * Retrieves transactions for a specific smart contract address across one or more blockchain networks. This endpoint provides comprehensive transaction data including block information, gas details, transaction status, and function calls. Results can be filtered, paginated, and sorted to meet specific requirements.
 *
 * **Authentication**: Pass `x-client-id` header for frontend usage from allowlisted origins or `x-secret-key` for backend usage.
 */
export const getContractTransactions = <ThrowOnError extends boolean = false>(
	options: Options<GetContractTransactionsData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		GetContractTransactionsResponses,
		GetContractTransactionsErrors,
		ThrowOnError
	>({
		security: [
			{
				name: "x-client-id",
				type: "apiKey",
			},
			{
				name: "x-secret-key",
				type: "apiKey",
			},
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/v1/contracts/{address}/transactions",
		...options,
	});
};

/**
 * Get Contract Events
 * Retrieves events emitted by a specific smart contract address across one or more blockchain networks. This endpoint provides comprehensive event data including block information, transaction details, event topics, and optional ABI decoding. Results can be filtered, paginated, and sorted to meet specific requirements.
 *
 * **Authentication**: Pass `x-client-id` header for frontend usage from allowlisted origins or `x-secret-key` for backend usage.
 */
export const getContractEvents = <ThrowOnError extends boolean = false>(
	options: Options<GetContractEventsData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		GetContractEventsResponses,
		GetContractEventsErrors,
		ThrowOnError
	>({
		security: [
			{
				name: "x-client-id",
				type: "apiKey",
			},
			{
				name: "x-secret-key",
				type: "apiKey",
			},
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/v1/contracts/{address}/events",
		...options,
	});
};

/**
 * Write Contract Methods
 * Executes write operations (transactions) on smart contracts. This is a convenience endpoint that simplifies contract interaction by accepting method signatures and parameters directly, without requiring manual transaction encoding. All calls are executed against the same contract address and chain, making it ideal for batch operations.
 *
 * **Authentication**: This endpoint requires project authentication and wallet authentication. For backend usage, use `x-secret-key` header. For frontend usage, use `x-client-id` + `Authorization: Bearer <jwt>` headers.
 */
export const writeContract = <ThrowOnError extends boolean = false>(
	options?: Options<WriteContractData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<
		WriteContractResponses,
		WriteContractErrors,
		ThrowOnError
	>({
		security: [
			{
				name: "x-client-id",
				type: "apiKey",
			},
			{
				name: "x-secret-key",
				type: "apiKey",
			},
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/v1/contracts/write",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};

/**
 * List Wallets
 * Get all wallet details with pagination for your project.
 *
 * **Authentication**: This endpoint requires backend authentication using the `x-secret-key` header. The secret key should never be exposed publicly.
 */
export const listWallets = <ThrowOnError extends boolean = false>(
	options?: Options<ListWalletsData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<
		ListWalletsResponses,
		ListWalletsErrors,
		ThrowOnError
	>({
		security: [
			{
				name: "x-client-id",
				type: "apiKey",
			},
			{
				name: "x-secret-key",
				type: "apiKey",
			},
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/v1/wallets",
		...options,
	});
};

/**
 * Create Wallet
 * Creates a server wallet from a unique identifier. If the wallet already exists, it will return the existing wallet. Requires project authentication with `x-secret-key` header.
 */
export const createWallet = <ThrowOnError extends boolean = false>(
	options?: Options<CreateWalletData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<
		CreateWalletResponses,
		CreateWalletErrors,
		ThrowOnError
	>({
		security: [
			{
				name: "x-client-id",
				type: "apiKey",
			},
			{
				name: "x-secret-key",
				type: "apiKey",
			},
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/v1/wallets",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};

/**
 * Get Wallet Native Balance
 * Get native token balance for a wallet address across multiple blockchain networks. This endpoint retrieves native token balances (ETH, MATIC, BNB, etc.) for a given wallet address on multiple chains simultaneously, making it efficient for cross-chain native balance checking.
 *
 * **Authentication**: Pass `x-client-id` header for frontend usage from allowlisted origins or `x-secret-key` for backend usage.
 */
export const getWalletBalance = <ThrowOnError extends boolean = false>(
	options: Options<GetWalletBalanceData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		GetWalletBalanceResponses,
		GetWalletBalanceErrors,
		ThrowOnError
	>({
		security: [
			{
				name: "x-client-id",
				type: "apiKey",
			},
			{
				name: "x-secret-key",
				type: "apiKey",
			},
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/v1/wallets/{address}/balance",
		...options,
	});
};

/**
 * Get Wallet Transactions
 * Retrieves transactions for a specific wallet address across one or more blockchain networks. This endpoint provides comprehensive transaction data including both incoming and outgoing transactions, with block information, gas details, transaction status, and function calls. Results can be filtered, paginated, and sorted to meet specific requirements.
 *
 * **Authentication**: Pass `x-client-id` header for frontend usage from allowlisted origins or `x-secret-key` for backend usage.
 */
export const getWalletTransactions = <ThrowOnError extends boolean = false>(
	options: Options<GetWalletTransactionsData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		GetWalletTransactionsResponses,
		GetWalletTransactionsErrors,
		ThrowOnError
	>({
		security: [
			{
				name: "x-client-id",
				type: "apiKey",
			},
			{
				name: "x-secret-key",
				type: "apiKey",
			},
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/v1/wallets/{address}/transactions",
		...options,
	});
};

/**
 * Get Wallet Tokens
 * Retrieves token balances for a specific wallet address across one or more blockchain networks. This endpoint provides comprehensive token data including ERC-20 tokens with their balances, metadata, and price information. Results can be filtered by chain and paginated to meet specific requirements.
 *
 * **Authentication**: Pass `x-client-id` header for frontend usage from allowlisted origins or `x-secret-key` for backend usage.
 */
export const getWalletTokens = <ThrowOnError extends boolean = false>(
	options: Options<GetWalletTokensData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		GetWalletTokensResponses,
		GetWalletTokensErrors,
		ThrowOnError
	>({
		security: [
			{
				name: "x-client-id",
				type: "apiKey",
			},
			{
				name: "x-secret-key",
				type: "apiKey",
			},
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/v1/wallets/{address}/tokens",
		...options,
	});
};

/**
 * Get Wallet NFTs
 * Retrieves NFTs for a specific wallet address across one or more blockchain networks. This endpoint provides comprehensive NFT data including metadata, attributes, and collection information. Results can be filtered by chain and paginated to meet specific requirements.
 *
 * **Authentication**: Pass `x-client-id` header for frontend usage from allowlisted origins or `x-secret-key` for backend usage.
 */
export const getWalletNfts = <ThrowOnError extends boolean = false>(
	options: Options<GetWalletNftsData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		GetWalletNftsResponses,
		GetWalletNftsErrors,
		ThrowOnError
	>({
		security: [
			{
				name: "x-client-id",
				type: "apiKey",
			},
			{
				name: "x-secret-key",
				type: "apiKey",
			},
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/v1/wallets/{address}/nfts",
		...options,
	});
};

/**
 * Get Wallet Details
 * Retrieves detailed user information for a previously created wallet. This endpoint fetches user data including authentication details and linked accounts.
 *
 * **Authentication**: This endpoint requires backend authentication using the `x-secret-key` header. The secret key should never be exposed publicly.
 */
export const getWalletDetails = <ThrowOnError extends boolean = false>(
	options: Options<GetWalletDetailsData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		GetWalletDetailsResponses,
		GetWalletDetailsErrors,
		ThrowOnError
	>({
		security: [
			{
				name: "x-client-id",
				type: "apiKey",
			},
			{
				name: "x-secret-key",
				type: "apiKey",
			},
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/v1/wallets/{address}",
		...options,
	});
};

/**
 * Send Login Code
 * Send email or phone code for wallet authentication
 */
export const sendCode = <ThrowOnError extends boolean = false>(
	options?: Options<SendCodeData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<
		SendCodeResponses,
		SendCodeErrors,
		ThrowOnError
	>({
		security: [
			{
				name: "x-client-id",
				type: "apiKey",
			},
			{
				name: "x-secret-key",
				type: "apiKey",
			},
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/v1/wallets/login/code",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};

/**
 * Login with Code
 * Verify email or phone code for wallet authentication
 */
export const verifyCode = <ThrowOnError extends boolean = false>(
	options?: Options<VerifyCodeData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<
		VerifyCodeResponses,
		VerifyCodeErrors,
		ThrowOnError
	>({
		security: [
			{
				name: "x-client-id",
				type: "apiKey",
			},
			{
				name: "x-secret-key",
				type: "apiKey",
			},
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/v1/wallets/login/code/verify",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};

/**
 * Login with OAuth
 * Initiate OAuth flow for a given provider (google, apple, github, etc). Open this URL in a browser to begin authentication. After authentication, the user will be redirected to the redirect URL with an authResult parameter.
 */
export const initOauth = <ThrowOnError extends boolean = false>(
	options: Options<InitOauthData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		unknown,
		InitOauthErrors,
		ThrowOnError
	>({
		security: [
			{
				name: "x-client-id",
				type: "apiKey",
			},
			{
				name: "x-secret-key",
				type: "apiKey",
			},
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/v1/wallets/login/oauth/{provider}",
		...options,
	});
};

/**
 * Generate Passkey Challenge
 * Generate passkey challenge for wallet authentication
 */
export const generatePasskeyChallenge = <ThrowOnError extends boolean = false>(
	options: Options<GeneratePasskeyChallengeData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		GeneratePasskeyChallengeResponses,
		GeneratePasskeyChallengeErrors,
		ThrowOnError
	>({
		security: [
			{
				name: "x-client-id",
				type: "apiKey",
			},
			{
				name: "x-secret-key",
				type: "apiKey",
			},
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/v1/wallets/login/passkey",
		...options,
	});
};

/**
 * Login with Passkey
 * Verify passkey challenge for wallet authentication
 */
export const verifyPasskey = <ThrowOnError extends boolean = false>(
	options?: Options<VerifyPasskeyData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<
		VerifyPasskeyResponses,
		VerifyPasskeyErrors,
		ThrowOnError
	>({
		security: [
			{
				name: "x-client-id",
				type: "apiKey",
			},
			{
				name: "x-secret-key",
				type: "apiKey",
			},
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/v1/wallets/login/passkey/verify",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};

/**
 * Generate SIWE Payload
 * Generate SIWE payload for wallet authentication
 */
export const generateSiwePayload = <ThrowOnError extends boolean = false>(
	options: Options<GenerateSiwePayloadData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		GenerateSiwePayloadResponses,
		GenerateSiwePayloadErrors,
		ThrowOnError
	>({
		security: [
			{
				name: "x-client-id",
				type: "apiKey",
			},
			{
				name: "x-secret-key",
				type: "apiKey",
			},
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/v1/wallets/login/siwe",
		...options,
	});
};

/**
 * Login with SIWE
 * Verify SIWE signature for wallet authentication
 */
export const verifySiweSignature = <ThrowOnError extends boolean = false>(
	options?: Options<VerifySiweSignatureData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<
		VerifySiweSignatureResponses,
		VerifySiweSignatureErrors,
		ThrowOnError
	>({
		security: [
			{
				name: "x-client-id",
				type: "apiKey",
			},
			{
				name: "x-secret-key",
				type: "apiKey",
			},
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/v1/wallets/login/siwe/verify",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};

/**
 * List Transactions
 * Retrieves a paginated list of transactions associated with the authenticated client. Results are sorted by creation date in descending order (most recent first). Supports filtering by wallet address and pagination controls.
 *
 * **Authentication**: Pass `x-client-id` header for frontend usage from allowlisted origins or `x-secret-key` for backend usage.
 */
export const listTransactions = <ThrowOnError extends boolean = false>(
	options?: Options<ListTransactionsData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<
		ListTransactionsResponses,
		ListTransactionsErrors,
		ThrowOnError
	>({
		security: [
			{
				name: "x-client-id",
				type: "apiKey",
			},
			{
				name: "x-secret-key",
				type: "apiKey",
			},
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/v1/transactions",
		...options,
	});
};

/**
 * Send Transactions
 * Submits a blockchain transaction. Supports three types of transactions: native token transfers, encoded transactions with custom data, and smart contract method calls. The transaction type is determined by the 'type' field in the request body.
 *
 * **Authentication**: This endpoint requires project authentication and wallet authentication. For backend usage, use `x-secret-key` header. For frontend usage, use `x-client-id` + `Authorization: Bearer <jwt>` headers.
 */
export const sendTransactions = <ThrowOnError extends boolean = false>(
	options?: Options<SendTransactionsData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<
		SendTransactionsResponses,
		SendTransactionsErrors,
		ThrowOnError
	>({
		security: [
			{
				name: "x-client-id",
				type: "apiKey",
			},
			{
				name: "x-secret-key",
				type: "apiKey",
			},
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/v1/transactions",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};

/**
 * Get Transaction by ID
 * Retrieves detailed information about a specific transaction using its unique identifier. Returns comprehensive transaction data including execution status, blockchain details, and any associated metadata.
 *
 * **Authentication**: Pass `x-client-id` header for frontend usage from allowlisted origins or `x-secret-key` for backend usage.
 */
export const getTransactionById = <ThrowOnError extends boolean = false>(
	options: Options<GetTransactionByIdData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		GetTransactionByIdResponses,
		GetTransactionByIdErrors,
		ThrowOnError
	>({
		security: [
			{
				name: "x-client-id",
				type: "apiKey",
			},
			{
				name: "x-secret-key",
				type: "apiKey",
			},
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/v1/transactions/{transactionId}",
		...options,
	});
};

/**
 * Sign Message
 * Signs an arbitrary message using a connected wallet. This endpoint supports both text and hexadecimal message formats. The signing is performed using thirdweb Engine with smart account support for gasless transactions.
 *
 * **Authentication**: This endpoint requires project authentication and wallet authentication. For backend usage, use `x-secret-key` header. For frontend usage, use `x-client-id` + `Authorization: Bearer <jwt>` headers.
 */
export const signMessage = <ThrowOnError extends boolean = false>(
	options?: Options<SignMessageData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<
		SignMessageResponses,
		SignMessageErrors,
		ThrowOnError
	>({
		security: [
			{
				name: "x-client-id",
				type: "apiKey",
			},
			{
				name: "x-secret-key",
				type: "apiKey",
			},
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/v1/sign/message",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};

/**
 * Sign Typed Data
 * Signs structured data according to the EIP-712 standard. This is commonly used for secure message signing in DeFi protocols, NFT marketplaces, and other dApps that require structured data verification. The typed data includes domain separation and type definitions for enhanced security.
 *
 * **Authentication**: This endpoint requires project authentication and wallet authentication. For backend usage, use `x-secret-key` header. For frontend usage, use `x-client-id` + `Authorization: Bearer <jwt>` headers.
 */
export const signTypedData = <ThrowOnError extends boolean = false>(
	options?: Options<SignTypedDataData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<
		SignTypedDataResponses,
		SignTypedDataErrors,
		ThrowOnError
	>({
		security: [
			{
				name: "x-client-id",
				type: "apiKey",
			},
			{
				name: "x-secret-key",
				type: "apiKey",
			},
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/v1/sign/typed-data",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};

/**
 * Buy Token
 * Purchase tokens using a USD amount. The system will automatically handle wallet creation if needed, check your wallet balance, and execute the optimal cross-chain route to get the tokens you want.
 *
 * **Authentication**: This endpoint requires project authentication and wallet authentication. For backend usage, use `x-secret-key` header. For frontend usage, use `x-client-id` + `Authorization: Bearer <jwt>` headers.
 */
export const buyTokenWithUsd = <ThrowOnError extends boolean = false>(
	options?: Options<BuyTokenWithUsdData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<
		BuyTokenWithUsdResponses,
		BuyTokenWithUsdErrors,
		ThrowOnError
	>({
		security: [
			{
				name: "x-client-id",
				type: "apiKey",
			},
			{
				name: "x-secret-key",
				type: "apiKey",
			},
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/v1/tokens/buy",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};

/**
 * Sell Token
 * Sell tokens for a USD amount. The system will automatically handle the optimal cross-chain route to convert your tokens to USD.
 *
 * **Authentication**: This endpoint requires project authentication and wallet authentication. For backend usage, use `x-secret-key` header. For frontend usage, use `x-client-id` + `Authorization: Bearer <jwt>` headers.
 */
export const sellTokenForUsd = <ThrowOnError extends boolean = false>(
	options?: Options<SellTokenForUsdData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<
		SellTokenForUsdResponses,
		SellTokenForUsdErrors,
		ThrowOnError
	>({
		security: [
			{
				name: "x-client-id",
				type: "apiKey",
			},
			{
				name: "x-secret-key",
				type: "apiKey",
			},
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/v1/tokens/sell",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};

/**
 * Transfer Token
 * Transfer tokens worth a USD amount to another wallet address. The system will calculate the required token amount based on current prices and execute the transfer.
 *
 * **Authentication**: This endpoint requires project authentication and wallet authentication. For backend usage, use `x-secret-key` header. For frontend usage, use `x-client-id` + `Authorization: Bearer <jwt>` headers.
 */
export const transferTokenWithUsd = <ThrowOnError extends boolean = false>(
	options?: Options<TransferTokenWithUsdData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<
		TransferTokenWithUsdResponses,
		TransferTokenWithUsdErrors,
		ThrowOnError
	>({
		security: [
			{
				name: "x-client-id",
				type: "apiKey",
			},
			{
				name: "x-secret-key",
				type: "apiKey",
			},
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/v1/tokens/transfer",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};
