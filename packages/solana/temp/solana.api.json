{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.31.1",
    "schemaVersion": 1009,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "@thirdweb-dev/solana!",
  "docComment": "",
  "name": "@thirdweb-dev/solana",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@thirdweb-dev/solana!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "Function",
          "canonicalReference": "@thirdweb-dev/solana!createThirdwebSDK:function(1)",
          "docComment": "/**\n * Create an SDK instance using the local configuration generated by the Solana CLI\n *\n * @example\n * ```jsx\n * import { createThirdwebSDK } from \"@thirdweb-dev/solana\";\n *\n * // Select the network to create the SDK on\n * const sdk = createThirdwebSDK(\"devnet\");\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createThirdwebSDK(network: "
            },
            {
              "kind": "Reference",
              "text": "Network",
              "canonicalReference": "@thirdweb-dev/solana!Network:type"
            },
            {
              "kind": "Content",
              "text": ", storage?: "
            },
            {
              "kind": "Reference",
              "text": "ThirdwebStorage",
              "canonicalReference": "@thirdweb-dev/storage!ThirdwebStorage:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ThirdwebSDK",
              "canonicalReference": "@thirdweb-dev/solana!ThirdwebSDK:class"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "network",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "storage",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "createThirdwebSDK"
        },
        {
          "kind": "Class",
          "canonicalReference": "@thirdweb-dev/solana!Deployer:class",
          "docComment": "/**\n * Deploy new programs\n *\n * @example\n * ```jsx\n * import { ThirdwebSDK } from \"@thirdweb-dev/solana\";\n *\n * // Instantiate the SDK and pass in a signer\n * const sdk = ThirdwebSDK.fromNetwork(\"devnet\");\n * sdk.wallet.connect(signer);\n *\n * // Define the metadata for your program\n * const metadata = {\n *   name: \"NFT Contract\",\n *   image: readFileSync(\"files/image.jpg\"),\n * };\n *\n * // And deploy a new program from the connected wallet\n * const address = await sdk.deployer.createNftCollection(metadata);\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Deployer "
            }
          ],
          "releaseTag": "Public",
          "name": "Deployer",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@thirdweb-dev/solana!Deployer:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `Deployer` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(metaplex: "
                },
                {
                  "kind": "Reference",
                  "text": "Metaplex",
                  "canonicalReference": "@metaplex-foundation/js!Metaplex:class"
                },
                {
                  "kind": "Content",
                  "text": ", storage: "
                },
                {
                  "kind": "Reference",
                  "text": "ThirdwebStorage",
                  "canonicalReference": "@thirdweb-dev/storage!ThirdwebStorage:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "metaplex",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "storage",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@thirdweb-dev/solana!Deployer#createNftCollection:member(1)",
              "docComment": "/**\n * Create a new NFT collection program\n *\n * @param collectionMetadata - the metadata of the nft collection program\n *\n * @returns - the address of the new nft collection program\n *\n * @example\n * ```jsx\n * const metadata = {\n *   name: \"NFT\",\n *   symbol: \"NFT\",\n * };\n *\n * const address = await sdk.deployer.createNftCollection(metadata);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createNftCollection(collectionMetadata: "
                },
                {
                  "kind": "Reference",
                  "text": "NFTCollectionMetadataInput",
                  "canonicalReference": "@thirdweb-dev/solana!NFTCollectionMetadataInput:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "collectionMetadata",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "createNftCollection"
            },
            {
              "kind": "Method",
              "canonicalReference": "@thirdweb-dev/solana!Deployer#createNftDrop:member(1)",
              "docComment": "/**\n * Create a new NFT drop program\n *\n * @param metadata - the metadata of the nft drop program\n *\n * @returns - the address of the new nft drop program\n *\n * @example\n * ```jsx\n * const metadata = {\n *   name: \"NFT\",\n *   symbol: \"NFT\",\n *   price: 0,\n *   sellerFeeBasisPoints: 0,\n *   itemsAvailable: 5,\n * };\n *\n * const address = await sdk.deployer.createNftDrop(metadata);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createNftDrop(metadata: "
                },
                {
                  "kind": "Reference",
                  "text": "NFTDropContractInput",
                  "canonicalReference": "@thirdweb-dev/solana!NFTDropContractInput:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "metadata",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "createNftDrop"
            },
            {
              "kind": "Method",
              "canonicalReference": "@thirdweb-dev/solana!Deployer#createToken:member(1)",
              "docComment": "/**\n * Create a new token program\n *\n * @param tokenMetadata - the metadata of the token program\n *\n * @returns - the address of the new token program\n *\n * @example\n * ```jsx\n * const metadata = {\n *   name: \"Token\",\n *   symbol: \"TKN\",\n *   initialSupply: 100,\n * };\n *\n * const address = await sdk.deployer.createToken(metadata);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createToken(tokenMetadata: "
                },
                {
                  "kind": "Reference",
                  "text": "TokenMetadataInput",
                  "canonicalReference": "@thirdweb-dev/solana!TokenMetadataInput:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "tokenMetadata",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "createToken"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@thirdweb-dev/solana!Network:type",
          "docComment": "/**\n * Supported Solana networks to use the SDK with\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Network = "
            },
            {
              "kind": "Content",
              "text": "\"devnet\" | \"testnet\" | \"mainnet-beta\" | \"localhost\" | (string & {})"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Network",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@thirdweb-dev/solana!NFTCollection:class",
          "docComment": "/**\n * A collection of associated NFTs\n *\n * @example\n * ```jsx\n * import { ThirdwebSDK } from \"@thirdweb-dev/solana\";\n *\n * const sdk = ThirdwebSDK.fromNetwork(\"devnet\");\n * sdk.wallet.connect(signer);\n *\n * // Get the interface for your NFT collection program\n * const program = await sdk.getNFTCollection(\"{{contract_address}}\");\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class NFTCollection "
            }
          ],
          "releaseTag": "Public",
          "name": "NFTCollection",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@thirdweb-dev/solana!NFTCollection:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `NFTCollection` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(collectionMintAddress: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", metaplex: "
                },
                {
                  "kind": "Reference",
                  "text": "Metaplex",
                  "canonicalReference": "@metaplex-foundation/js!Metaplex:class"
                },
                {
                  "kind": "Content",
                  "text": ", storage: "
                },
                {
                  "kind": "Reference",
                  "text": "ThirdwebStorage",
                  "canonicalReference": "@thirdweb-dev/storage!ThirdwebStorage:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "collectionMintAddress",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "metaplex",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "storage",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@thirdweb-dev/solana!NFTCollection#accountType:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "accountType: "
                },
                {
                  "kind": "Content",
                  "text": "\"nft-collection\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "accountType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@thirdweb-dev/solana!NFTCollection#balance:member(1)",
              "docComment": "/**\n * Get the NFT balance of the connected wallet\n *\n * @returns the NFT balance\n *\n * @example\n * ```jsx\n * const balance = await program.balance();\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "balance(mintAddress: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "mintAddress",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "balance"
            },
            {
              "kind": "Method",
              "canonicalReference": "@thirdweb-dev/solana!NFTCollection#balanceOf:member(1)",
              "docComment": "/**\n * Get the NFT balance of the specified wallet\n *\n * @param walletAddress - the wallet address to get the balance of\n *\n * @param mintAddress - the mint address of the NFT to get the balance of\n *\n * @returns the NFT balance\n *\n * @example\n * ```jsx\n * const walletAddress = \"...\"\n * const mintAddress = \"...\"\n * const balance = await program.balanceOf(walletAddress, mintAddress);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "balanceOf(walletAddress: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", mintAddress: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "walletAddress",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "mintAddress",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "balanceOf"
            },
            {
              "kind": "Method",
              "canonicalReference": "@thirdweb-dev/solana!NFTCollection#get:member(1)",
              "docComment": "/**\n * Get the metadata for a specific NFT\n *\n * @param mintAddress - the mint address of the NFT to get\n *\n * @returns the metadata of the NFT\n *\n * @example\n * ```jsx\n * const mintAddress = \"...\";\n * const nft = await program.get(mintAddress);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get(mintAddress: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "NFTMetadata",
                  "canonicalReference": "@thirdweb-dev/solana!NFTMetadata:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "mintAddress",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "get"
            },
            {
              "kind": "Method",
              "canonicalReference": "@thirdweb-dev/solana!NFTCollection#getAll:member(1)",
              "docComment": "/**\n * Get the metadata for all NFTs on this collection\n *\n * @returns metadata for all minted NFTs\n *\n * @example\n * ```jsx\n * const nfts = await program.getAll();\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getAll(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "NFTMetadata",
                  "canonicalReference": "@thirdweb-dev/solana!NFTMetadata:type"
                },
                {
                  "kind": "Content",
                  "text": "[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getAll"
            },
            {
              "kind": "Method",
              "canonicalReference": "@thirdweb-dev/solana!NFTCollection#getAllNFTAddresses:member(1)",
              "docComment": "/**\n * Get the mint addresses for all NFTs on this collection\n *\n * @returns mint addresses for all minted NFTs\n *\n * @example\n * ```jsx\n * const nfts = await program.getAllNFTAddresses();\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getAllNFTAddresses(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getAllNFTAddresses"
            },
            {
              "kind": "Method",
              "canonicalReference": "@thirdweb-dev/solana!NFTCollection#getMetadata:member(1)",
              "docComment": "/**\n * Get the metadata for this program.\n *\n * @returns program metadata\n *\n * @example\n * ```jsx\n * const metadata = await program.getMetadata();\n * console.log(metadata.name);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getMetadata(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "NFTCollectionMetadata",
                  "canonicalReference": "@thirdweb-dev/solana!NFTCollectionMetadata:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getMetadata"
            },
            {
              "kind": "Method",
              "canonicalReference": "@thirdweb-dev/solana!NFTCollection#mint:member(1)",
              "docComment": "/**\n * Mint NFTs to the connected wallet\n *\n * @param metadata - the metadata of the NFT to mint\n *\n * @returns the mint address of the minted NFT\n *\n * @example\n * ```jsx\n * const metadata = {\n *   name: \"NFT #1\",\n *   image: readFileSync(\"files/image.jpg\"),\n * }\n * const address = await program.mint(metadata);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "mint(metadata: "
                },
                {
                  "kind": "Reference",
                  "text": "NFTMetadataInput",
                  "canonicalReference": "@thirdweb-dev/solana!NFTMetadataInput:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "metadata",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "mint"
            },
            {
              "kind": "Method",
              "canonicalReference": "@thirdweb-dev/solana!NFTCollection#mintAdditionalSupply:member(1)",
              "docComment": "/**\n * Mint additional supply of an NFT to the connected wallet\n *\n * @param mintAddress - the mint address to mint additional supply to\n *\n * @returns the mint address of the minted NFT\n *\n * @example\n * ```jsx\n * const mintAddress = \"...\"\n * const address = await program.mintTo(mintAddress);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "mintAdditionalSupply(mintAddress: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "mintAddress",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "mintAdditionalSupply"
            },
            {
              "kind": "Method",
              "canonicalReference": "@thirdweb-dev/solana!NFTCollection#mintAdditionalSupplyTo:member(1)",
              "docComment": "/**\n * Mint additional supply of an NFT to the specified wallet\n *\n * @param to - the address to mint the NFT to\n *\n * @param mintAddress - the mint address to mint additional supply to\n *\n * @returns the mint address of the minted NFT\n *\n * @example\n * ```jsx\n * const to = \"...\"\n * const mintAddress = \"...\"\n * const address = await program.mintTo(to, mintAddress);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "mintAdditionalSupplyTo(to: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", mintAddress: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "to",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "mintAddress",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "mintAdditionalSupplyTo"
            },
            {
              "kind": "Method",
              "canonicalReference": "@thirdweb-dev/solana!NFTCollection#mintTo:member(1)",
              "docComment": "/**\n * Mint an NFT to the specified wallet\n *\n * @param to - the address to mint the NFT to\n *\n * @param metadata - the metadata of the NFT to mint\n *\n * @returns the mint address of the minted NFT\n *\n * @example\n * ```jsx\n * const to = \"...\"\n * const metadata = {\n *   name: \"NFT #1\",\n *   image: readFileSync(\"files/image.jpg\"),\n * }\n * const address = await program.mintTo(to, metadata);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "mintTo(to: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", metadata: "
                },
                {
                  "kind": "Reference",
                  "text": "NFTMetadataInput",
                  "canonicalReference": "@thirdweb-dev/solana!NFTMetadataInput:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "to",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "metadata",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "mintTo"
            },
            {
              "kind": "Property",
              "canonicalReference": "@thirdweb-dev/solana!NFTCollection#publicKey:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "publicKey: "
                },
                {
                  "kind": "Reference",
                  "text": "PublicKey",
                  "canonicalReference": "!\"\\\"@solana/web3.js\\\"\".PublicKey:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "publicKey",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@thirdweb-dev/solana!NFTCollection#supplyOf:member(1)",
              "docComment": "/**\n * Get the supply of NFT editions minted from a specific NFT\n *\n * @param mintAddress - the mint address of the NFT to check the supply of\n *\n * @returns the supply of the specified NFT\n *\n * @example\n * ```jsx\n * const address = \"...\";\n * const supply = await program.supplyOf(addres);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "supplyOf(mintAddress: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<bigint>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "mintAddress",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "supplyOf"
            },
            {
              "kind": "Method",
              "canonicalReference": "@thirdweb-dev/solana!NFTCollection#transfer:member(1)",
              "docComment": "/**\n * Transfer the specified NFTs to another wallet\n *\n * @param receiverAddress - The address to send the tokens to\n *\n * @param mintAddress - The mint address of the NFT to transfer\n *\n * @returns the transaction result of the transfer\n *\n * @example\n * ```jsx\n * const to = \"...\";\n * const mintAddress = \"...\";\n * const tx = await program.transfer(to, mintAddress);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "transfer(receiverAddress: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", mintAddress: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TransactionResult",
                  "canonicalReference": "@thirdweb-dev/solana!TransactionResult:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "receiverAddress",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "mintAddress",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "transfer"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@thirdweb-dev/solana!NFTCollectionMetadata:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type NFTCollectionMetadata = "
            },
            {
              "kind": "Reference",
              "text": "NFTMetadata",
              "canonicalReference": "@thirdweb-dev/solana!NFTMetadata:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "NFTCollectionMetadata",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@thirdweb-dev/solana!NFTDrop:class",
          "docComment": "/**\n * A collection of NFTs that can be lazy minted and claimed\n *\n * @example\n * ```jsx\n * import { ThirdwebSDK } from \"@thirdweb-dev/solana\";\n *\n * const sdk = ThirdwebSDK.fromNetwork(\"devnet\");\n * sdk.wallet.connect(signer);\n *\n * // Get the interface for your NFT collection program\n * const program = await sdk.getNFTCollection(\"{{contract_address}}\");\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class NFTDrop "
            }
          ],
          "releaseTag": "Public",
          "name": "NFTDrop",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@thirdweb-dev/solana!NFTDrop:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `NFTDrop` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(dropMintAddress: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", metaplex: "
                },
                {
                  "kind": "Reference",
                  "text": "Metaplex",
                  "canonicalReference": "@metaplex-foundation/js!Metaplex:class"
                },
                {
                  "kind": "Content",
                  "text": ", storage: "
                },
                {
                  "kind": "Reference",
                  "text": "ThirdwebStorage",
                  "canonicalReference": "@thirdweb-dev/storage!ThirdwebStorage:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "dropMintAddress",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "metaplex",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "storage",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@thirdweb-dev/solana!NFTDrop#accountType:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "accountType: "
                },
                {
                  "kind": "Content",
                  "text": "\"nft-drop\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "accountType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@thirdweb-dev/solana!NFTDrop#balance:member(1)",
              "docComment": "/**\n * Get the NFT balance of the connected wallet\n *\n * @returns the NFT balance\n *\n * @example\n * ```jsx\n * const balance = await program.balance();\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "balance(mintAddress: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "mintAddress",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "balance"
            },
            {
              "kind": "Method",
              "canonicalReference": "@thirdweb-dev/solana!NFTDrop#balanceOf:member(1)",
              "docComment": "/**\n * Get the NFT balance of the specified wallet\n *\n * @param walletAddress - the wallet address to get the balance of\n *\n * @param mintAddress - the mint address of the NFT to get the balance of\n *\n * @returns the NFT balance\n *\n * @example\n * ```jsx\n * const walletAddress = \"...\"\n * const mintAddress = \"...\"\n * const balance = await program.balanceOf(walletAddress, mintAddress);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "balanceOf(walletAddress: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", mintAddress: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "walletAddress",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "mintAddress",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "balanceOf"
            },
            {
              "kind": "Method",
              "canonicalReference": "@thirdweb-dev/solana!NFTDrop#claim:member(1)",
              "docComment": "/**\n * Claim an NFT from the drop with connected wallet\n *\n * @returns - the mint address of the claimed NFT\n *\n * @example\n * ```jsx\n * const address = await program.claim();\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "claim(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "claim"
            },
            {
              "kind": "Property",
              "canonicalReference": "@thirdweb-dev/solana!NFTDrop#claimConditions:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "claimConditions: "
                },
                {
                  "kind": "Reference",
                  "text": "ClaimConditions",
                  "canonicalReference": "@thirdweb-dev/solana!~ClaimConditions:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "claimConditions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@thirdweb-dev/solana!NFTDrop#get:member(1)",
              "docComment": "/**\n * Get the metadata for a specific NFT\n *\n * @param mintAddress - the mint address of the NFT to get\n *\n * @returns the metadata of the NFT\n *\n * @example\n * ```jsx\n * const mintAddress = \"...\";\n * const nft = await program.get(mintAddress);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get(mintAddress: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "NFTMetadata",
                  "canonicalReference": "@thirdweb-dev/solana!NFTMetadata:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "mintAddress",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "get"
            },
            {
              "kind": "Method",
              "canonicalReference": "@thirdweb-dev/solana!NFTDrop#getAll:member(1)",
              "docComment": "/**\n * Get the metadata for all NFTs on this drop\n *\n * @returns metadata for all minted NFTs\n *\n * @example\n * ```jsx\n * const nfts = await program.getAll();\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getAll(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "NFTMetadata",
                  "canonicalReference": "@thirdweb-dev/solana!NFTMetadata:type"
                },
                {
                  "kind": "Content",
                  "text": "[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getAll"
            },
            {
              "kind": "Method",
              "canonicalReference": "@thirdweb-dev/solana!NFTDrop#getAllClaimed:member(1)",
              "docComment": "/**\n * Get the metadata for all the claimed NFTs on this drop\n *\n * @returns metadata for all claimed NFTs\n *\n * @example\n * ```jsx\n * const nfts = await program.getAllClaimed();\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getAllClaimed(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "NFTMetadata",
                  "canonicalReference": "@thirdweb-dev/solana!NFTMetadata:type"
                },
                {
                  "kind": "Content",
                  "text": "[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getAllClaimed"
            },
            {
              "kind": "Method",
              "canonicalReference": "@thirdweb-dev/solana!NFTDrop#getMetadata:member(1)",
              "docComment": "/**\n * Get the metadata for this program.\n *\n * @returns program metadata\n *\n * @example\n * ```jsx\n * const metadata = await program.getMetadata();\n * console.log(metadata.name);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getMetadata(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "NFTCollectionMetadata",
                  "canonicalReference": "@thirdweb-dev/solana!NFTCollectionMetadata:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getMetadata"
            },
            {
              "kind": "Method",
              "canonicalReference": "@thirdweb-dev/solana!NFTDrop#lazyMint:member(1)",
              "docComment": "/**\n * Lazy mint NFTs to be claimed later\n *\n * @param metadatas - The metadata of the NFTs to lazy mint\n *\n * @returns the transaction result of the lazy mint\n *\n * @example\n * ```jsx\n * const metadatas = [\n *   {\n *     name: \"NFT #1\",\n *     image: readFileSync(\"test/file.jpg\"),\n *   }\n * ]\n *\n * const tx = await program.lazyMint(metadatas);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lazyMint(metadatas: "
                },
                {
                  "kind": "Reference",
                  "text": "NFTMetadataInput",
                  "canonicalReference": "@thirdweb-dev/solana!NFTMetadataInput:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TransactionResult",
                  "canonicalReference": "@thirdweb-dev/solana!TransactionResult:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "metadatas",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "lazyMint"
            },
            {
              "kind": "Property",
              "canonicalReference": "@thirdweb-dev/solana!NFTDrop#publicKey:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "publicKey: "
                },
                {
                  "kind": "Reference",
                  "text": "PublicKey",
                  "canonicalReference": "!\"\\\"@solana/web3.js\\\"\".PublicKey:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "publicKey",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@thirdweb-dev/solana!NFTDrop#totalClaimedSupply:member(1)",
              "docComment": "/**\n * Get the total claimed supply of this drop\n *\n * @returns the total supply\n *\n * @example\n * ```jsx\n * const supply = await program.totalClaimedSupply();\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "totalClaimedSupply(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "totalClaimedSupply"
            },
            {
              "kind": "Method",
              "canonicalReference": "@thirdweb-dev/solana!NFTDrop#totalUnclaimedSupply:member(1)",
              "docComment": "/**\n * Get the total unclaimed supply of this drop\n *\n * @returns the total supply\n *\n * @example\n * ```jsx\n * const supply = await program.totalUnclaimedSupply();\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "totalUnclaimedSupply(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "totalUnclaimedSupply"
            },
            {
              "kind": "Method",
              "canonicalReference": "@thirdweb-dev/solana!NFTDrop#transfer:member(1)",
              "docComment": "/**\n * Transfer the specified NFTs to another wallet\n *\n * @param receiverAddress - The address to send the tokens to\n *\n * @param mintAddress - The mint address of the NFT to transfer\n *\n * @returns the transaction result of the transfer\n *\n * @example\n * ```jsx\n * const to = \"...\";\n * const mintAddress = \"...\";\n * const tx = await program.transfer(to, mintAddress);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "transfer(receiverAddress: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", mintAddress: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TransactionResult",
                  "canonicalReference": "@thirdweb-dev/solana!TransactionResult:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "receiverAddress",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "mintAddress",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "transfer"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@thirdweb-dev/solana!NFTMetadata:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type NFTMetadata = "
            },
            {
              "kind": "Reference",
              "text": "z.output",
              "canonicalReference": "zod!output:type"
            },
            {
              "kind": "Content",
              "text": "<typeof "
            },
            {
              "kind": "Reference",
              "text": "CommonNFTOutput",
              "canonicalReference": "@thirdweb-dev/solana!CommonNFTOutput:var"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "NFTMetadata",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@thirdweb-dev/solana!NFTMetadataInput:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type NFTMetadataInput = "
            },
            {
              "kind": "Reference",
              "text": "z.input",
              "canonicalReference": "zod!input:type"
            },
            {
              "kind": "Content",
              "text": "<typeof "
            },
            {
              "kind": "Reference",
              "text": "CommonNFTInput",
              "canonicalReference": "@thirdweb-dev/solana!CommonNFTInput:var"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "NFTMetadataInput",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@thirdweb-dev/solana!NFTMetadataOrUri:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type NFTMetadataOrUri = "
            },
            {
              "kind": "Reference",
              "text": "z.input",
              "canonicalReference": "zod!input:type"
            },
            {
              "kind": "Content",
              "text": "<typeof "
            },
            {
              "kind": "Reference",
              "text": "NFTInputOrUriSchema",
              "canonicalReference": "@thirdweb-dev/solana!NFTInputOrUriSchema:var"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "NFTMetadataOrUri",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@thirdweb-dev/solana!NFTMetadataOwner:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type NFTMetadataOwner = "
            },
            {
              "kind": "Content",
              "text": "{\n    metadata: "
            },
            {
              "kind": "Reference",
              "text": "NFTMetadata",
              "canonicalReference": "@thirdweb-dev/solana!NFTMetadata:type"
            },
            {
              "kind": "Content",
              "text": ";\n    owner: string;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "NFTMetadataOwner",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@thirdweb-dev/solana!Program:class",
          "docComment": "/**\n * Dynamic interface for interacting with Solana programs.\n *\n * @example\n * ```jsx\n * import { ThirdwebSDK } from \"@thirdweb-dev/solana\";\n *\n * const sdk = ThirdwebSDK.fromNetwork(\"devnet\");\n * sdk.wallet.connect(signer);\n *\n * // Get the interface for your program\n * const program = await sdk.getProgram(\"{{contract_address}}\");\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Program "
            }
          ],
          "releaseTag": "Public",
          "name": "Program",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@thirdweb-dev/solana!Program:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `Program` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(programAddress: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", idl: "
                },
                {
                  "kind": "Reference",
                  "text": "Idl",
                  "canonicalReference": "@project-serum/anchor!Idl:type"
                },
                {
                  "kind": "Content",
                  "text": ", provider?: "
                },
                {
                  "kind": "Reference",
                  "text": "AnchorProvider",
                  "canonicalReference": "@project-serum/anchor!AnchorProvider:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "programAddress",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "idl",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "provider",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@thirdweb-dev/solana!Program#call:member(1)",
              "docComment": "/**\n * Call a function on this program\n *\n * @param functionName - Name of the function to call\n *\n * @param args - Arguments to pass to the function including accounts, data, and signers\n *\n * @returns result of the contract call\n *\n * @example\n * ```jsx\n * const counterAccount = Keypair.generate();\n * await program.call(\"increment\", {\n *   accounts: {\n *     counterAccount: counterAccount.publicKey.toBase58(),\n *   },\n *   data: [\"...\"],\n *   signers: [counterAccount]\n * })\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "call(functionName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", args: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        accounts: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, string>;\n        data?: any[];\n        signers?: "
                },
                {
                  "kind": "Reference",
                  "text": "Signer",
                  "canonicalReference": "!\"\\\"@solana/web3.js\\\"\".Signer:interface"
                },
                {
                  "kind": "Content",
                  "text": "[];\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "functionName",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "args",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "call"
            },
            {
              "kind": "Method",
              "canonicalReference": "@thirdweb-dev/solana!Program#fetch:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fetch(accountName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", address: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"@project-serum/anchor/dist/cjs/program/namespace/types\")."
                },
                {
                  "kind": "Reference",
                  "text": "TypeDef",
                  "canonicalReference": "@project-serum/anchor!TypeDef:type"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"@project-serum/anchor/dist/cjs/idl\")."
                },
                {
                  "kind": "Reference",
                  "text": "IdlAccountDef",
                  "canonicalReference": "@project-serum/anchor!IdlAccountDef:type"
                },
                {
                  "kind": "Content",
                  "text": ", import(\"@project-serum/anchor\")."
                },
                {
                  "kind": "Reference",
                  "text": "IdlTypes",
                  "canonicalReference": "@project-serum/anchor!IdlTypes:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Idl",
                  "canonicalReference": "@project-serum/anchor!Idl:type"
                },
                {
                  "kind": "Content",
                  "text": ">>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 15
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "accountName",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "address",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "fetch"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@thirdweb-dev/solana!ThirdwebSDK:class",
          "docComment": "/**\n * The main entry-point for the thirdweb Solana SDK.\n *\n * @example\n * ```jsx\n * import { ThirdwebSDK } from \"@thirdweb-dev/solana\";\n *\n * // Create SDK on specified network, and then pass a signer\n * const sdk = ThirdwebSDK.fromNetwork(\"devnet\");\n * // Signer can be a keypair or browser wallet adapter\n * sdk.wallet.connect(signer);\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ThirdwebSDK "
            }
          ],
          "releaseTag": "Public",
          "name": "ThirdwebSDK",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@thirdweb-dev/solana!ThirdwebSDK:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `ThirdwebSDK` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(connection: "
                },
                {
                  "kind": "Reference",
                  "text": "Connection",
                  "canonicalReference": "!\"\\\"@solana/web3.js\\\"\".Connection:class"
                },
                {
                  "kind": "Content",
                  "text": ", storage?: "
                },
                {
                  "kind": "Reference",
                  "text": "ThirdwebStorage",
                  "canonicalReference": "@thirdweb-dev/storage!ThirdwebStorage:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "connection",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "storage",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@thirdweb-dev/solana!ThirdwebSDK#deployer:member",
              "docComment": "/**\n * Deploy new programs\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "deployer: "
                },
                {
                  "kind": "Reference",
                  "text": "Deployer",
                  "canonicalReference": "@thirdweb-dev/solana!Deployer:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "deployer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@thirdweb-dev/solana!ThirdwebSDK.fromNetwork:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static fromNetwork(network: "
                },
                {
                  "kind": "Reference",
                  "text": "Network",
                  "canonicalReference": "@thirdweb-dev/solana!Network:type"
                },
                {
                  "kind": "Content",
                  "text": ", storage?: "
                },
                {
                  "kind": "Reference",
                  "text": "ThirdwebStorage",
                  "canonicalReference": "@thirdweb-dev/storage!ThirdwebStorage:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ThirdwebSDK",
                  "canonicalReference": "@thirdweb-dev/solana!ThirdwebSDK:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "network",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "storage",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "name": "fromNetwork"
            },
            {
              "kind": "Method",
              "canonicalReference": "@thirdweb-dev/solana!ThirdwebSDK#getNFTCollection:member(1)",
              "docComment": "/**\n * Get an SDK interface for an NFT Collection program\n *\n * @param address - Address of the program\n *\n * @returns SDK interface for the program\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getNFTCollection(address: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "NFTCollection",
                  "canonicalReference": "@thirdweb-dev/solana!NFTCollection:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "address",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "getNFTCollection"
            },
            {
              "kind": "Method",
              "canonicalReference": "@thirdweb-dev/solana!ThirdwebSDK#getNFTDrop:member(1)",
              "docComment": "/**\n * Get an SDK interface for an NFT Drop program\n *\n * @param address - Address of the program\n *\n * @returns SDK interface for the program\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getNFTDrop(address: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "NFTDrop",
                  "canonicalReference": "@thirdweb-dev/solana!NFTDrop:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "address",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "getNFTDrop"
            },
            {
              "kind": "Method",
              "canonicalReference": "@thirdweb-dev/solana!ThirdwebSDK#getProgram:member(1)",
              "docComment": "/**\n * Get an SDK interface for a deployed program\n *\n * @param address - Address of the program\n *\n * @returns SDK interface for the program\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getProgram(address: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Program",
                  "canonicalReference": "@thirdweb-dev/solana!Program:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "address",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "getProgram"
            },
            {
              "kind": "Method",
              "canonicalReference": "@thirdweb-dev/solana!ThirdwebSDK#getProgramWithIdl:member(1)",
              "docComment": "/**\n * Get an SDK interface for a deployed program\n *\n * @param address - Address of the program\n *\n * @param idl - The IDL of the program\n *\n * @returns SDK interface for the program\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getProgramWithIdl(address: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", idl: "
                },
                {
                  "kind": "Reference",
                  "text": "Idl",
                  "canonicalReference": "@project-serum/anchor!Idl:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Program",
                  "canonicalReference": "@thirdweb-dev/solana!Program:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "address",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "idl",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "getProgramWithIdl"
            },
            {
              "kind": "Method",
              "canonicalReference": "@thirdweb-dev/solana!ThirdwebSDK#getToken:member(1)",
              "docComment": "/**\n * Get an SDK interface for an Token program\n *\n * @param address - Address of the program\n *\n * @returns SDK interface for the program\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getToken(address: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Token",
                  "canonicalReference": "@thirdweb-dev/solana!Token:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "address",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "getToken"
            },
            {
              "kind": "Property",
              "canonicalReference": "@thirdweb-dev/solana!ThirdwebSDK#registry:member",
              "docComment": "/**\n * Handles getting data about accounts and programs associated with a wallet\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "registry: "
                },
                {
                  "kind": "Reference",
                  "text": "Registry",
                  "canonicalReference": "@thirdweb-dev/solana!~Registry:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "registry",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@thirdweb-dev/solana!ThirdwebSDK#wallet:member",
              "docComment": "/**\n * Manage and get info about the connected wallet\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "wallet: "
                },
                {
                  "kind": "Reference",
                  "text": "UserWallet",
                  "canonicalReference": "@thirdweb-dev/solana!UserWallet:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "wallet",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@thirdweb-dev/solana!Token:class",
          "docComment": "/**\n * Standard token or cryptocurrency.\n *\n * @example\n * ```jsx\n * import { ThirdwebSDK } from \"@thirdweb-dev/solana\";\n *\n * const sdk = ThirdwebSDK.fromNetwork(\"devnet\");\n * sdk.wallet.connect(signer);\n *\n * // Get the interface for your token program\n * const program = await sdk.getToken(\"{{contract_address}}\");\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Token "
            }
          ],
          "releaseTag": "Public",
          "name": "Token",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@thirdweb-dev/solana!Token:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `Token` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(tokenMintAddress: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", metaplex: "
                },
                {
                  "kind": "Reference",
                  "text": "Metaplex",
                  "canonicalReference": "@metaplex-foundation/js!Metaplex:class"
                },
                {
                  "kind": "Content",
                  "text": ", storage: "
                },
                {
                  "kind": "Reference",
                  "text": "ThirdwebStorage",
                  "canonicalReference": "@thirdweb-dev/storage!ThirdwebStorage:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "tokenMintAddress",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "metaplex",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "storage",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@thirdweb-dev/solana!Token#accountType:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "accountType: "
                },
                {
                  "kind": "Content",
                  "text": "\"token\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "accountType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@thirdweb-dev/solana!Token#balance:member(1)",
              "docComment": "/**\n * Get the token balance of the connected wallet\n *\n * @returns the currency value balance\n *\n * @example\n * ```jsx\n * const balance = await program.balance();\n * console.log(balance.displayValue);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "balance(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "CurrencyValue",
                  "canonicalReference": "@thirdweb-dev/solana!CurrencyValue:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "balance"
            },
            {
              "kind": "Method",
              "canonicalReference": "@thirdweb-dev/solana!Token#balanceOf:member(1)",
              "docComment": "/**\n * Get the token balance of the specified wallet\n *\n * @param walletAddress - the wallet address to get the balance of\n *\n * @returns the currency value balance\n *\n * @example\n * ```jsx\n * const address = \"...\"\n * const balance = await program.balanceOf(address);\n * console.log(balance.displayValue);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "balanceOf(walletAddress: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "CurrencyValue",
                  "canonicalReference": "@thirdweb-dev/solana!CurrencyValue:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "walletAddress",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "balanceOf"
            },
            {
              "kind": "Method",
              "canonicalReference": "@thirdweb-dev/solana!Token#getMetadata:member(1)",
              "docComment": "/**\n * Get the metadata for this token including the name, supply, and decimals.\n *\n * @returns Token metadata\n *\n * @example\n * ```jsx\n * const metadata = await program.getMetadata();\n * console.log(metadata.supply);\n * console.log(metadata.decimals);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getMetadata(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TokenMetadata",
                  "canonicalReference": "@thirdweb-dev/solana!TokenMetadata:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getMetadata"
            },
            {
              "kind": "Method",
              "canonicalReference": "@thirdweb-dev/solana!Token#mint:member(1)",
              "docComment": "/**\n * Mints the specified amount of new tokens\n *\n * @param amount - The amount of tokens to mint\n *\n * @returns the transaction result of the mint\n *\n * @example\n * ```jsx\n * const tx = await program.mint(1);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "mint(amount: "
                },
                {
                  "kind": "Reference",
                  "text": "Amount",
                  "canonicalReference": "@thirdweb-dev/solana!Amount:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TransactionResult",
                  "canonicalReference": "@thirdweb-dev/solana!TransactionResult:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "mint"
            },
            {
              "kind": "Property",
              "canonicalReference": "@thirdweb-dev/solana!Token#publicKey:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "publicKey: "
                },
                {
                  "kind": "Reference",
                  "text": "PublicKey",
                  "canonicalReference": "!\"\\\"@solana/web3.js\\\"\".PublicKey:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "publicKey",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@thirdweb-dev/solana!Token#totalSupply:member(1)",
              "docComment": "/**\n * Get the total minted supply of this token\n *\n * @returns the total supply\n *\n * @example\n * ```jsx\n * const supply = await program.totalSupply();\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "totalSupply(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "CurrencyValue",
                  "canonicalReference": "@thirdweb-dev/solana!CurrencyValue:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "totalSupply"
            },
            {
              "kind": "Method",
              "canonicalReference": "@thirdweb-dev/solana!Token#transfer:member(1)",
              "docComment": "/**\n * Transfer the specified amount of tokens to another wallet\n *\n * @param receiverAddress - The address to send the tokens to\n *\n * @param amount - The amount of tokens to send\n *\n * @returns the transaction result of the transfer\n *\n * @example\n * ```jsx\n * const to = \"...\";\n * const amount = 1;\n * const tx = await program.transfer(to, amount);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "transfer(receiverAddress: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", amount: "
                },
                {
                  "kind": "Reference",
                  "text": "Amount",
                  "canonicalReference": "@thirdweb-dev/solana!Amount:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TransactionResult",
                  "canonicalReference": "@thirdweb-dev/solana!TransactionResult:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "receiverAddress",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "transfer"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@thirdweb-dev/solana!TokenMetadata:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type TokenMetadata = "
            },
            {
              "kind": "Reference",
              "text": "z.output",
              "canonicalReference": "zod!output:type"
            },
            {
              "kind": "Content",
              "text": "<typeof "
            },
            {
              "kind": "Reference",
              "text": "CommonFungibleTokenOutput",
              "canonicalReference": "@thirdweb-dev/solana!CommonFungibleTokenOutput:var"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "TokenMetadata",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@thirdweb-dev/solana!UserWallet:class",
          "docComment": "/**\n * Handle and view info about the wallet connected to the SDK.\n *\n * @example\n * ```jsx\n * // Connect a wallet to the SDK, pass in a keypair or browser wallet adapter\n * sdk.wallet.connect(signer)\n *\n * // Then you can read data about the connected wallet\n * const address = sdk.wallet.getAddress();\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class UserWallet "
            }
          ],
          "releaseTag": "Public",
          "name": "UserWallet",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@thirdweb-dev/solana!UserWallet:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `UserWallet` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(metaplex: "
                },
                {
                  "kind": "Reference",
                  "text": "Metaplex",
                  "canonicalReference": "@metaplex-foundation/js!Metaplex:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "metaplex",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@thirdweb-dev/solana!UserWallet#connect:member(1)",
              "docComment": "/**\n * Connect a signer to the SDK. Can pass in a keypair or browser wallet adapter\n *\n * @param wallet - The signer to connect to the SDK\n *\n * @example\n * ```jsx\n * const signer = Keypair.generate();\n * sdk.wallet.connect(signer);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "connect(wallet: "
                },
                {
                  "kind": "Reference",
                  "text": "WalletSigner",
                  "canonicalReference": "@thirdweb-dev/solana!WalletSigner:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "wallet",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "connect"
            },
            {
              "kind": "Method",
              "canonicalReference": "@thirdweb-dev/solana!UserWallet#disconnect:member(1)",
              "docComment": "/**\n * Disconnect the connect wallet from the SDK\n *\n * @example\n * ```jsx\n * sdk.wallet.disconnect();\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disconnect(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "disconnect"
            },
            {
              "kind": "Property",
              "canonicalReference": "@thirdweb-dev/solana!UserWallet#events:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "events: "
                },
                {
                  "kind": "Reference",
                  "text": "EventEmitter",
                  "canonicalReference": "@thirdweb-dev/solana!~EventEmitter"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UserWalletEvents",
                  "canonicalReference": "@thirdweb-dev/solana!UserWalletEvents:interface"
                },
                {
                  "kind": "Content",
                  "text": ", any>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "events",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@thirdweb-dev/solana!UserWallet#getAddress:member(1)",
              "docComment": "/**\n * Get the address of the connected wallet\n *\n * @returns the address of the connected wallet\n *\n * @example\n * ```jsx\n * const address = sdk.wallet.getAddress()\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getAddress(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getAddress"
            },
            {
              "kind": "Method",
              "canonicalReference": "@thirdweb-dev/solana!UserWallet#getBalance:member(1)",
              "docComment": "/**\n * Get the native balance of the connected wallet\n *\n * @returns the native balance currency value\n *\n * @example\n * ```jsx\n * const balance = await sdk.wallet.getBalance();\n * console.log(balance.displayValue);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getBalance(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "CurrencyValue",
                  "canonicalReference": "@thirdweb-dev/solana!CurrencyValue:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getBalance"
            },
            {
              "kind": "Method",
              "canonicalReference": "@thirdweb-dev/solana!UserWallet#getSigner:member(1)",
              "docComment": "/**\n * Get the connected signer\n *\n * @returns the signer\n *\n * @example\n * ```jsx\n * const signer = sdk.wallet.getSigner()\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getSigner(): "
                },
                {
                  "kind": "Content",
                  "text": "import(\"@metaplex-foundation/js/dist/types/plugins/identityModule\")."
                },
                {
                  "kind": "Reference",
                  "text": "IdentityClient",
                  "canonicalReference": "@metaplex-foundation/js!IdentityClient:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getSigner"
            },
            {
              "kind": "Property",
              "canonicalReference": "@thirdweb-dev/solana!UserWallet#signer:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "signer: "
                },
                {
                  "kind": "Reference",
                  "text": "Signer",
                  "canonicalReference": "@metaplex-foundation/js!Signer:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "signer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@thirdweb-dev/solana!UserWalletEvents:interface",
          "docComment": "/**\n * {@link UserWallet} events that you can subscribe to using `sdk.wallet.events`.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UserWalletEvents "
            }
          ],
          "releaseTag": "Public",
          "name": "UserWalletEvents",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@thirdweb-dev/solana!UserWalletEvents#connected:member",
              "docComment": "/**\n * Emitted when `sdk.wallet.connect()` is called.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "connected: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WalletSigner",
                  "canonicalReference": "@thirdweb-dev/solana!WalletSigner:type"
                },
                {
                  "kind": "Content",
                  "text": "]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "connected",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@thirdweb-dev/solana!UserWalletEvents#disconnected:member",
              "docComment": "/**\n * Emitted when `sdk.wallet.disconnect()` is called.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disconnected: "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "disconnected",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        }
      ]
    }
  ]
}
