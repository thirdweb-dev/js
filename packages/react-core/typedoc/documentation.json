{
	"id": 0,
	"name": "@thirdweb-dev/react-core",
	"variant": "project",
	"kind": 1,
	"flags": {},
	"children": [
		{
			"id": 248,
			"name": "ISecureStorage",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Secure storage interface for storing auth tokens.\n\nThe implementation of this interface should provide a secure way to store values. Either by encrypting the values or by storing them in a secure location."
					}
				],
				"blockTags": [
					{
						"tag": "@auth",
						"content": []
					}
				]
			},
			"children": [
				{
					"id": 249,
					"name": "getItem",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/contexts/thirdweb-auth.tsx",
							"line": 10,
							"character": 2,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/contexts/thirdweb-auth.tsx#L10"
						}
					],
					"signatures": [
						{
							"id": 250,
							"name": "getItem",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/evm/contexts/thirdweb-auth.tsx",
									"line": 10,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/contexts/thirdweb-auth.tsx#L10"
								}
							],
							"parameters": [
								{
									"id": 251,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 256,
					"name": "removeItem",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/contexts/thirdweb-auth.tsx",
							"line": 12,
							"character": 2,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/contexts/thirdweb-auth.tsx#L12"
						}
					],
					"signatures": [
						{
							"id": 257,
							"name": "removeItem",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/evm/contexts/thirdweb-auth.tsx",
									"line": 12,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/contexts/thirdweb-auth.tsx#L12"
								}
							],
							"parameters": [
								{
									"id": 258,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 252,
					"name": "setItem",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/contexts/thirdweb-auth.tsx",
							"line": 11,
							"character": 2,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/contexts/thirdweb-auth.tsx#L11"
						}
					],
					"signatures": [
						{
							"id": 253,
							"name": "setItem",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/evm/contexts/thirdweb-auth.tsx",
									"line": 11,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/contexts/thirdweb-auth.tsx#L11"
								}
							],
							"parameters": [
								{
									"id": 254,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 255,
									"name": "value",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"children": [
						249,
						256,
						252
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/contexts/thirdweb-auth.tsx",
					"line": 9,
					"character": 17,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/contexts/thirdweb-auth.tsx#L9"
				}
			]
		},
		{
			"id": 244,
			"name": "ThirdwebAuthConfig",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The configuration to use by the React and React Native SDKs with an [auth](https://portal.thirdweb.com/wallets/auth) server."
					}
				],
				"blockTags": [
					{
						"tag": "@auth",
						"content": []
					}
				]
			},
			"children": [
				{
					"id": 245,
					"name": "authUrl",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The backend URL of the authentication endoints. For example, if your endpoints are\nat "
							},
							{
								"kind": "code",
								"text": "`/api/auth/login`"
							},
							{
								"kind": "text",
								"text": ", "
							},
							{
								"kind": "code",
								"text": "`/api/auth/logout`"
							},
							{
								"kind": "text",
								"text": ", etc. then this should be set to "
							},
							{
								"kind": "code",
								"text": "`/api/auth`"
							},
							{
								"kind": "text",
								"text": "."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/contexts/thirdweb-auth.tsx",
							"line": 24,
							"character": 2,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/contexts/thirdweb-auth.tsx#L24"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 246,
					"name": "domain",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The frontend domain used to generate the login payload.\nThis domain should match the domain used on your auth backend."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/contexts/thirdweb-auth.tsx",
							"line": 30,
							"character": 2,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/contexts/thirdweb-auth.tsx#L30"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 247,
					"name": "secureStorage",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Secure storage to use for storing the auth token when using JWT tokens.\n\nDo not use a storage option that stores values accessible outside\nyour application (like localStorage on web environments) since you may\nbe exposing your auth token to malicious actors.\n\n** By default auth uses cookies so no need to set this unless you want to specifically use JWT tokens **"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/contexts/thirdweb-auth.tsx",
							"line": 41,
							"character": 2,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/contexts/thirdweb-auth.tsx#L41"
						}
					],
					"type": {
						"type": "reference",
						"target": 248,
						"name": "ISecureStorage",
						"package": "@thirdweb-dev/react-core"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						245,
						246,
						247
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/contexts/thirdweb-auth.tsx",
					"line": 19,
					"character": 17,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/contexts/thirdweb-auth.tsx#L19"
				}
			]
		},
		{
			"id": 9,
			"name": "ThirdwebProviderCoreProps",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The possible props for the ThirdwebProvider."
					}
				]
			},
			"children": [
				{
					"id": 19,
					"name": "activeChain",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The activeChain prop determines which chain you want your app to be operating on.\n\nThere are 1000+ chains available in the "
							},
							{
								"kind": "code",
								"text": "`@thirdweb-dev/chains`"
							},
							{
								"kind": "text",
								"text": " package. Import the chain you want and pass it to the "
							},
							{
								"kind": "code",
								"text": "`activeChain`"
							},
							{
								"kind": "text",
								"text": " prop.\n\nYou can override the imported object or pass a custom chain object with required properties."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/providers/types.ts",
							"line": 103,
							"character": 2,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/providers/types.ts#L103"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../chains/src/types.ts",
									"qualifiedName": "Chain"
								},
								"name": "Chain",
								"package": "@thirdweb-dev/chains"
							},
							{
								"type": "intersection",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 20,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {}
										}
									}
								]
							},
							{
								"type": "intersection",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 21,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {}
										}
									}
								]
							},
							{
								"type": "indexedAccess",
								"indexType": {
									"type": "literal",
									"value": "chainId"
								},
								"objectType": {
									"type": "indexedAccess",
									"indexType": {
										"type": "intrinsic",
										"name": "number"
									},
									"objectType": {
										"type": "reference",
										"target": -1,
										"name": "TChains",
										"refersToTypeParameter": true
									}
								}
							},
							{
								"type": "indexedAccess",
								"indexType": {
									"type": "literal",
									"value": "slug"
								},
								"objectType": {
									"type": "indexedAccess",
									"indexType": {
										"type": "intrinsic",
										"name": "number"
									},
									"objectType": {
										"type": "reference",
										"target": -1,
										"name": "TChains",
										"refersToTypeParameter": true
									}
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "Omit.activeChain"
					}
				},
				{
					"id": 27,
					"name": "authConfig",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The configuration object for setting up [Auth](https://portal.thirdweb.com/wallets/auth); allowing users to sign in with their wallet."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/providers/types.ts",
							"line": 94,
							"character": 2,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/providers/types.ts#L94"
						}
					],
					"type": {
						"type": "reference",
						"target": 244,
						"name": "ThirdwebAuthConfig",
						"package": "@thirdweb-dev/react-core"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "Omit.authConfig"
					}
				},
				{
					"id": 12,
					"name": "autoConnect",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Whether or not to attempt auto-connect to a wallet."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/core/providers/thirdweb-provider.tsx",
							"line": 55,
							"character": 2,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/providers/thirdweb-provider.tsx#L55"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 16,
					"name": "autoConnectTimeout",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Timeout for auto-connecting wallet in milliseconds\n\nIf wallet fails to connect in this time, it will stop trying to connect and user will have to manually connect\n\nBy default, it is set to "
							},
							{
								"kind": "code",
								"text": "`15000`"
							},
							{
								"kind": "text",
								"text": " milliseconds (15 seconds)"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/core/providers/thirdweb-provider.tsx",
							"line": 76,
							"character": 2,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/providers/thirdweb-provider.tsx#L76"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 15,
					"name": "autoSwitch",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Whether or not to automatically switch to wallet's network to active chain"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/core/providers/thirdweb-provider.tsx",
							"line": 67,
							"character": 2,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/providers/thirdweb-provider.tsx#L67"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 18,
					"name": "clientId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The clientId prop is required to use the thirdweb infrastructure services with the SDK.\n\nYou can get a client ID by creating an API key on [thirdweb dashboard](https://thirdweb.com/dashboard/settings/api-keys)"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/providers/types.ts",
							"line": 119,
							"character": 2,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/providers/types.ts#L119"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "Omit.clientId"
					}
				},
				{
					"id": 11,
					"name": "dAppMeta",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Metadata to pass to wallet connect and walletlink wallet connect. (Used to show *which* dApp is being connected to in mobile wallets that support it)\nDefaults to just the name being passed as "
							},
							{
								"kind": "code",
								"text": "`thirdweb powered dApp`"
							},
							{
								"kind": "text",
								"text": "."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/core/providers/thirdweb-provider.tsx",
							"line": 50,
							"character": 2,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/providers/thirdweb-provider.tsx#L50"
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../wallets/src/core/types/dAppMeta.ts",
							"qualifiedName": "DAppMetaData"
						},
						"name": "DAppMetaData",
						"package": "@thirdweb-dev/wallets"
					}
				},
				{
					"id": 22,
					"name": "queryClient",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "If you are using React Query and have your own "
							},
							{
								"kind": "code",
								"text": "`QueryClient`"
							},
							{
								"kind": "text",
								"text": ", you can pass it as the queryClient prop to use that instead of the SDK's default client."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/core/providers/query-client.tsx",
							"line": 9,
							"character": 2,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/providers/query-client.tsx#L9"
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/queryClient.ts",
							"qualifiedName": "QueryClient"
						},
						"name": "QueryClient",
						"package": "@tanstack/query-core"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "Omit.queryClient"
					}
				},
				{
					"id": 24,
					"name": "sdkOptions",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The thirdweb SDK Options to pass to the thirdweb SDK which includes Gas settings, gasless transactions, RPC configuration, and more.\n\nThis Overrides any of the default values for the SDK. If not provided, it uses sensible defaults."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/providers/types.ts",
							"line": 47,
							"character": 2,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/providers/types.ts#L47"
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Omit"
						},
						"typeArguments": [
							{
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 25,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/sdk/dist/declarations/src/evm/schema/sdk-options.d.ts",
													"line": 189,
													"character": 3
												}
											]
										}
									}
								]
							},
							{
								"type": "literal",
								"value": "chains"
							}
						],
						"name": "Omit",
						"package": "typescript"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "Omit.sdkOptions"
					}
				},
				{
					"id": 28,
					"name": "secretKey",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "secretKey for thirdweb services\nThis is only required if server side rendering is being used."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/providers/types.ts",
							"line": 125,
							"character": 2,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/providers/types.ts#L125"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "Omit.secretKey"
					}
				},
				{
					"id": 26,
					"name": "storageInterface",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Override the default [Storage](https://portal.thirdweb.com/infrastructure/storage/overview) interface used by the SDK.\n\nIt allows you to create an instance of "
							},
							{
								"kind": "code",
								"text": "`ThirdwebStorage`"
							},
							{
								"kind": "text",
								"text": " with your own customized config, and pass it to the SDK.\n\n*This requires the "
							},
							{
								"kind": "code",
								"text": "`@thirdweb-dev/storage`"
							},
							{
								"kind": "text",
								"text": " package to be installed.*"
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```tsx\nimport { ThirdwebSDKProvider } from \"@thirdweb-dev/react\";\nimport {\n  ThirdwebStorage,\n  StorageDownloader,\n  IpfsUploader,\n} from \"@thirdweb-dev/storage\";\n\n// Configure a custom ThirdwebStorage instance\nconst gatewayUrls = {\n  \"ipfs://\": [\n    \"https://gateway.ipfscdn.io/ipfs/\",\n    \"https://cloudflare-ipfs.com/ipfs/\",\n    \"https://ipfs.io/ipfs/\",\n  ],\n};\nconst downloader = new StorageDownloader();\nconst uploader = new IpfsUploader();\nconst storage = new ThirdwebStorage({ uploader, downloader, gatewayUrls });\n\n// Provide the custom storage instance to the SDK\nfunction MyApp() {\n  return (\n    <ThirdwebSDKProvider\n      storageInterface={storage}\n    >\n      <YourApp />\n    </ThirdwebSDKProvider>\n  );\n}\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/providers/types.ts",
							"line": 89,
							"character": 2,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/providers/types.ts#L89"
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../storage/src/types/index.ts",
							"qualifiedName": "IThirdwebStorage"
						},
						"name": "IThirdwebStorage",
						"package": "@thirdweb-dev/storage"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "Omit.storageInterface"
					}
				},
				{
					"id": 23,
					"name": "supportedChains",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of chains supported by your app.\nThere are 1000+ chains available in the "
							},
							{
								"kind": "code",
								"text": "`@thirdweb-dev/chains`"
							},
							{
								"kind": "text",
								"text": " package. You can import the chain you want and pass it to the "
							},
							{
								"kind": "code",
								"text": "`supportedChains`"
							},
							{
								"kind": "text",
								"text": " prop in an array.\n\nIf not provided, it will default to the default supported chains supported by the thirdweb SDK."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```tsx\nimport { Ethereum, Polygon } from \"@thirdweb-dev/chains\";\n\nfunction Example() {\n return (\n   <ThirdwebSDKProvider supportedChains={[ Ethereum, Polygon ]} activeChain={Ethereum}>\n      <App />\n   </ThirdwebSDKProvider>\n )\n}\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/providers/types.ts",
							"line": 29,
							"character": 2,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/providers/types.ts#L29"
						}
					],
					"type": {
						"type": "reference",
						"target": -1,
						"name": "TChains",
						"refersToTypeParameter": true
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "Omit.supportedChains"
					}
				},
				{
					"id": 10,
					"name": "supportedWallets",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of wallets that the dApp supports\nIf not provided, will default to Metamask (injected), Coinbase wallet and Device wallet"
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "You can Import the wallets you want to support from "
									},
									{
										"kind": "code",
										"text": "`@thirdweb-dev/wallets`"
									},
									{
										"kind": "text",
										"text": " and pass them to "
									},
									{
										"kind": "code",
										"text": "`supportedWallets`"
									},
									{
										"kind": "text",
										"text": "\n\n"
									},
									{
										"kind": "code",
										"text": "```jsx title=\"App.jsx\"\nimport { ThirdwebProvider } from \"@thirdweb-dev/react\";\n\nconst App = () => {\n  return (\n    <ThirdwebProvider>\n      <YourApp />\n    </ThirdwebProvider>\n  );\n};\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/core/providers/thirdweb-provider.tsx",
							"line": 44,
							"character": 2,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/providers/thirdweb-provider.tsx#L44"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": 142,
							"name": "WalletConfig",
							"package": "@thirdweb-dev/react-core"
						}
					}
				},
				{
					"id": 13,
					"name": "theme",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/core/providers/thirdweb-provider.tsx",
							"line": 57,
							"character": 2,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/providers/thirdweb-provider.tsx#L57"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "light"
							},
							{
								"type": "literal",
								"value": "dark"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						19,
						27,
						12,
						16,
						15,
						18,
						11,
						22,
						24,
						28,
						26,
						23,
						10,
						13
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/react-core/src/core/providers/thirdweb-provider.tsx",
					"line": 23,
					"character": 17,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/providers/thirdweb-provider.tsx#L23"
				}
			],
			"typeParameters": [
				{
					"id": 29,
					"name": "TChains",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": {
								"sourceFileName": "../chains/src/types.ts",
								"qualifiedName": "Chain"
							},
							"name": "Chain",
							"package": "@thirdweb-dev/chains"
						}
					}
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
						"qualifiedName": "Omit"
					},
					"typeArguments": [
						{
							"type": "reference",
							"target": 1077,
							"typeArguments": [
								{
									"type": "reference",
									"target": -1,
									"name": "TChains",
									"refersToTypeParameter": true
								}
							],
							"name": "ThirdwebSDKProviderProps",
							"package": "@thirdweb-dev/react-core"
						},
						{
							"type": "literal",
							"value": "signer"
						}
					],
					"name": "Omit",
					"package": "typescript"
				}
			]
		},
		{
			"id": 1077,
			"name": "ThirdwebSDKProviderProps",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"children": [
				{
					"id": 1084,
					"name": "activeChain",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The activeChain prop determines which chain you want your app to be operating on.\n\nThere are 1000+ chains available in the "
							},
							{
								"kind": "code",
								"text": "`@thirdweb-dev/chains`"
							},
							{
								"kind": "text",
								"text": " package. Import the chain you want and pass it to the "
							},
							{
								"kind": "code",
								"text": "`activeChain`"
							},
							{
								"kind": "text",
								"text": " prop.\n\nYou can override the imported object or pass a custom chain object with required properties."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/providers/types.ts",
							"line": 103,
							"character": 2,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/providers/types.ts#L103"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../chains/src/types.ts",
									"qualifiedName": "Chain"
								},
								"name": "Chain",
								"package": "@thirdweb-dev/chains"
							},
							{
								"type": "intersection",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1085,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {}
										}
									}
								]
							},
							{
								"type": "intersection",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1086,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {}
										}
									}
								]
							},
							{
								"type": "indexedAccess",
								"indexType": {
									"type": "literal",
									"value": "chainId"
								},
								"objectType": {
									"type": "indexedAccess",
									"indexType": {
										"type": "intrinsic",
										"name": "number"
									},
									"objectType": {
										"type": "reference",
										"target": -1,
										"name": "TChains",
										"refersToTypeParameter": true
									}
								}
							},
							{
								"type": "indexedAccess",
								"indexType": {
									"type": "literal",
									"value": "slug"
								},
								"objectType": {
									"type": "indexedAccess",
									"indexType": {
										"type": "intrinsic",
										"name": "number"
									},
									"objectType": {
										"type": "reference",
										"target": -1,
										"name": "TChains",
										"refersToTypeParameter": true
									}
								}
							}
						]
					}
				},
				{
					"id": 1083,
					"name": "authConfig",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The configuration object for setting up [Auth](https://portal.thirdweb.com/wallets/auth); allowing users to sign in with their wallet."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/providers/types.ts",
							"line": 94,
							"character": 2,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/providers/types.ts#L94"
						}
					],
					"type": {
						"type": "reference",
						"target": 244,
						"name": "ThirdwebAuthConfig",
						"package": "@thirdweb-dev/react-core"
					}
				},
				{
					"id": 1087,
					"name": "clientId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The clientId prop is required to use the thirdweb infrastructure services with the SDK.\n\nYou can get a client ID by creating an API key on [thirdweb dashboard](https://thirdweb.com/dashboard/settings/api-keys)"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/providers/types.ts",
							"line": 119,
							"character": 2,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/providers/types.ts#L119"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1089,
					"name": "queryClient",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "If you are using React Query and have your own "
							},
							{
								"kind": "code",
								"text": "`QueryClient`"
							},
							{
								"kind": "text",
								"text": ", you can pass it as the queryClient prop to use that instead of the SDK's default client."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/core/providers/query-client.tsx",
							"line": 9,
							"character": 2,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/providers/query-client.tsx#L9"
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/queryClient.ts",
							"qualifiedName": "QueryClient"
						},
						"name": "QueryClient",
						"package": "@tanstack/query-core"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "QueryClientProviderProps.queryClient"
					}
				},
				{
					"id": 1080,
					"name": "sdkOptions",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The thirdweb SDK Options to pass to the thirdweb SDK which includes Gas settings, gasless transactions, RPC configuration, and more.\n\nThis Overrides any of the default values for the SDK. If not provided, it uses sensible defaults."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/providers/types.ts",
							"line": 47,
							"character": 2,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/providers/types.ts#L47"
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Omit"
						},
						"typeArguments": [
							{
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1081,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/sdk/dist/declarations/src/evm/schema/sdk-options.d.ts",
													"line": 189,
													"character": 3
												}
											]
										}
									}
								]
							},
							{
								"type": "literal",
								"value": "chains"
							}
						],
						"name": "Omit",
						"package": "typescript"
					}
				},
				{
					"id": 1088,
					"name": "secretKey",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "secretKey for thirdweb services\nThis is only required if server side rendering is being used."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/providers/types.ts",
							"line": 125,
							"character": 2,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/providers/types.ts#L125"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1079,
					"name": "signer",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "A signer is an abstraction of an Ethereum Account, which can be used to sign messages and initiate transactions.\n\nSince the ThirdwebSDKProvider is used when you want to provide your own wallet connection logic, you will need to provide a signer prop to inform the SDK of the wallet you want to use to sign transactions.\n\nLibraries such as ethers.js, web3.js, wagmi, etc. all provide ways to get a signer.\n\nTo use this signer with the SDK, pass it to the "
							},
							{
								"kind": "code",
								"text": "`signer`"
							},
							{
								"kind": "text",
								"text": " prop. If the signer is connected, the SDK will use this wallet to sign transactions for all write operations on the blockchain."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/providers/types.ts",
							"line": 40,
							"character": 2,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/providers/types.ts#L40"
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@ethersproject+abstract-signer@5.7.0/node_modules/@ethersproject/abstract-signer/src.ts/index.ts",
							"qualifiedName": "Signer"
						},
						"name": "Signer",
						"package": "@ethersproject/abstract-signer"
					}
				},
				{
					"id": 1082,
					"name": "storageInterface",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Override the default [Storage](https://portal.thirdweb.com/infrastructure/storage/overview) interface used by the SDK.\n\nIt allows you to create an instance of "
							},
							{
								"kind": "code",
								"text": "`ThirdwebStorage`"
							},
							{
								"kind": "text",
								"text": " with your own customized config, and pass it to the SDK.\n\n*This requires the "
							},
							{
								"kind": "code",
								"text": "`@thirdweb-dev/storage`"
							},
							{
								"kind": "text",
								"text": " package to be installed.*"
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```tsx\nimport { ThirdwebSDKProvider } from \"@thirdweb-dev/react\";\nimport {\n  ThirdwebStorage,\n  StorageDownloader,\n  IpfsUploader,\n} from \"@thirdweb-dev/storage\";\n\n// Configure a custom ThirdwebStorage instance\nconst gatewayUrls = {\n  \"ipfs://\": [\n    \"https://gateway.ipfscdn.io/ipfs/\",\n    \"https://cloudflare-ipfs.com/ipfs/\",\n    \"https://ipfs.io/ipfs/\",\n  ],\n};\nconst downloader = new StorageDownloader();\nconst uploader = new IpfsUploader();\nconst storage = new ThirdwebStorage({ uploader, downloader, gatewayUrls });\n\n// Provide the custom storage instance to the SDK\nfunction MyApp() {\n  return (\n    <ThirdwebSDKProvider\n      storageInterface={storage}\n    >\n      <YourApp />\n    </ThirdwebSDKProvider>\n  );\n}\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/providers/types.ts",
							"line": 89,
							"character": 2,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/providers/types.ts#L89"
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../storage/src/types/index.ts",
							"qualifiedName": "IThirdwebStorage"
						},
						"name": "IThirdwebStorage",
						"package": "@thirdweb-dev/storage"
					}
				},
				{
					"id": 1078,
					"name": "supportedChains",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of chains supported by your app.\nThere are 1000+ chains available in the "
							},
							{
								"kind": "code",
								"text": "`@thirdweb-dev/chains`"
							},
							{
								"kind": "text",
								"text": " package. You can import the chain you want and pass it to the "
							},
							{
								"kind": "code",
								"text": "`supportedChains`"
							},
							{
								"kind": "text",
								"text": " prop in an array.\n\nIf not provided, it will default to the default supported chains supported by the thirdweb SDK."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```tsx\nimport { Ethereum, Polygon } from \"@thirdweb-dev/chains\";\n\nfunction Example() {\n return (\n   <ThirdwebSDKProvider supportedChains={[ Ethereum, Polygon ]} activeChain={Ethereum}>\n      <App />\n   </ThirdwebSDKProvider>\n )\n}\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/providers/types.ts",
							"line": 29,
							"character": 2,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/providers/types.ts#L29"
						}
					],
					"type": {
						"type": "reference",
						"target": -1,
						"name": "TChains",
						"refersToTypeParameter": true
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1084,
						1083,
						1087,
						1089,
						1080,
						1088,
						1079,
						1082,
						1078
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/providers/types.ts",
					"line": 8,
					"character": 17,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/providers/types.ts#L8"
				}
			],
			"typeParameters": [
				{
					"id": 1090,
					"name": "TChains",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": {
								"sourceFileName": "../chains/src/types.ts",
								"qualifiedName": "Chain"
							},
							"name": "Chain",
							"package": "@thirdweb-dev/chains"
						}
					}
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "src/core/providers/query-client.tsx",
						"qualifiedName": "QueryClientProviderProps"
					},
					"name": "QueryClientProviderProps",
					"package": "@thirdweb-dev/react-core"
				}
			]
		},
		{
			"id": 987,
			"name": "UserWithData",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [],
				"blockTags": [
					{
						"tag": "@auth",
						"content": []
					}
				]
			},
			"children": [
				{
					"id": 989,
					"name": "address",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/auth/dist/declarations/src/core/schema/common.d.ts",
							"line": 12,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "User.address"
					}
				},
				{
					"id": 988,
					"name": "data",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/auth/useUser.ts",
							"line": 15,
							"character": 2,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/auth/useUser.ts#L15"
						}
					],
					"type": {
						"type": "reference",
						"target": -1,
						"name": "TData",
						"refersToTypeParameter": true
					}
				},
				{
					"id": 990,
					"name": "session",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/auth/dist/declarations/src/core/schema/common.d.ts",
							"line": 13,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"target": -1,
						"name": "TContext",
						"refersToTypeParameter": true
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "User.session"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						989,
						988,
						990
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/auth/useUser.ts",
					"line": 11,
					"character": 17,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/auth/useUser.ts#L11"
				}
			],
			"typeParameters": [
				{
					"id": 991,
					"name": "TData",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../auth/src/core/schema/common.ts",
							"qualifiedName": "Json"
						},
						"name": "Json",
						"package": "@thirdweb-dev/auth"
					},
					"default": {
						"type": "reference",
						"target": {
							"sourceFileName": "../auth/src/core/schema/common.ts",
							"qualifiedName": "Json"
						},
						"name": "Json",
						"package": "@thirdweb-dev/auth"
					}
				},
				{
					"id": 992,
					"name": "TContext",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../auth/src/core/schema/common.ts",
							"qualifiedName": "Json"
						},
						"name": "Json",
						"package": "@thirdweb-dev/auth"
					},
					"default": {
						"type": "reference",
						"target": {
							"sourceFileName": "../auth/src/core/schema/common.ts",
							"qualifiedName": "Json"
						},
						"name": "Json",
						"package": "@thirdweb-dev/auth"
					}
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../auth/src/core/schema/common.ts",
						"qualifiedName": "User"
					},
					"typeArguments": [
						{
							"type": "reference",
							"target": -1,
							"name": "TContext",
							"refersToTypeParameter": true
						}
					],
					"name": "User",
					"package": "@thirdweb-dev/auth"
				}
			]
		},
		{
			"id": 1189,
			"name": "AcceptDirectOffer",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [],
				"blockTags": [
					{
						"tag": "@marketplace",
						"content": []
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/types.ts",
					"line": 258,
					"character": 12,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L258"
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 1190,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 1192,
							"name": "addressOfOfferor",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The wallet address of the user who made the offer you wish to accept.\n\nThe "
									},
									{
										"kind": "code",
										"text": "`useContractEvents`"
									},
									{
										"kind": "text",
										"text": " hook can be used to read all "
									},
									{
										"kind": "code",
										"text": "`\"NewOffer\"`"
									},
									{
										"kind": "text",
										"text": " events on your "
									},
									{
										"kind": "code",
										"text": "`Marketplace`"
									},
									{
										"kind": "text",
										"text": " contract."
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/react-core/src/evm/types.ts",
									"line": 268,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L268"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1191,
							"name": "listingId",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The "
									},
									{
										"kind": "code",
										"text": "`listingId`"
									},
									{
										"kind": "text",
										"text": " of the listing you wish to accept. Each listing has a unique "
									},
									{
										"kind": "code",
										"text": "`listingId`"
									},
									{
										"kind": "text",
										"text": " on the "
									},
									{
										"kind": "code",
										"text": "`Marketplace`"
									},
									{
										"kind": "text",
										"text": " contract."
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/react-core/src/evm/types.ts",
									"line": 262,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L262"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts",
									"qualifiedName": "BigNumberish"
								},
								"name": "BigNumberish",
								"package": "@ethersproject/bignumber"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								1192,
								1191
							]
						}
					],
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/types.ts",
							"line": 258,
							"character": 32,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L258"
						}
					]
				}
			}
		},
		{
			"id": 1142,
			"name": "AirdropNFTParams",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The params to pass to "
					},
					{
						"kind": "code",
						"text": "`useTransferBatchNFT`"
					},
					{
						"kind": "text",
						"text": "."
					}
				],
				"blockTags": [
					{
						"tag": "@nft",
						"content": []
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/types.ts",
					"line": 123,
					"character": 12,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L123"
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 1143,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 1145,
							"name": "addresses",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/evm/types.ts",
									"line": 125,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L125"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../sdk/src/evm/types/airdrop/airdrop.ts",
									"qualifiedName": "AirdropInput"
								},
								"name": "AirdropInput",
								"package": "@thirdweb-dev/sdk"
							}
						},
						{
							"id": 1144,
							"name": "tokenId",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/evm/types.ts",
									"line": 124,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L124"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts",
									"qualifiedName": "BigNumberish"
								},
								"name": "BigNumberish",
								"package": "@ethersproject/bignumber"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								1145,
								1144
							]
						}
					],
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/types.ts",
							"line": 123,
							"character": 31,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L123"
						}
					]
				}
			}
		},
		{
			"id": 1158,
			"name": "BurnNFTParams",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The params for the "
					},
					{
						"kind": "code",
						"text": "`useBurnNFT`"
					},
					{
						"kind": "text",
						"text": " hook mutation."
					}
				],
				"blockTags": [
					{
						"tag": "@nft",
						"content": []
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/types.ts",
					"line": 163,
					"character": 12,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L163"
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 1159,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 1161,
							"name": "amount",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/react-core/src/evm/types.ts",
									"line": 163,
									"character": 53,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L163"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../sdk/src/evm/types/currency.ts",
									"qualifiedName": "Amount"
								},
								"name": "Amount",
								"package": "@thirdweb-dev/sdk"
							}
						},
						{
							"id": 1160,
							"name": "tokenId",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/evm/types.ts",
									"line": 163,
									"character": 30,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L163"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts",
									"qualifiedName": "BigNumberish"
								},
								"name": "BigNumberish",
								"package": "@ethersproject/bignumber"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								1161,
								1160
							]
						}
					],
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/types.ts",
							"line": 163,
							"character": 28,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L163"
						}
					]
				}
			}
		},
		{
			"id": 1196,
			"name": "BuyNowParams",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [],
				"blockTags": [
					{
						"tag": "@marketplace",
						"content": []
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/types.ts",
					"line": 281,
					"character": 12,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L281"
				}
			],
			"typeParameters": [
				{
					"id": 1205,
					"name": "TListingType",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"default": {
						"type": "reference",
						"target": {
							"sourceFileName": "../sdk/src/evm/enums/marketplace/ListingType.ts",
							"qualifiedName": "ListingType"
						},
						"name": "ListingType",
						"package": "@thirdweb-dev/sdk"
					}
				}
			],
			"type": {
				"type": "conditional",
				"checkType": {
					"type": "reference",
					"target": -1,
					"name": "TListingType",
					"refersToTypeParameter": true
				},
				"extendsType": {
					"type": "reference",
					"target": {
						"sourceFileName": "../sdk/src/evm/enums/marketplace/ListingType.ts",
						"qualifiedName": "ListingType.Direct"
					},
					"name": "ListingType.Direct",
					"package": "@thirdweb-dev/sdk"
				},
				"trueType": {
					"type": "reflection",
					"declaration": {
						"id": 1197,
						"name": "__type",
						"variant": "declaration",
						"kind": 65536,
						"flags": {},
						"children": [
							{
								"id": 1200,
								"name": "buyAmount",
								"variant": "declaration",
								"kind": 1024,
								"flags": {},
								"comment": {
									"summary": [
										{
											"kind": "text",
											"text": "The amount of tokens you want to buy from the listing.\n\nApplicable for ERC1155 listings only, should always be "
										},
										{
											"kind": "code",
											"text": "`1`"
										},
										{
											"kind": "text",
											"text": " for ERC721 listings."
										}
									]
								},
								"sources": [
									{
										"fileName": "packages/react-core/src/evm/types.ts",
										"line": 297,
										"character": 8,
										"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L297"
									}
								],
								"type": {
									"type": "reference",
									"target": {
										"sourceFileName": "../../node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts",
										"qualifiedName": "BigNumberish"
									},
									"name": "BigNumberish",
									"package": "@ethersproject/bignumber"
								}
							},
							{
								"id": 1201,
								"name": "buyForWallet",
								"variant": "declaration",
								"kind": 1024,
								"flags": {
									"isOptional": true
								},
								"comment": {
									"summary": [
										{
											"kind": "text",
											"text": "Optionally, specify a different wallet address to buy the listing for."
										}
									]
								},
								"sources": [
									{
										"fileName": "packages/react-core/src/evm/types.ts",
										"line": 301,
										"character": 8,
										"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L301"
									}
								],
								"type": {
									"type": "reference",
									"target": 1126,
									"name": "WalletAddress",
									"package": "@thirdweb-dev/react-core"
								}
							},
							{
								"id": 1198,
								"name": "id",
								"variant": "declaration",
								"kind": 1024,
								"flags": {},
								"comment": {
									"summary": [
										{
											"kind": "text",
											"text": "The ID of the listing you want to buy."
										}
									]
								},
								"sources": [
									{
										"fileName": "packages/react-core/src/evm/types.ts",
										"line": 287,
										"character": 8,
										"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L287"
									}
								],
								"type": {
									"type": "reference",
									"target": {
										"sourceFileName": "../../node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts",
										"qualifiedName": "BigNumberish"
									},
									"name": "BigNumberish",
									"package": "@ethersproject/bignumber"
								}
							},
							{
								"id": 1199,
								"name": "type",
								"variant": "declaration",
								"kind": 1024,
								"flags": {},
								"comment": {
									"summary": [
										{
											"kind": "text",
											"text": "The type of listing. Either ListingType.Direct (0) or ListingType.Auction (1)."
										}
									]
								},
								"sources": [
									{
										"fileName": "packages/react-core/src/evm/types.ts",
										"line": 291,
										"character": 8,
										"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L291"
									}
								],
								"type": {
									"type": "reference",
									"target": {
										"sourceFileName": "../sdk/src/evm/enums/marketplace/ListingType.ts",
										"qualifiedName": "ListingType.Direct"
									},
									"name": "ListingType.Direct",
									"package": "@thirdweb-dev/sdk"
								}
							}
						],
						"groups": [
							{
								"title": "Properties",
								"children": [
									1200,
									1201,
									1198,
									1199
								]
							}
						],
						"sources": [
							{
								"fileName": "packages/react-core/src/evm/types.ts",
								"line": 283,
								"character": 6,
								"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L283"
							}
						]
					}
				},
				"falseType": {
					"type": "reflection",
					"declaration": {
						"id": 1202,
						"name": "__type",
						"variant": "declaration",
						"kind": 65536,
						"flags": {},
						"children": [
							{
								"id": 1203,
								"name": "id",
								"variant": "declaration",
								"kind": 1024,
								"flags": {},
								"comment": {
									"summary": [
										{
											"kind": "text",
											"text": "The ID of the listing you want to buy."
										}
									]
								},
								"sources": [
									{
										"fileName": "packages/react-core/src/evm/types.ts",
										"line": 307,
										"character": 8,
										"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L307"
									}
								],
								"type": {
									"type": "reference",
									"target": {
										"sourceFileName": "../../node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts",
										"qualifiedName": "BigNumberish"
									},
									"name": "BigNumberish",
									"package": "@ethersproject/bignumber"
								}
							},
							{
								"id": 1204,
								"name": "type",
								"variant": "declaration",
								"kind": 1024,
								"flags": {},
								"comment": {
									"summary": [
										{
											"kind": "text",
											"text": "The type of listing. Either ListingType.Direct (0) or ListingType.Auction (1)."
										}
									]
								},
								"sources": [
									{
										"fileName": "packages/react-core/src/evm/types.ts",
										"line": 311,
										"character": 8,
										"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L311"
									}
								],
								"type": {
									"type": "reference",
									"target": {
										"sourceFileName": "../sdk/src/evm/enums/marketplace/ListingType.ts",
										"qualifiedName": "ListingType.Auction"
									},
									"name": "ListingType.Auction",
									"package": "@thirdweb-dev/sdk"
								}
							}
						],
						"groups": [
							{
								"title": "Properties",
								"children": [
									1203,
									1204
								]
							}
						],
						"sources": [
							{
								"fileName": "packages/react-core/src/evm/types.ts",
								"line": 303,
								"character": 6,
								"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L303"
							}
						]
					}
				}
			}
		},
		{
			"id": 275,
			"name": "ClaimIneligibilityParams",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The options to be passed as the second parameter to the "
					},
					{
						"kind": "code",
						"text": "`useClaimIneligibilityReasons`"
					},
					{
						"kind": "text",
						"text": " hook."
					}
				],
				"blockTags": [
					{
						"tag": "@claimConditions",
						"content": []
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/claim-conditions.ts",
					"line": 34,
					"character": 12,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/claim-conditions.ts#L34"
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 276,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 278,
							"name": "quantity",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/evm/hooks/async/claim-conditions.ts",
									"line": 38,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/claim-conditions.ts#L38"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 277,
							"name": "walletAddress",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/evm/hooks/async/claim-conditions.ts",
									"line": 36,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/claim-conditions.ts#L36"
								}
							],
							"type": {
								"type": "reference",
								"target": 1126,
								"name": "WalletAddress",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								278,
								277
							]
						}
					],
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/claim-conditions.ts",
							"line": 34,
							"character": 39,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/claim-conditions.ts#L34"
						}
					]
				}
			}
		},
		{
			"id": 1173,
			"name": "ClaimNFTParams",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The params for the "
					},
					{
						"kind": "code",
						"text": "`useClaimNFT`"
					},
					{
						"kind": "text",
						"text": " hook mutation."
					}
				],
				"blockTags": [
					{
						"tag": "@nftDrop",
						"content": []
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/types.ts",
					"line": 221,
					"character": 12,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L221"
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 1174,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 1177,
							"name": "options",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/react-core/src/evm/types.ts",
									"line": 224,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L224"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../sdk/src/evm/types/claim-conditions/claim-conditions.ts",
									"qualifiedName": "ClaimOptions"
								},
								"name": "ClaimOptions",
								"package": "@thirdweb-dev/sdk"
							}
						},
						{
							"id": 1176,
							"name": "quantity",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/evm/types.ts",
									"line": 223,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L223"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts",
									"qualifiedName": "BigNumberish"
								},
								"name": "BigNumberish",
								"package": "@ethersproject/bignumber"
							}
						},
						{
							"id": 1175,
							"name": "to",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/react-core/src/evm/types.ts",
									"line": 222,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L222"
								}
							],
							"type": {
								"type": "reference",
								"target": 1126,
								"name": "WalletAddress",
								"package": "@thirdweb-dev/react-core"
							}
						},
						{
							"id": 1178,
							"name": "tokenId",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "tokenId is only used for ERC1155 tokens"
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/react-core/src/evm/types.ts",
									"line": 228,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L228"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts",
									"qualifiedName": "BigNumberish"
								},
								"name": "BigNumberish",
								"package": "@ethersproject/bignumber"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								1177,
								1176,
								1175,
								1178
							]
						}
					],
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/types.ts",
							"line": 221,
							"character": 29,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L221"
						}
					]
				}
			}
		},
		{
			"id": 1179,
			"name": "ClaimNFTReturnType",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The return type of the "
					},
					{
						"kind": "code",
						"text": "`useClaimNFT`"
					},
					{
						"kind": "text",
						"text": " hook."
					}
				],
				"blockTags": [
					{
						"tag": "@nftDrop",
						"content": []
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/types.ts",
					"line": 235,
					"character": 12,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L235"
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Awaited"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "ReturnType"
								},
								"typeArguments": [
									{
										"type": "indexedAccess",
										"indexType": {
											"type": "literal",
											"value": "claimTo"
										},
										"objectType": {
											"type": "reference",
											"target": {
												"sourceFileName": "../sdk/src/evm/core/classes/erc-721.ts",
												"qualifiedName": "Erc721"
											},
											"name": "Erc721",
											"package": "@thirdweb-dev/sdk"
										}
									}
								],
								"name": "ReturnType",
								"package": "typescript"
							}
						],
						"name": "Awaited",
						"package": "typescript"
					},
					{
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Awaited"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "ReturnType"
								},
								"typeArguments": [
									{
										"type": "indexedAccess",
										"indexType": {
											"type": "literal",
											"value": "claimTo"
										},
										"objectType": {
											"type": "reference",
											"target": {
												"sourceFileName": "../sdk/src/evm/core/classes/erc-1155.ts",
												"qualifiedName": "Erc1155"
											},
											"name": "Erc1155",
											"package": "@thirdweb-dev/sdk"
										}
									}
								],
								"name": "ReturnType",
								"package": "typescript"
							}
						],
						"name": "Awaited",
						"package": "typescript"
					}
				]
			}
		},
		{
			"id": 1206,
			"name": "ClaimTokenParams",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [],
				"blockTags": [
					{
						"tag": "@token",
						"content": []
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/types.ts",
					"line": 336,
					"character": 12,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L336"
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 1207,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 1209,
							"name": "amount",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/evm/types.ts",
									"line": 338,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L338"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../sdk/src/evm/types/currency.ts",
									"qualifiedName": "Amount"
								},
								"name": "Amount",
								"package": "@thirdweb-dev/sdk"
							}
						},
						{
							"id": 1210,
							"name": "checkERC20Allowance",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/react-core/src/evm/types.ts",
									"line": 339,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L339"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 1208,
							"name": "to",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/evm/types.ts",
									"line": 337,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L337"
								}
							],
							"type": {
								"type": "reference",
								"target": 1126,
								"name": "WalletAddress",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								1209,
								1210,
								1208
							]
						}
					],
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/types.ts",
							"line": 336,
							"character": 31,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L336"
						}
					]
				}
			}
		},
		{
			"id": 160,
			"name": "ConnectUIProps",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [],
				"blockTags": [
					{
						"tag": "@wallet",
						"content": []
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/react-core/src/core/types/wallet.ts",
					"line": 78,
					"character": 12,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L78"
				}
			],
			"typeParameters": [
				{
					"id": 202,
					"name": "I",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"type": {
						"type": "reference",
						"target": 232,
						"name": "WalletInstance",
						"package": "@thirdweb-dev/react-core"
					},
					"default": {
						"type": "reference",
						"target": 232,
						"name": "WalletInstance",
						"package": "@thirdweb-dev/react-core"
					}
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 161,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 184,
							"name": "connect",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/types/wallet.ts",
									"line": 153,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L153"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 185,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/react-core/src/core/types/wallet.ts",
											"line": 153,
											"character": 11,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L153"
										}
									],
									"signatures": [
										{
											"id": 186,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "connect wallet"
													}
												],
												"blockTags": [
													{
														"tag": "@example",
														"content": [
															{
																"kind": "code",
																"text": "```tsx\nconst { connect } = props;\n\nasync function handleConnect() {\n  const wallet = await connect(someOptions);\n  console.log('connected to', wallet);\n}\n```"
															},
															{
																"kind": "text",
																"text": "\n\nIf you need more control over the connection process, you can manually create wallet instance and call the "
															},
															{
																"kind": "code",
																"text": "`connect`"
															},
															{
																"kind": "text",
																"text": " method of the wallet instance instead and use "
															},
															{
																"kind": "code",
																"text": "`setConnectedWallet`"
															},
															{
																"kind": "text",
																"text": " and "
															},
															{
																"kind": "code",
																"text": "`setConnectionStatus`"
															},
															{
																"kind": "text",
																"text": " to set the connected wallet and connection status."
															}
														]
													}
												]
											},
											"parameters": [
												{
													"id": 187,
													"name": "args",
													"variant": "param",
													"kind": 32768,
													"flags": {
														"isRest": true
													},
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "src/core/types/wallet.ts",
															"qualifiedName": "ConnectArgs"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": -1,
																"name": "I",
																"refersToTypeParameter": true
															}
														],
														"name": "ConnectArgs",
														"package": "@thirdweb-dev/react-core"
													}
												}
											],
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Promise"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": -1,
														"name": "I",
														"refersToTypeParameter": true
													}
												],
												"name": "Promise",
												"package": "typescript"
											}
										}
									]
								}
							}
						},
						{
							"id": 165,
							"name": "connected",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/types/wallet.ts",
									"line": 88,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L88"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 166,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/react-core/src/core/types/wallet.ts",
											"line": 88,
											"character": 13,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L88"
										}
									],
									"signatures": [
										{
											"id": 167,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "when the wallet is connected, call this function to indicate that the wallet is connected and it is safe to close the Modal"
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							}
						},
						{
							"id": 200,
							"name": "connectedWallet",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Connected wallet instance\nThis is set by "
									},
									{
										"kind": "code",
										"text": "`connect`"
									},
									{
										"kind": "text",
										"text": " if connection succeeds or it can be set manually by using "
									},
									{
										"kind": "code",
										"text": "`setConnectedWallet`"
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/types/wallet.ts",
									"line": 229,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L229"
								}
							],
							"type": {
								"type": "reference",
								"target": -1,
								"name": "I",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 201,
							"name": "connectedWalletAddress",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Address of the connected wallet instance"
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/types/wallet.ts",
									"line": 234,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L234"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 192,
							"name": "connectionStatus",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Connection status of the wallet"
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/types/wallet.ts",
									"line": 180,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L180"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/types/wallet.ts",
									"qualifiedName": "ConnectionStatus"
								},
								"name": "ConnectionStatus",
								"package": "@thirdweb-dev/react-core"
							}
						},
						{
							"id": 197,
							"name": "createWalletInstance",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/types/wallet.ts",
									"line": 223,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L223"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 198,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/react-core/src/core/types/wallet.ts",
											"line": 223,
											"character": 24,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L223"
										}
									],
									"signatures": [
										{
											"id": 199,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Create an instance of the wallet. This is only relevant if you are manually creating wallet instance and calling the "
													},
													{
														"kind": "code",
														"text": "`wallet.connect`"
													},
													{
														"kind": "text",
														"text": " method. If you are using the "
													},
													{
														"kind": "code",
														"text": "`connect`"
													},
													{
														"kind": "text",
														"text": " function, this is done automatically."
													}
												],
												"blockTags": [
													{
														"tag": "@example",
														"content": [
															{
																"kind": "code",
																"text": "```ts\nconst { createWalletInstance, setConnectionStatus, setConnectedWallet  } = props;\n\nasync function handleConnect() {\n const wallet = createWalletInstance(); // <--\n setConnectionStatus('connecting');\n try {\n   await wallet.connect(someOptions);\n   setConnectedWallet(wallet);\n } catch {\n   setConnectionStatus('disconnected');\n }\n}\n```"
															}
														]
													}
												]
											},
											"type": {
												"type": "reference",
												"target": -1,
												"name": "I",
												"refersToTypeParameter": true
											}
										}
									]
								}
							}
						},
						{
							"id": 172,
							"name": "goBack",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/types/wallet.ts",
									"line": 103,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L103"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 173,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/react-core/src/core/types/wallet.ts",
											"line": 103,
											"character": 10,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L103"
										}
									],
									"signatures": [
										{
											"id": 174,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "go back to the wallet selector screen in connect wallet modal"
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							}
						},
						{
							"id": 162,
							"name": "hide",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/types/wallet.ts",
									"line": 83,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L83"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 163,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/react-core/src/core/types/wallet.ts",
											"line": 83,
											"character": 8,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L83"
										}
									],
									"signatures": [
										{
											"id": 164,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "temporarily hide the ConnectModal\nThis is useful when you want to open another modal and do not want to show the ConnectModal in the background"
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							}
						},
						{
							"id": 168,
							"name": "isOpen",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "indicates whether the connect wallet modal is open or not"
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/types/wallet.ts",
									"line": 93,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L93"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 183,
							"name": "modalSize",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Size of the modal\n\nThis is always "
									},
									{
										"kind": "code",
										"text": "`compact`"
									},
									{
										"kind": "text",
										"text": " on React Native"
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/types/wallet.ts",
									"line": 136,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L136"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "compact"
									},
									{
										"type": "literal",
										"value": "wide"
									}
								]
							}
						},
						{
							"id": 177,
							"name": "selectionData",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "selectionData passed from "
									},
									{
										"kind": "code",
										"text": "`selectUI`"
									},
									{
										"kind": "text",
										"text": "'s "
									},
									{
										"kind": "code",
										"text": "`onSelect`"
									},
									{
										"kind": "text",
										"text": " function"
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/types/wallet.ts",
									"line": 118,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L118"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 193,
							"name": "setConnectedWallet",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/types/wallet.ts",
									"line": 202,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L202"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 194,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/react-core/src/core/types/wallet.ts",
											"line": 202,
											"character": 22,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L202"
										}
									],
									"signatures": [
										{
											"id": 195,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Set a wallet instance as connected in thirdweb context\nThis is only relevant if you are manually creating wallet instance and calling the "
													},
													{
														"kind": "code",
														"text": "`wallet.connect`"
													},
													{
														"kind": "text",
														"text": " method. If you are using the "
													},
													{
														"kind": "code",
														"text": "`connect`"
													},
													{
														"kind": "text",
														"text": " function, this is done automatically."
													}
												],
												"blockTags": [
													{
														"tag": "@example",
														"content": [
															{
																"kind": "code",
																"text": "```ts\nconst { createWalletInstance, setConnectionStatus, setConnectedWallet  } = props;\n\nasync function handleConnect() {\n const wallet = createWalletInstance();\n setConnectionStatus('connecting');\n try {\n   await wallet.connect(someOptions);\n   setConnectedWallet(wallet); // <--\n } catch {\n   setConnectionStatus('disconnected');\n }\n}\n```"
															}
														]
													}
												]
											},
											"parameters": [
												{
													"id": 196,
													"name": "walletInstance",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": -1,
														"name": "I",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							}
						},
						{
							"id": 188,
							"name": "setConnectionStatus",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/types/wallet.ts",
									"line": 175,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L175"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 189,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/react-core/src/core/types/wallet.ts",
											"line": 175,
											"character": 23,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L175"
										}
									],
									"signatures": [
										{
											"id": 190,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Set the connection status of the wallet.\nThis is only relevant if you are manually creating wallet instance and calling the "
													},
													{
														"kind": "code",
														"text": "`wallet.connect`"
													},
													{
														"kind": "text",
														"text": " method. If you are using the "
													},
													{
														"kind": "code",
														"text": "`connect`"
													},
													{
														"kind": "text",
														"text": " function, this is done automatically."
													}
												],
												"blockTags": [
													{
														"tag": "@example",
														"content": [
															{
																"kind": "code",
																"text": "```ts\nconst { createWalletInstance, setConnectionStatus, setConnectedWallet  } = props;\n\nasync function handleConnect() {\n const wallet = createWalletInstance();\n setConnectionStatus('connecting'); // <--\n try {\n   await wallet.connect(someOptions);\n   setConnectedWallet(wallet);\n } catch {\n   setConnectionStatus('disconnected'); // <--\n }\n}\n```"
															}
														]
													}
												]
											},
											"parameters": [
												{
													"id": 191,
													"name": "status",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "src/core/types/wallet.ts",
															"qualifiedName": "ConnectionStatus"
														},
														"name": "ConnectionStatus",
														"package": "@thirdweb-dev/react-core"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							}
						},
						{
							"id": 178,
							"name": "setSelectionData",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/types/wallet.ts",
									"line": 124,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L124"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 179,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/react-core/src/core/types/wallet.ts",
											"line": 124,
											"character": 20,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L124"
										}
									],
									"signatures": [
										{
											"id": 180,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "set selectionData"
													}
												],
												"blockTags": [
													{
														"tag": "@returns",
														"content": []
													}
												]
											},
											"parameters": [
												{
													"id": 181,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							}
						},
						{
							"id": 169,
							"name": "show",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/types/wallet.ts",
									"line": 98,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L98"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 170,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/react-core/src/core/types/wallet.ts",
											"line": 98,
											"character": 8,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L98"
										}
									],
									"signatures": [
										{
											"id": 171,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "show the hidden connect wallet modal again"
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							}
						},
						{
							"id": 182,
							"name": "supportedWallets",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Array of supported wallets including this wallet."
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/types/wallet.ts",
									"line": 129,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L129"
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": 142,
									"name": "WalletConfig",
									"package": "@thirdweb-dev/react-core"
								}
							}
						},
						{
							"id": 175,
							"name": "theme",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "theme of the connect wallet modal"
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/types/wallet.ts",
									"line": 108,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L108"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "dark"
									},
									{
										"type": "literal",
										"value": "light"
									}
								]
							}
						},
						{
							"id": 176,
							"name": "walletConfig",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "code",
										"text": "`WalletConfig`"
									},
									{
										"kind": "text",
										"text": " object of the wallet"
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/types/wallet.ts",
									"line": 113,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L113"
								}
							],
							"type": {
								"type": "reference",
								"target": 142,
								"typeArguments": [
									{
										"type": "reference",
										"target": -1,
										"name": "I",
										"refersToTypeParameter": true
									}
								],
								"name": "WalletConfig",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								184,
								165,
								200,
								201,
								192,
								197,
								172,
								162,
								168,
								183,
								177,
								193,
								188,
								178,
								169,
								182,
								175,
								176
							]
						}
					],
					"sources": [
						{
							"fileName": "packages/react-core/src/core/types/wallet.ts",
							"line": 78,
							"character": 72,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L78"
						}
					]
				}
			}
		},
		{
			"id": 107,
			"name": "ConnectionStatus",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/core/providers/thirdweb-wallet-provider.tsx",
					"line": 51,
					"character": 12,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/providers/thirdweb-wallet-provider.tsx#L51"
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "literal",
						"value": "unknown"
					},
					{
						"type": "literal",
						"value": "connected"
					},
					{
						"type": "literal",
						"value": "disconnected"
					},
					{
						"type": "literal",
						"value": "connecting"
					}
				]
			}
		},
		{
			"id": 1164,
			"name": "DelayedRevealLazyMintInput",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The params for the "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "useDelayedRevealLazyMint",
						"target": 503
					},
					{
						"kind": "text",
						"text": " hook mutation."
					}
				],
				"blockTags": [
					{
						"tag": "@delayedReveal",
						"content": []
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/types.ts",
					"line": 189,
					"character": 12,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L189"
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 1165,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 1167,
							"name": "metadatas",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "An array of metadata objects, representing the metadata of the NFTs to be lazy-minted.\n\nEach metadata object must conform to the [standard metadata properties](https://docs.opensea.io/docs/metadata-standards)."
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/react-core/src/evm/types.ts",
									"line": 199,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L199"
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"sourceFileName": "../sdk/src/core/schema/nft.ts",
										"qualifiedName": "NFTMetadataInput"
									},
									"name": "NFTMetadataInput",
									"package": "@thirdweb-dev/sdk"
								}
							}
						},
						{
							"id": 1168,
							"name": "password",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The password used to encrypt the metadatas.\n\n__The password CANNOT be recovered once it is set. If you lose the password, you will not be able to reveal the metadata.__"
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/react-core/src/evm/types.ts",
									"line": 205,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L205"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1166,
							"name": "placeholder",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The placeholder object represents the metadata the NFTs will have until the owner reveals the metadata."
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/react-core/src/evm/types.ts",
									"line": 193,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L193"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../sdk/src/core/schema/nft.ts",
									"qualifiedName": "NFTMetadataInput"
								},
								"name": "NFTMetadataInput",
								"package": "@thirdweb-dev/sdk"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								1167,
								1168,
								1166
							]
						}
					],
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/types.ts",
							"line": 189,
							"character": 41,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L189"
						}
					]
				}
			}
		},
		{
			"id": 1162,
			"name": "DropContract",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The possible DROP contract types."
					}
				],
				"blockTags": [
					{
						"tag": "@nftDrop",
						"content": []
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/types.ts",
					"line": 171,
					"character": 12,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L171"
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"target": {
							"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/nft-drop.ts",
							"qualifiedName": "NFTDrop"
						},
						"name": "NFTDrop",
						"package": "@thirdweb-dev/sdk"
					},
					{
						"type": "reference",
						"target": {
							"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/edition-drop.ts",
							"qualifiedName": "EditionDrop"
						},
						"name": "EditionDrop",
						"package": "@thirdweb-dev/sdk"
					},
					{
						"type": "reference",
						"target": {
							"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/signature-drop.ts",
							"qualifiedName": "SignatureDrop"
						},
						"name": "SignatureDrop",
						"package": "@thirdweb-dev/sdk"
					},
					{
						"type": "reference",
						"target": {
							"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/token-drop.ts",
							"qualifiedName": "TokenDrop"
						},
						"name": "TokenDrop",
						"package": "@thirdweb-dev/sdk"
					},
					{
						"type": "reference",
						"target": {
							"sourceFileName": "../sdk/src/evm/contracts/smart-contract.ts",
							"qualifiedName": "SmartContract"
						},
						"name": "SmartContract",
						"package": "@thirdweb-dev/sdk"
					},
					{
						"type": "literal",
						"value": null
					}
				]
			}
		},
		{
			"id": 1193,
			"name": "ExecuteAuctionSale",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [],
				"blockTags": [
					{
						"tag": "@marketplace",
						"content": []
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/types.ts",
					"line": 274,
					"character": 12,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L274"
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 1194,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 1195,
							"name": "listingId",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/evm/types.ts",
									"line": 275,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L275"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts",
									"qualifiedName": "BigNumberish"
								},
								"name": "BigNumberish",
								"package": "@ethersproject/bignumber"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								1195
							]
						}
					],
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/types.ts",
							"line": 274,
							"character": 33,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L274"
						}
					]
				}
			}
		},
		{
			"id": 1180,
			"name": "MakeBidParams",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [],
				"blockTags": [
					{
						"tag": "@marketplace",
						"content": []
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/types.ts",
					"line": 244,
					"character": 12,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L244"
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 1181,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 1183,
							"name": "bid",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/evm/types.ts",
									"line": 244,
									"character": 55,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L244"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../sdk/src/evm/types/currency.ts",
									"qualifiedName": "Price"
								},
								"name": "Price",
								"package": "@thirdweb-dev/sdk"
							}
						},
						{
							"id": 1182,
							"name": "listingId",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/evm/types.ts",
									"line": 244,
									"character": 30,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L244"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts",
									"qualifiedName": "BigNumberish"
								},
								"name": "BigNumberish",
								"package": "@ethersproject/bignumber"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								1183,
								1182
							]
						}
					],
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/types.ts",
							"line": 244,
							"character": 28,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L244"
						}
					]
				}
			}
		},
		{
			"id": 1184,
			"name": "MakeOfferParams",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [],
				"blockTags": [
					{
						"tag": "@marketplace",
						"content": []
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/types.ts",
					"line": 249,
					"character": 12,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L249"
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 1185,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 1186,
							"name": "listingId",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/evm/types.ts",
									"line": 250,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L250"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts",
									"qualifiedName": "BigNumberish"
								},
								"name": "BigNumberish",
								"package": "@ethersproject/bignumber"
							}
						},
						{
							"id": 1187,
							"name": "pricePerToken",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/evm/types.ts",
									"line": 251,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L251"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../sdk/src/evm/types/currency.ts",
									"qualifiedName": "Price"
								},
								"name": "Price",
								"package": "@thirdweb-dev/sdk"
							}
						},
						{
							"id": 1188,
							"name": "quantity",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/react-core/src/evm/types.ts",
									"line": 252,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L252"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../sdk/src/evm/types/currency.ts",
									"qualifiedName": "Amount"
								},
								"name": "Amount",
								"package": "@thirdweb-dev/sdk"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								1186,
								1187,
								1188
							]
						}
					],
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/types.ts",
							"line": 249,
							"character": 30,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L249"
						}
					]
				}
			}
		},
		{
			"id": 1151,
			"name": "MintNFTParams",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The params for the "
					},
					{
						"kind": "code",
						"text": "`useMintNFT`"
					},
					{
						"kind": "text",
						"text": " hook mutation."
					}
				],
				"blockTags": [
					{
						"tag": "@nft",
						"content": []
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/types.ts",
					"line": 142,
					"character": 12,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L142"
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 1152,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 1153,
							"name": "metadata",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/evm/types.ts",
									"line": 143,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L143"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../sdk/src/core/schema/nft.ts",
									"qualifiedName": "NFTMetadataOrUri"
								},
								"name": "NFTMetadataOrUri",
								"package": "@thirdweb-dev/sdk"
							}
						},
						{
							"id": 1155,
							"name": "supply",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/react-core/src/evm/types.ts",
									"line": 145,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L145"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../sdk/src/evm/types/currency.ts",
									"qualifiedName": "Amount"
								},
								"name": "Amount",
								"package": "@thirdweb-dev/sdk"
							}
						},
						{
							"id": 1154,
							"name": "to",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/evm/types.ts",
									"line": 144,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L144"
								}
							],
							"type": {
								"type": "reference",
								"target": 1126,
								"name": "WalletAddress",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								1153,
								1155,
								1154
							]
						}
					],
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/types.ts",
							"line": 142,
							"character": 28,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L142"
						}
					]
				}
			}
		},
		{
			"id": 1156,
			"name": "MintNFTReturnType",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The return type of the "
					},
					{
						"kind": "code",
						"text": "`useMintNFT`"
					},
					{
						"kind": "text",
						"text": " hook."
					}
				],
				"blockTags": [
					{
						"tag": "@nft",
						"content": []
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/types.ts",
					"line": 152,
					"character": 12,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L152"
				}
			],
			"typeParameters": [
				{
					"id": 1157,
					"name": "TContract",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {}
				}
			],
			"type": {
				"type": "conditional",
				"checkType": {
					"type": "reference",
					"target": -1,
					"name": "TContract",
					"refersToTypeParameter": true
				},
				"extendsType": {
					"type": "reference",
					"target": {
						"sourceFileName": "../sdk/src/evm/core/classes/erc-721.ts",
						"qualifiedName": "Erc721"
					},
					"name": "Erc721",
					"package": "@thirdweb-dev/sdk"
				},
				"trueType": {
					"type": "reference",
					"target": {
						"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
						"qualifiedName": "Awaited"
					},
					"typeArguments": [
						{
							"type": "reference",
							"target": {
								"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
								"qualifiedName": "ReturnType"
							},
							"typeArguments": [
								{
									"type": "indexedAccess",
									"indexType": {
										"type": "literal",
										"value": "mintTo"
									},
									"objectType": {
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/core/classes/erc-721.ts",
											"qualifiedName": "Erc721"
										},
										"name": "Erc721",
										"package": "@thirdweb-dev/sdk"
									}
								}
							],
							"name": "ReturnType",
							"package": "typescript"
						}
					],
					"name": "Awaited",
					"package": "typescript"
				},
				"falseType": {
					"type": "conditional",
					"checkType": {
						"type": "reference",
						"target": -1,
						"name": "TContract",
						"refersToTypeParameter": true
					},
					"extendsType": {
						"type": "reference",
						"target": {
							"sourceFileName": "../sdk/src/evm/core/classes/erc-1155.ts",
							"qualifiedName": "Erc1155"
						},
						"name": "Erc1155",
						"package": "@thirdweb-dev/sdk"
					},
					"trueType": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Awaited"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "ReturnType"
								},
								"typeArguments": [
									{
										"type": "indexedAccess",
										"indexType": {
											"type": "literal",
											"value": "mintTo"
										},
										"objectType": {
											"type": "reference",
											"target": {
												"sourceFileName": "../sdk/src/evm/core/classes/erc-1155.ts",
												"qualifiedName": "Erc1155"
											},
											"name": "Erc1155",
											"package": "@thirdweb-dev/sdk"
										}
									}
								],
								"name": "ReturnType",
								"package": "typescript"
							}
						],
						"name": "Awaited",
						"package": "typescript"
					},
					"falseType": {
						"type": "intrinsic",
						"name": "never"
					}
				}
			}
		},
		{
			"id": 1146,
			"name": "MintNFTSupplyParams",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The params to pass to "
					},
					{
						"kind": "code",
						"text": "`useMintNFTSupply`"
					},
					{
						"kind": "text",
						"text": "."
					}
				],
				"blockTags": [
					{
						"tag": "@nft",
						"content": []
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/types.ts",
					"line": 132,
					"character": 12,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L132"
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 1147,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 1149,
							"name": "additionalSupply",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/evm/types.ts",
									"line": 134,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L134"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../sdk/src/evm/types/currency.ts",
									"qualifiedName": "Amount"
								},
								"name": "Amount",
								"package": "@thirdweb-dev/sdk"
							}
						},
						{
							"id": 1150,
							"name": "to",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/evm/types.ts",
									"line": 135,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L135"
								}
							],
							"type": {
								"type": "reference",
								"target": 1126,
								"name": "WalletAddress",
								"package": "@thirdweb-dev/react-core"
							}
						},
						{
							"id": 1148,
							"name": "tokenId",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/evm/types.ts",
									"line": 133,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L133"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts",
									"qualifiedName": "BigNumberish"
								},
								"name": "BigNumberish",
								"package": "@ethersproject/bignumber"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								1149,
								1150,
								1148
							]
						}
					],
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/types.ts",
							"line": 132,
							"character": 34,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L132"
						}
					]
				}
			}
		},
		{
			"id": 1134,
			"name": "NFTContract",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The possible NFT contract types."
					}
				],
				"blockTags": [
					{
						"tag": "@nft",
						"content": []
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/types.ts",
					"line": 90,
					"character": 12,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L90"
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"target": {
							"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/nft-collection.ts",
							"qualifiedName": "NFTCollection"
						},
						"name": "NFTCollection",
						"package": "@thirdweb-dev/sdk"
					},
					{
						"type": "reference",
						"target": {
							"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/edition.ts",
							"qualifiedName": "Edition"
						},
						"name": "Edition",
						"package": "@thirdweb-dev/sdk"
					},
					{
						"type": "reference",
						"target": {
							"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/pack.ts",
							"qualifiedName": "Pack"
						},
						"name": "Pack",
						"package": "@thirdweb-dev/sdk"
					},
					{
						"type": "reference",
						"target": {
							"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/multiwrap.ts",
							"qualifiedName": "Multiwrap"
						},
						"name": "Multiwrap",
						"package": "@thirdweb-dev/sdk"
					},
					{
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Exclude"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 1162,
								"name": "DropContract",
								"package": "@thirdweb-dev/react-core"
							},
							{
								"type": "literal",
								"value": "TokenDrop"
							}
						],
						"name": "Exclude",
						"package": "typescript"
					}
				]
			}
		},
		{
			"id": 1169,
			"name": "RevealLazyMintInput",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The params for the "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "useRevealLazyMint",
						"target": 511
					},
					{
						"kind": "text",
						"text": " hook mutation."
					}
				],
				"blockTags": [
					{
						"tag": "@delayedReveal",
						"content": []
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/types.ts",
					"line": 212,
					"character": 12,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L212"
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 1170,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 1171,
							"name": "batchId",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/evm/types.ts",
									"line": 213,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L213"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts",
									"qualifiedName": "BigNumberish"
								},
								"name": "BigNumberish",
								"package": "@ethersproject/bignumber"
							}
						},
						{
							"id": 1172,
							"name": "password",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/evm/types.ts",
									"line": 214,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L214"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								1171,
								1172
							]
						}
					],
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/types.ts",
							"line": 212,
							"character": 34,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L212"
						}
					]
				}
			}
		},
		{
			"id": 1163,
			"name": "RevealableContract",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The possible revealable contract types."
					}
				],
				"blockTags": [
					{
						"tag": "@delayedReveal",
						"content": []
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/types.ts",
					"line": 183,
					"character": 12,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L183"
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"target": {
							"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/nft-drop.ts",
							"qualifiedName": "NFTDrop"
						},
						"name": "NFTDrop",
						"package": "@thirdweb-dev/sdk"
					},
					{
						"type": "reference",
						"target": {
							"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/signature-drop.ts",
							"qualifiedName": "SignatureDrop"
						},
						"name": "SignatureDrop",
						"package": "@thirdweb-dev/sdk"
					},
					{
						"type": "reference",
						"target": {
							"sourceFileName": "../sdk/src/evm/contracts/smart-contract.ts",
							"qualifiedName": "SmartContract"
						},
						"name": "SmartContract",
						"package": "@thirdweb-dev/sdk"
					},
					{
						"type": "literal",
						"value": null
					}
				]
			}
		},
		{
			"id": 877,
			"name": "RolesForContract",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [],
				"blockTags": [
					{
						"tag": "@permissionControl",
						"content": []
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/roles.ts",
					"line": 31,
					"character": 12,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/roles.ts#L31"
				}
			],
			"typeParameters": [
				{
					"id": 879,
					"name": "TContract",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "src/evm/hooks/async/roles.ts",
							"qualifiedName": "ContractWithRoles"
						},
						"name": "ContractWithRoles",
						"package": "@thirdweb-dev/react-core"
					}
				}
			],
			"type": {
				"type": "conditional",
				"checkType": {
					"type": "reference",
					"target": -1,
					"name": "TContract",
					"refersToTypeParameter": true
				},
				"extendsType": {
					"type": "reference",
					"target": {
						"sourceFileName": "../sdk/src/evm/contracts/smart-contract.ts",
						"qualifiedName": "SmartContract"
					},
					"name": "SmartContract",
					"package": "@thirdweb-dev/sdk"
				},
				"trueType": {
					"type": "union",
					"types": [
						{
							"type": "reference",
							"target": {
								"sourceFileName": "../sdk/src/evm/common/role.ts",
								"qualifiedName": "Role"
							},
							"name": "Role",
							"package": "@thirdweb-dev/sdk"
						},
						{
							"type": "intersection",
							"types": [
								{
									"type": "intrinsic",
									"name": "string"
								},
								{
									"type": "reflection",
									"declaration": {
										"id": 878,
										"name": "__type",
										"variant": "declaration",
										"kind": 65536,
										"flags": {},
										"sources": [
											{
												"fileName": "packages/react-core/src/evm/hooks/async/roles.ts",
												"line": 34,
												"character": 23,
												"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/roles.ts#L34"
											}
										]
									}
								}
							]
						}
					]
				},
				"falseType": {
					"type": "indexedAccess",
					"indexType": {
						"type": "intrinsic",
						"name": "number"
					},
					"objectType": {
						"type": "indexedAccess",
						"indexType": {
							"type": "literal",
							"value": "roles"
						},
						"objectType": {
							"type": "reference",
							"target": {
								"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
								"qualifiedName": "NonNullable"
							},
							"typeArguments": [
								{
									"type": "indexedAccess",
									"indexType": {
										"type": "literal",
										"value": "roles"
									},
									"objectType": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Exclude"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": -1,
												"name": "TContract",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../sdk/src/evm/contracts/smart-contract.ts",
													"qualifiedName": "SmartContract"
												},
												"name": "SmartContract",
												"package": "@thirdweb-dev/sdk"
											}
										],
										"name": "Exclude",
										"package": "typescript"
									}
								}
							],
							"name": "NonNullable",
							"package": "typescript"
						}
					}
				}
			}
		},
		{
			"id": 203,
			"name": "SelectUIProps",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [],
				"blockTags": [
					{
						"tag": "@wallet",
						"content": []
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/react-core/src/core/types/wallet.ts",
					"line": 240,
					"character": 12,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L240"
				}
			],
			"typeParameters": [
				{
					"id": 231,
					"name": "I",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"type": {
						"type": "reference",
						"target": 232,
						"name": "WalletInstance",
						"package": "@thirdweb-dev/react-core"
					},
					"default": {
						"type": "reference",
						"target": 232,
						"name": "WalletInstance",
						"package": "@thirdweb-dev/react-core"
					}
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 204,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 213,
							"name": "connect",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/types/wallet.ts",
									"line": 288,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L288"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 214,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/react-core/src/core/types/wallet.ts",
											"line": 288,
											"character": 11,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L288"
										}
									],
									"signatures": [
										{
											"id": 215,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "connect wallet"
													}
												],
												"blockTags": [
													{
														"tag": "@example",
														"content": [
															{
																"kind": "code",
																"text": "```tsx\nconst { connect } = props;\n\nasync function handleConnect() {\n  const wallet = await connect(someOptions);\n  console.log('connected to', wallet);\n}\n```"
															},
															{
																"kind": "text",
																"text": "\n\nIf you need more control over the connection process, you can manually create wallet instance and call the "
															},
															{
																"kind": "code",
																"text": "`connect`"
															},
															{
																"kind": "text",
																"text": " method of the wallet instance instead and use "
															},
															{
																"kind": "code",
																"text": "`setConnectedWallet`"
															},
															{
																"kind": "text",
																"text": " and "
															},
															{
																"kind": "code",
																"text": "`setConnectionStatus`"
															},
															{
																"kind": "text",
																"text": " to set the connected wallet and connection status."
															}
														]
													}
												]
											},
											"parameters": [
												{
													"id": 216,
													"name": "args",
													"variant": "param",
													"kind": 32768,
													"flags": {
														"isRest": true
													},
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "src/core/types/wallet.ts",
															"qualifiedName": "ConnectArgs"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": -1,
																"name": "I",
																"refersToTypeParameter": true
															}
														],
														"name": "ConnectArgs",
														"package": "@thirdweb-dev/react-core"
													}
												}
											],
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Promise"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": -1,
														"name": "I",
														"refersToTypeParameter": true
													}
												],
												"name": "Promise",
												"package": "typescript"
											}
										}
									]
								}
							}
						},
						{
							"id": 229,
							"name": "connectedWallet",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Connected wallet instance\nThis is set by "
									},
									{
										"kind": "code",
										"text": "`connect`"
									},
									{
										"kind": "text",
										"text": " if connection succeeds or it can be set manually by using "
									},
									{
										"kind": "code",
										"text": "`setConnectedWallet`"
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/types/wallet.ts",
									"line": 364,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L364"
								}
							],
							"type": {
								"type": "reference",
								"target": -1,
								"name": "I",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 230,
							"name": "connectedWalletAddress",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Address of the connected wallet instance"
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/types/wallet.ts",
									"line": 369,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L369"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 221,
							"name": "connectionStatus",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Connection status of the wallet"
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/types/wallet.ts",
									"line": 315,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L315"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/types/wallet.ts",
									"qualifiedName": "ConnectionStatus"
								},
								"name": "ConnectionStatus",
								"package": "@thirdweb-dev/react-core"
							}
						},
						{
							"id": 226,
							"name": "createWalletInstance",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/types/wallet.ts",
									"line": 358,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L358"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 227,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/react-core/src/core/types/wallet.ts",
											"line": 358,
											"character": 24,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L358"
										}
									],
									"signatures": [
										{
											"id": 228,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Create an instance of the wallet. This is only relevant if you are manually creating wallet instance and calling the "
													},
													{
														"kind": "code",
														"text": "`wallet.connect`"
													},
													{
														"kind": "text",
														"text": " method. If you are using the "
													},
													{
														"kind": "code",
														"text": "`connect`"
													},
													{
														"kind": "text",
														"text": " function, this is done automatically."
													}
												],
												"blockTags": [
													{
														"tag": "@example",
														"content": [
															{
																"kind": "code",
																"text": "```ts\nconst { createWalletInstance, setConnectionStatus, setConnectedWallet  } = props;\n\nasync function handleConnect() {\n const wallet = createWalletInstance(); // <--\n setConnectionStatus('connecting');\n try {\n   await wallet.connect(someOptions);\n   setConnectedWallet(wallet);\n } catch {\n   setConnectionStatus('disconnected');\n }\n}\n```"
															}
														]
													}
												]
											},
											"type": {
												"type": "reference",
												"target": -1,
												"name": "I",
												"refersToTypeParameter": true
											}
										}
									]
								}
							}
						},
						{
							"id": 212,
							"name": "modalSize",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Size of the modal\n\nThis is always "
									},
									{
										"kind": "code",
										"text": "`compact`"
									},
									{
										"kind": "text",
										"text": " on React Native"
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/types/wallet.ts",
									"line": 271,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L271"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "compact"
									},
									{
										"type": "literal",
										"value": "wide"
									}
								]
							}
						},
						{
							"id": 205,
							"name": "onSelect",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/types/wallet.ts",
									"line": 246,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L246"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 206,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/react-core/src/core/types/wallet.ts",
											"line": 246,
											"character": 12,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L246"
										}
									],
									"signatures": [
										{
											"id": 207,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Call this function to \"select\" your wallet and render the screen for connecting the wallet"
													}
												],
												"blockTags": [
													{
														"tag": "@returns",
														"content": []
													}
												]
											},
											"parameters": [
												{
													"id": 208,
													"name": "selectionData",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "selectionData to be passed to "
															},
															{
																"kind": "code",
																"text": "`connectUI`"
															},
															{
																"kind": "text",
																"text": "'s "
															},
															{
																"kind": "code",
																"text": "`selectionData`"
															},
															{
																"kind": "text",
																"text": " prop"
															}
														]
													},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							}
						},
						{
							"id": 222,
							"name": "setConnectedWallet",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/types/wallet.ts",
									"line": 337,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L337"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 223,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/react-core/src/core/types/wallet.ts",
											"line": 337,
											"character": 22,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L337"
										}
									],
									"signatures": [
										{
											"id": 224,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Set a wallet instance as connected in thirdweb context\nThis is only relevant if you are manually creating wallet instance and calling the "
													},
													{
														"kind": "code",
														"text": "`wallet.connect`"
													},
													{
														"kind": "text",
														"text": " method. If you are using the "
													},
													{
														"kind": "code",
														"text": "`connect`"
													},
													{
														"kind": "text",
														"text": " function, this is done automatically."
													}
												],
												"blockTags": [
													{
														"tag": "@example",
														"content": [
															{
																"kind": "code",
																"text": "```ts\nconst { createWalletInstance, setConnectionStatus, setConnectedWallet  } = props;\n\nasync function handleConnect() {\n const wallet = createWalletInstance();\n setConnectionStatus('connecting');\n try {\n   await wallet.connect(someOptions);\n   setConnectedWallet(wallet); // <--\n } catch {\n   setConnectionStatus('disconnected');\n }\n}\n```"
															}
														]
													}
												]
											},
											"parameters": [
												{
													"id": 225,
													"name": "walletInstance",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": -1,
														"name": "I",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							}
						},
						{
							"id": 217,
							"name": "setConnectionStatus",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/types/wallet.ts",
									"line": 310,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L310"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 218,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/react-core/src/core/types/wallet.ts",
											"line": 310,
											"character": 23,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L310"
										}
									],
									"signatures": [
										{
											"id": 219,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Set the connection status of the wallet.\nThis is only relevant if you are manually creating wallet instance and calling the "
													},
													{
														"kind": "code",
														"text": "`wallet.connect`"
													},
													{
														"kind": "text",
														"text": " method. If you are using the "
													},
													{
														"kind": "code",
														"text": "`connect`"
													},
													{
														"kind": "text",
														"text": " function, this is done automatically."
													}
												],
												"blockTags": [
													{
														"tag": "@example",
														"content": [
															{
																"kind": "code",
																"text": "```ts\nconst { createWalletInstance, setConnectionStatus, setConnectedWallet  } = props;\n\nasync function handleConnect() {\n const wallet = createWalletInstance();\n setConnectionStatus('connecting'); // <--\n try {\n   await wallet.connect(someOptions);\n   setConnectedWallet(wallet);\n } catch {\n   setConnectionStatus('disconnected'); // <--\n }\n}\n```"
															}
														]
													}
												]
											},
											"parameters": [
												{
													"id": 220,
													"name": "status",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "src/core/types/wallet.ts",
															"qualifiedName": "ConnectionStatus"
														},
														"name": "ConnectionStatus",
														"package": "@thirdweb-dev/react-core"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							}
						},
						{
							"id": 210,
							"name": "supportedWallets",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "List of all supported wallets including your wallet.\n\nYou can use this to conditionally render UI based on how many wallets are supported.\nFor example: You can render a larger UI if only one wallet (your wallet) is supported."
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/types/wallet.ts",
									"line": 259,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L259"
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": 142,
									"name": "WalletConfig",
									"package": "@thirdweb-dev/react-core"
								}
							}
						},
						{
							"id": 211,
							"name": "theme",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "theme of the connect wallet modal"
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/types/wallet.ts",
									"line": 264,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L264"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "dark"
									},
									{
										"type": "literal",
										"value": "light"
									}
								]
							}
						},
						{
							"id": 209,
							"name": "walletConfig",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "code",
										"text": "`WalletConfig`"
									},
									{
										"kind": "text",
										"text": " object of your wallet"
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/types/wallet.ts",
									"line": 251,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L251"
								}
							],
							"type": {
								"type": "reference",
								"target": 142,
								"typeArguments": [
									{
										"type": "reference",
										"target": -1,
										"name": "I",
										"refersToTypeParameter": true
									}
								],
								"name": "WalletConfig",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								213,
								229,
								230,
								221,
								226,
								212,
								205,
								222,
								217,
								210,
								211,
								209
							]
						}
					],
					"sources": [
						{
							"fileName": "packages/react-core/src/core/types/wallet.ts",
							"line": 240,
							"character": 71,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L240"
						}
					]
				}
			}
		},
		{
			"id": 279,
			"name": "SetClaimConditionsParams",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The params for the "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "useSetClaimConditions",
						"target": 315,
						"tsLinkText": ""
					},
					{
						"kind": "text",
						"text": " hook mutation."
					}
				],
				"blockTags": [
					{
						"tag": "@claimConditions",
						"content": []
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/claim-conditions.ts",
					"line": 45,
					"character": 12,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/claim-conditions.ts#L45"
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 280,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 281,
							"name": "phases",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "An array of phases that occur in chronological order."
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/react-core/src/evm/hooks/async/claim-conditions.ts",
									"line": 49,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/claim-conditions.ts#L49"
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"sourceFileName": "../sdk/src/evm/types/claim-conditions/claim-conditions.ts",
										"qualifiedName": "ClaimConditionInput"
									},
									"name": "ClaimConditionInput",
									"package": "@thirdweb-dev/sdk"
								}
							}
						},
						{
							"id": 282,
							"name": "reset",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A boolean value that determines whether to reset the claim conditions or to keep the existing state.\nBy resetting them, any previous claims that were made will be ignored by the claim condition restrictions.\n\nFor example, if you had a limit of 1 token per wallet, and a user claimed a token, then you reset the claim conditions, that user will be able to claim another token.\n\nDefault value is "
									},
									{
										"kind": "code",
										"text": "`false`"
									},
									{
										"kind": "text",
										"text": "."
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/react-core/src/evm/hooks/async/claim-conditions.ts",
									"line": 59,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/claim-conditions.ts#L59"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								281,
								282
							]
						}
					],
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/claim-conditions.ts",
							"line": 45,
							"character": 39,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/claim-conditions.ts#L45"
						}
					]
				}
			}
		},
		{
			"id": 1131,
			"name": "TokenBurnParams",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The parameters to pass to the burn function."
					}
				],
				"blockTags": [
					{
						"tag": "@token",
						"content": []
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/types.ts",
					"line": 80,
					"character": 12,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L80"
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 1132,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 1133,
							"name": "amount",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/evm/types.ts",
									"line": 81,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L81"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../sdk/src/evm/types/currency.ts",
									"qualifiedName": "Amount"
								},
								"name": "Amount",
								"package": "@thirdweb-dev/sdk"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								1133
							]
						}
					],
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/types.ts",
							"line": 80,
							"character": 30,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L80"
						}
					]
				}
			}
		},
		{
			"id": 1135,
			"name": "TokenContract",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The possible Token contract types."
					}
				],
				"blockTags": [
					{
						"tag": "@token",
						"content": []
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/types.ts",
					"line": 101,
					"character": 12,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L101"
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"target": {
							"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/token-drop.ts",
							"qualifiedName": "TokenDrop"
						},
						"name": "TokenDrop",
						"package": "@thirdweb-dev/sdk"
					},
					{
						"type": "reference",
						"target": {
							"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/token.ts",
							"qualifiedName": "Token"
						},
						"name": "Token",
						"package": "@thirdweb-dev/sdk"
					},
					{
						"type": "reference",
						"target": {
							"sourceFileName": "../sdk/src/evm/contracts/smart-contract.ts",
							"qualifiedName": "SmartContract"
						},
						"name": "SmartContract",
						"package": "@thirdweb-dev/sdk"
					},
					{
						"type": "literal",
						"value": null
					}
				]
			}
		},
		{
			"id": 1127,
			"name": "TokenParams",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The parameters to pass to the mint and transfer functions."
					}
				],
				"blockTags": [
					{
						"tag": "@token",
						"content": []
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/types.ts",
					"line": 71,
					"character": 12,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L71"
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 1128,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 1130,
							"name": "amount",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/evm/types.ts",
									"line": 73,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L73"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../sdk/src/evm/types/currency.ts",
									"qualifiedName": "Amount"
								},
								"name": "Amount",
								"package": "@thirdweb-dev/sdk"
							}
						},
						{
							"id": 1129,
							"name": "to",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/evm/types.ts",
									"line": 72,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L72"
								}
							],
							"type": {
								"type": "reference",
								"target": 1126,
								"name": "WalletAddress",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								1130,
								1129
							]
						}
					],
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/types.ts",
							"line": 71,
							"character": 26,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L71"
						}
					]
				}
			}
		},
		{
			"id": 1137,
			"name": "TransferNFTParams",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The params to pass to "
					},
					{
						"kind": "code",
						"text": "`useTransferNFT`"
					},
					{
						"kind": "text",
						"text": "."
					}
				],
				"blockTags": [
					{
						"tag": "@nft",
						"content": []
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/types.ts",
					"line": 113,
					"character": 12,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L113"
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 1138,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 1141,
							"name": "amount",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/react-core/src/evm/types.ts",
									"line": 116,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L116"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../sdk/src/evm/types/currency.ts",
									"qualifiedName": "Amount"
								},
								"name": "Amount",
								"package": "@thirdweb-dev/sdk"
							}
						},
						{
							"id": 1139,
							"name": "to",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/evm/types.ts",
									"line": 114,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L114"
								}
							],
							"type": {
								"type": "reference",
								"target": 1126,
								"name": "WalletAddress",
								"package": "@thirdweb-dev/react-core"
							}
						},
						{
							"id": 1140,
							"name": "tokenId",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/evm/types.ts",
									"line": 115,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L115"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts",
									"qualifiedName": "BigNumberish"
								},
								"name": "BigNumberish",
								"package": "@ethersproject/bignumber"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								1141,
								1139,
								1140
							]
						}
					],
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/types.ts",
							"line": 113,
							"character": 32,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L113"
						}
					]
				}
			}
		},
		{
			"id": 467,
			"name": "UseContractResult",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [],
				"blockTags": [
					{
						"tag": "@contract",
						"content": []
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/contracts.ts",
					"line": 187,
					"character": 12,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contracts.ts#L187"
				}
			],
			"typeParameters": [
				{
					"id": 470,
					"name": "TContract",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../sdk/src/evm/contracts/index.ts",
							"qualifiedName": "ValidContractInstance"
						},
						"name": "ValidContractInstance",
						"package": "@thirdweb-dev/sdk"
					},
					"default": {
						"type": "reference",
						"target": {
							"sourceFileName": "../sdk/src/evm/contracts/smart-contract.ts",
							"qualifiedName": "SmartContract"
						},
						"name": "SmartContract",
						"package": "@thirdweb-dev/sdk"
					}
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "union",
								"types": [
									{
										"type": "reference",
										"target": -1,
										"name": "TContract",
										"refersToTypeParameter": true
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					},
					{
						"type": "reflection",
						"declaration": {
							"id": 468,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"children": [
								{
									"id": 469,
									"name": "contract",
									"variant": "declaration",
									"kind": 1024,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/react-core/src/evm/hooks/async/contracts.ts",
											"line": 190,
											"character": 2,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contracts.ts#L190"
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": -1,
												"name": "TContract",
												"refersToTypeParameter": true
											},
											{
												"type": "intrinsic",
												"name": "undefined"
											}
										]
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										469
									]
								}
							],
							"sources": [
								{
									"fileName": "packages/react-core/src/evm/hooks/async/contracts.ts",
									"line": 189,
									"character": 44,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contracts.ts#L189"
								}
							]
						}
					}
				]
			}
		},
		{
			"id": 1230,
			"name": "UseWatchTransactionsParams",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/useTransactions.ts",
					"line": 8,
					"character": 12,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/useTransactions.ts#L8"
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Partial"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Omit"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/functions/watchTransactions.ts",
											"qualifiedName": "WatchTransactionsParams"
										},
										"name": "WatchTransactionsParams",
										"package": "@thirdweb-dev/sdk"
									},
									{
										"type": "literal",
										"value": "onTransactions"
									}
								],
								"name": "Omit",
								"package": "typescript"
							}
						],
						"name": "Partial",
						"package": "typescript"
					},
					{
						"type": "reflection",
						"declaration": {
							"id": 1231,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"children": [
								{
									"id": 1232,
									"name": "limit",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "packages/react-core/src/evm/hooks/useTransactions.ts",
											"line": 10,
											"character": 6,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/useTransactions.ts#L10"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										1232
									]
								}
							],
							"sources": [
								{
									"fileName": "packages/react-core/src/evm/hooks/useTransactions.ts",
									"line": 10,
									"character": 4,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/useTransactions.ts#L10"
								}
							]
						}
					}
				]
			}
		},
		{
			"id": 1126,
			"name": "WalletAddress",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "A wallet address."
					}
				],
				"blockTags": [
					{
						"tag": "@walletConnection",
						"content": []
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/types.ts",
					"line": 60,
					"character": 12,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/types.ts#L60"
				}
			],
			"type": {
				"type": "reference",
				"target": {
					"sourceFileName": "../sdk/src/evm/schema/shared/AddressOrEnsSchema.ts",
					"qualifiedName": "AddressOrEns"
				},
				"name": "AddressOrEns",
				"package": "@thirdweb-dev/sdk"
			}
		},
		{
			"id": 142,
			"name": "WalletConfig",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [],
				"blockTags": [
					{
						"tag": "@wallet",
						"content": []
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/react-core/src/core/types/wallet.ts",
					"line": 24,
					"character": 12,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L24"
				}
			],
			"typeParameters": [
				{
					"id": 159,
					"name": "I",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"type": {
						"type": "reference",
						"target": 232,
						"name": "WalletInstance",
						"package": "@thirdweb-dev/react-core"
					},
					"default": {
						"type": "reference",
						"target": 232,
						"name": "WalletInstance",
						"package": "@thirdweb-dev/react-core"
					}
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 143,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 144,
							"name": "category",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/types/wallet.ts",
									"line": 25,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L25"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "socialLogin"
									},
									{
										"type": "literal",
										"value": "walletLogin"
									}
								]
							}
						},
						{
							"id": 151,
							"name": "connectUI",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "UI for connecting wallet"
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/types/wallet.ts",
									"line": 32,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L32"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/@types+react@18.2.17/node_modules/@types/react/index.d.ts",
									"qualifiedName": "React.FC"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 160,
										"typeArguments": [
											{
												"type": "reference",
												"target": -1,
												"name": "I",
												"refersToTypeParameter": true
											}
										],
										"name": "ConnectUIProps",
										"package": "@thirdweb-dev/react-core"
									}
								],
								"name": "React.FC",
								"package": "@types/react"
							}
						},
						{
							"id": 147,
							"name": "create",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/types/wallet.ts",
									"line": 28,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L28"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 148,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/react-core/src/core/types/wallet.ts",
											"line": 28,
											"character": 10,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L28"
										}
									],
									"signatures": [
										{
											"id": 149,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"parameters": [
												{
													"id": 150,
													"name": "options",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 233,
														"name": "WalletOptions",
														"package": "@thirdweb-dev/react-core"
													}
												}
											],
											"type": {
												"type": "reference",
												"target": -1,
												"name": "I",
												"refersToTypeParameter": true
											}
										}
									]
								}
							}
						},
						{
							"id": 145,
							"name": "id",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/types/wallet.ts",
									"line": 26,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L26"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 158,
							"name": "isHeadless",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "If the wallet can sign transactions without user interaction, set this to true.\n\nBy default is set to "
									},
									{
										"kind": "code",
										"text": "`false`"
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/types/wallet.ts",
									"line": 61,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L61"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 153,
							"name": "isInstalled",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/types/wallet.ts",
									"line": 37,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L37"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 154,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/react-core/src/core/types/wallet.ts",
											"line": 37,
											"character": 16,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L37"
										}
									],
									"signatures": [
										{
											"id": 155,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							}
						},
						{
							"id": 146,
							"name": "meta",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/types/wallet.ts",
									"line": 27,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L27"
								}
							],
							"type": {
								"type": "indexedAccess",
								"indexType": {
									"type": "literal",
									"value": "meta"
								},
								"objectType": {
									"type": "query",
									"queryType": {
										"type": "reference",
										"target": {
											"sourceFileName": "../wallets/src/evm/wallets/base.ts",
											"qualifiedName": "AbstractClientWallet"
										},
										"name": "AbstractClientWallet",
										"package": "@thirdweb-dev/wallets"
									}
								}
							}
						},
						{
							"id": 156,
							"name": "personalWallets",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "An array of "
									},
									{
										"kind": "code",
										"text": "`WalletConfig`"
									},
									{
										"kind": "text",
										"text": " that users can use as a personal wallet to connect to your wallet\n\nThis is only required if your wallet requires a personal wallet to be connected such as a Safe Wallet or Smart Wallet\n\nproviding the "
									},
									{
										"kind": "code",
										"text": "`personalWallets`"
									},
									{
										"kind": "text",
										"text": " ensures that autoconnect and ConnectWallet modal works properly for your wallet.\n* autoconnect will connect the last connected personal wallet first and then connect your wallet\n* ConnectWallet modal will reopen once the personal wallet is connected so that you can render UI for connecting your wallet as the next step"
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/types/wallet.ts",
									"line": 47,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L47"
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": 142,
									"name": "WalletConfig",
									"package": "@thirdweb-dev/react-core"
								}
							}
						},
						{
							"id": 157,
							"name": "recommended",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "If true, this wallet will be tagged as \"recommended\" in ConnectWallet Modal and will be shown at the top of the list\n\nBy default is set to "
									},
									{
										"kind": "code",
										"text": "`false`"
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/types/wallet.ts",
									"line": 54,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L54"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 152,
							"name": "selectUI",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "UI for selecting wallet - this UI is rendered in the wallet selection screen"
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/types/wallet.ts",
									"line": 36,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L36"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/@types+react@18.2.17/node_modules/@types/react/index.d.ts",
									"qualifiedName": "React.FC"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 203,
										"typeArguments": [
											{
												"type": "reference",
												"target": -1,
												"name": "I",
												"refersToTypeParameter": true
											}
										],
										"name": "SelectUIProps",
										"package": "@thirdweb-dev/react-core"
									}
								],
								"name": "React.FC",
								"package": "@types/react"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								144,
								151,
								147,
								145,
								158,
								153,
								146,
								156,
								157,
								152
							]
						}
					],
					"sources": [
						{
							"fileName": "packages/react-core/src/core/types/wallet.ts",
							"line": 24,
							"character": 70,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L24"
						}
					]
				}
			}
		},
		{
			"id": 31,
			"name": "WalletIdToWalletTypeMap",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [],
				"blockTags": [
					{
						"tag": "@wallet",
						"content": []
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/react-core/src/core/hooks/wallet-hooks.ts",
					"line": 35,
					"character": 12,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/hooks/wallet-hooks.ts#L35"
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 32,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 38,
							"name": "blocto",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/hooks/wallet-hooks.ts",
									"line": 41,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/hooks/wallet-hooks.ts#L41"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../wallets/src/evm/wallets/blocto.ts",
									"qualifiedName": "BloctoWallet"
								},
								"name": "BloctoWallet",
								"package": "@thirdweb-dev/wallets"
							}
						},
						{
							"id": 34,
							"name": "coin98",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/hooks/wallet-hooks.ts",
									"line": 37,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/hooks/wallet-hooks.ts#L37"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../wallets/src/evm/wallets/coin98.ts",
									"qualifiedName": "Coin98Wallet"
								},
								"name": "Coin98Wallet",
								"package": "@thirdweb-dev/wallets"
							}
						},
						{
							"id": 35,
							"name": "coinbase",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/hooks/wallet-hooks.ts",
									"line": 38,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/hooks/wallet-hooks.ts#L38"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../wallets/src/evm/wallets/coinbase-wallet.ts",
									"qualifiedName": "CoinbaseWallet"
								},
								"name": "CoinbaseWallet",
								"package": "@thirdweb-dev/wallets"
							}
						},
						{
							"id": 36,
							"name": "coreWallet",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/hooks/wallet-hooks.ts",
									"line": 39,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/hooks/wallet-hooks.ts#L39"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../wallets/src/evm/wallets/core-wallet.ts",
									"qualifiedName": "CoreWallet"
								},
								"name": "CoreWallet",
								"package": "@thirdweb-dev/wallets"
							}
						},
						{
							"id": 53,
							"name": "cryptoDefiWallet",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/hooks/wallet-hooks.ts",
									"line": 56,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/hooks/wallet-hooks.ts#L56"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../wallets/src/evm/wallets/crypto-defi-wallet.ts",
									"qualifiedName": "CryptoDefiWallet"
								},
								"name": "CryptoDefiWallet",
								"package": "@thirdweb-dev/wallets"
							}
						},
						{
							"id": 47,
							"name": "embeddedWallet",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/hooks/wallet-hooks.ts",
									"line": 50,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/hooks/wallet-hooks.ts#L50"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../wallets/src/evm/wallets/embedded-wallet.ts",
									"qualifiedName": "EmbeddedWallet"
								},
								"name": "EmbeddedWallet",
								"package": "@thirdweb-dev/wallets"
							}
						},
						{
							"id": 39,
							"name": "frame",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/hooks/wallet-hooks.ts",
									"line": 42,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/hooks/wallet-hooks.ts#L42"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../wallets/src/evm/wallets/frame.ts",
									"qualifiedName": "FrameWallet"
								},
								"name": "FrameWallet",
								"package": "@thirdweb-dev/wallets"
							}
						},
						{
							"id": 40,
							"name": "localWallet",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/hooks/wallet-hooks.ts",
									"line": 43,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/hooks/wallet-hooks.ts#L43"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../wallets/src/evm/wallets/local-wallet.ts",
									"qualifiedName": "LocalWallet"
								},
								"name": "LocalWallet",
								"package": "@thirdweb-dev/wallets"
							}
						},
						{
							"id": 41,
							"name": "magicLink",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/hooks/wallet-hooks.ts",
									"line": 44,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/hooks/wallet-hooks.ts#L44"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../wallets/src/evm/wallets/magic.ts",
									"qualifiedName": "MagicLink"
								},
								"name": "MagicLink",
								"package": "@thirdweb-dev/wallets"
							}
						},
						{
							"id": 33,
							"name": "metamask",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/hooks/wallet-hooks.ts",
									"line": 36,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/hooks/wallet-hooks.ts#L36"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../wallets/src/evm/wallets/metamask.ts",
									"qualifiedName": "MetaMaskWallet"
								},
								"name": "MetaMaskWallet",
								"package": "@thirdweb-dev/wallets"
							}
						},
						{
							"id": 51,
							"name": "okx",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/hooks/wallet-hooks.ts",
									"line": 54,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/hooks/wallet-hooks.ts#L54"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../wallets/src/evm/wallets/okx.ts",
									"qualifiedName": "OKXWallet"
								},
								"name": "OKXWallet",
								"package": "@thirdweb-dev/wallets"
							}
						},
						{
							"id": 52,
							"name": "oneKey",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/hooks/wallet-hooks.ts",
									"line": 55,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/hooks/wallet-hooks.ts#L55"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../wallets/src/evm/wallets/onekey.ts",
									"qualifiedName": "OneKeyWallet"
								},
								"name": "OneKeyWallet",
								"package": "@thirdweb-dev/wallets"
							}
						},
						{
							"id": 42,
							"name": "paper",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/hooks/wallet-hooks.ts",
									"line": 45,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/hooks/wallet-hooks.ts#L45"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../wallets/src/evm/wallets/paper-wallet.ts",
									"qualifiedName": "PaperWallet"
								},
								"name": "PaperWallet",
								"package": "@thirdweb-dev/wallets"
							}
						},
						{
							"id": 49,
							"name": "phantom",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/hooks/wallet-hooks.ts",
									"line": 52,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/hooks/wallet-hooks.ts#L52"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../wallets/src/evm/wallets/phantom.ts",
									"qualifiedName": "PhantomWallet"
								},
								"name": "PhantomWallet",
								"package": "@thirdweb-dev/wallets"
							}
						},
						{
							"id": 54,
							"name": "rabby",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/hooks/wallet-hooks.ts",
									"line": 57,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/hooks/wallet-hooks.ts#L57"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../wallets/src/evm/wallets/rabby.ts",
									"qualifiedName": "RabbyWallet"
								},
								"name": "RabbyWallet",
								"package": "@thirdweb-dev/wallets"
							}
						},
						{
							"id": 37,
							"name": "rainbowWallet",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/hooks/wallet-hooks.ts",
									"line": 40,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/hooks/wallet-hooks.ts#L40"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../wallets/src/evm/wallets/rainbow-wallet.ts",
									"qualifiedName": "RainbowWallet"
								},
								"name": "RainbowWallet",
								"package": "@thirdweb-dev/wallets"
							}
						},
						{
							"id": 45,
							"name": "safe",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/hooks/wallet-hooks.ts",
									"line": 48,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/hooks/wallet-hooks.ts#L48"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../wallets/src/evm/wallets/safe.ts",
									"qualifiedName": "SafeWallet"
								},
								"name": "SafeWallet",
								"package": "@thirdweb-dev/wallets"
							}
						},
						{
							"id": 43,
							"name": "smartWallet",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/hooks/wallet-hooks.ts",
									"line": 46,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/hooks/wallet-hooks.ts#L46"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../wallets/src/evm/wallets/smart-wallet.ts",
									"qualifiedName": "SmartWallet"
								},
								"name": "SmartWallet",
								"package": "@thirdweb-dev/wallets"
							}
						},
						{
							"id": 44,
							"name": "tokenBoundSmartWallet",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/hooks/wallet-hooks.ts",
									"line": 47,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/hooks/wallet-hooks.ts#L47"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../wallets/src/evm/wallets/token-bound-smart-wallet.ts",
									"qualifiedName": "TokenBoundSmartWallet"
								},
								"name": "TokenBoundSmartWallet",
								"package": "@thirdweb-dev/wallets"
							}
						},
						{
							"id": 46,
							"name": "trust",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/hooks/wallet-hooks.ts",
									"line": 49,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/hooks/wallet-hooks.ts#L49"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../wallets/src/evm/wallets/trust.ts",
									"qualifiedName": "TrustWallet"
								},
								"name": "TrustWallet",
								"package": "@thirdweb-dev/wallets"
							}
						},
						{
							"id": 48,
							"name": "walletConnect",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/hooks/wallet-hooks.ts",
									"line": 51,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/hooks/wallet-hooks.ts#L51"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../wallets/src/evm/wallets/wallet-connect.ts",
									"qualifiedName": "WalletConnect"
								},
								"name": "WalletConnect",
								"package": "@thirdweb-dev/wallets"
							}
						},
						{
							"id": 50,
							"name": "walletConnectV1",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/hooks/wallet-hooks.ts",
									"line": 53,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/hooks/wallet-hooks.ts#L53"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../wallets/src/evm/wallets/wallet-connect.ts",
									"qualifiedName": "WalletConnect"
								},
								"name": "WalletConnect",
								"package": "@thirdweb-dev/wallets"
							}
						},
						{
							"id": 55,
							"name": "xdefi",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/hooks/wallet-hooks.ts",
									"line": 58,
									"character": 2,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/hooks/wallet-hooks.ts#L58"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../wallets/src/evm/wallets/xdefi.ts",
									"qualifiedName": "XDEFIWallet"
								},
								"name": "XDEFIWallet",
								"package": "@thirdweb-dev/wallets"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								38,
								34,
								35,
								36,
								53,
								47,
								39,
								40,
								41,
								33,
								51,
								52,
								42,
								49,
								54,
								37,
								45,
								43,
								44,
								46,
								48,
								50,
								55
							]
						}
					],
					"sources": [
						{
							"fileName": "packages/react-core/src/core/hooks/wallet-hooks.ts",
							"line": 35,
							"character": 38,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/hooks/wallet-hooks.ts#L35"
						}
					]
				}
			}
		},
		{
			"id": 232,
			"name": "WalletInstance",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [],
				"blockTags": [
					{
						"tag": "@wallet",
						"content": []
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/react-core/src/core/types/wallet.ts",
					"line": 19,
					"character": 12,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L19"
				}
			],
			"type": {
				"type": "reference",
				"target": {
					"sourceFileName": "../wallets/src/evm/wallets/base.ts",
					"qualifiedName": "AbstractClientWallet"
				},
				"name": "AbstractClientWallet",
				"package": "@thirdweb-dev/wallets"
			}
		},
		{
			"id": 233,
			"name": "WalletOptions",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/core/types/wallet.ts",
					"line": 12,
					"character": 12,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L12"
				}
			],
			"type": {
				"type": "reference",
				"target": {
					"sourceFileName": "../wallets/src/evm/wallets/base.ts",
					"qualifiedName": "WalletOptions"
				},
				"typeArguments": [
					{
						"type": "reflection",
						"declaration": {
							"id": 234,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"children": [
								{
									"id": 235,
									"name": "chain",
									"variant": "declaration",
									"kind": 1024,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/react-core/src/core/types/wallet.ts",
											"line": 13,
											"character": 2,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L13"
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../chains/src/types.ts",
											"qualifiedName": "Chain"
										},
										"name": "Chain",
										"package": "@thirdweb-dev/chains"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										235
									]
								}
							],
							"sources": [
								{
									"fileName": "packages/react-core/src/core/types/wallet.ts",
									"line": 12,
									"character": 43,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/types/wallet.ts#L12"
								}
							]
						}
					}
				],
				"name": "WalletOptions_",
				"package": "@thirdweb-dev/wallets",
				"qualifiedName": "WalletOptions"
			}
		},
		{
			"id": 1069,
			"name": "ThirdwebSDKProvider",
			"variant": "declaration",
			"kind": 64,
			"flags": {
				"isPublic": true
			},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/providers/thirdweb-sdk-provider.tsx",
					"line": 275,
					"character": 13,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/providers/thirdweb-sdk-provider.tsx#L275"
				}
			],
			"signatures": [
				{
					"id": 1070,
					"name": "ThirdwebSDKProvider",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The "
							},
							{
								"kind": "code",
								"text": "`ThirdwebSDKProvider`"
							},
							{
								"kind": "text",
								"text": " is used when you want to provide your own wallet connection logic and just use the thirdweb SDK to interact with smart contracts and the blockchain.\nThis means you can use everything in the SDK except for wallet connection-related components and hooks. if you need those please use the "
							},
							{
								"kind": "code",
								"text": "`ThirdwebProvider`"
							},
							{
								"kind": "text",
								"text": " instead.\n\n"
							},
							{
								"kind": "code",
								"text": "`ThirdwebSDKProvider`"
							},
							{
								"kind": "text",
								"text": " allows you to set a provider & signer to the Thirdweb SDK."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "Wrap your app in the ThirdwebSDKProvider to access the SDK’s functionality from anywhere in your app.\n\n"
									},
									{
										"kind": "code",
										"text": "```tsx\nimport { ThirdwebSDKProvider } from \"@thirdweb-dev/react\";\nimport { ethers } from \"ethers\";\n\n// Example shows how to get the signer from the injected provider ( wallet extension )\nfunction Example() {\n return (\n   <ThirdwebSDKProvider\n     activeChain=\"ethereum\"\n     clientId=\"YOUR_CLIENT_ID\"\n     signer={new ethers.providers.Web3Provider(window.ethereum).getSigner()}\n   >\n     <App />\n   </ThirdwebSDKProvider>\n )\n}\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/providers/thirdweb-sdk-provider.tsx",
							"line": 275,
							"character": 35,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/providers/thirdweb-sdk-provider.tsx#L275"
						}
					],
					"typeParameter": [
						{
							"id": 1071,
							"name": "TChains",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"sourceFileName": "../chains/src/types.ts",
										"qualifiedName": "Chain"
									},
									"name": "Chain",
									"package": "@thirdweb-dev/chains"
								}
							}
						}
					],
					"parameters": [
						{
							"id": 1072,
							"name": "props",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The props for the ThirdwebSDKProvider component\n\n### clientId (optional)\nThe clientId prop is required to use the thirdweb infrastructure services with the SDK.\n\n### activeChain (optional)\nThe activeChain prop determines which chain you want your app to be operating on.\n\nThere are 1000+ chains available in the "
									},
									{
										"kind": "code",
										"text": "`@thirdweb-dev/chains`"
									},
									{
										"kind": "text",
										"text": " package. Import the chain you want and pass it to the "
									},
									{
										"kind": "code",
										"text": "`activeChain`"
									},
									{
										"kind": "text",
										"text": " prop.\n\nYou can override the imported object or pass a custom chain object with required properties.\n\nYou can get a client ID by creating an API key on [thirdweb dashboard](https://thirdweb.com/dashboard/settings/api-keys)\n\n### supportedChains (optional)\nAn array of chains supported by your app.\nThere are 1000+ chains available in the "
									},
									{
										"kind": "code",
										"text": "`@thirdweb-dev/chains`"
									},
									{
										"kind": "text",
										"text": " package. You can import the chain you want and pass it to the "
									},
									{
										"kind": "code",
										"text": "`supportedChains`"
									},
									{
										"kind": "text",
										"text": " prop in an array.\n\nIf not provided, it will default to the default supported chains supported by the thirdweb SDK.\n\n"
									},
									{
										"kind": "code",
										"text": "```tsx\nimport { Ethereum, Polygon } from \"@thirdweb-dev/chains\";\n\nfunction Example() {\n return (\n   <ThirdwebSDKProvider supportedChains={[ Ethereum, Polygon ]} activeChain={Ethereum}>\n      <App />\n   </ThirdwebSDKProvider>\n )\n}\n```"
									},
									{
										"kind": "text",
										"text": "\n\n### signer (optional)\nA signer is an abstraction of an Ethereum Account, which can be used to sign messages and initiate transactions.\n\nSince the ThirdwebSDKProvider is used when you want to provide your own wallet connection logic, you will need to provide a signer prop to inform the SDK of the wallet you want to use to sign transactions.\n\nLibraries such as ethers.js, web3.js, wagmi, etc. all provide ways to get a signer.\n\nTo use this signer with the SDK, pass it to the "
									},
									{
										"kind": "code",
										"text": "`signer`"
									},
									{
										"kind": "text",
										"text": " prop. If the signer is connected, the SDK will use this wallet to sign transactions for all write operations on the blockchain.\n\n### sdkOptions (optional)\nThe thirdweb SDK Options to pass to the thirdweb SDK which includes Gas settings, gasless transactions, RPC configuration, and more.\n\nThis Overrides any of the default values for the SDK. If not provided, it uses sensible defaults.\n\n### storageInterface (optional)\nOverride the default [Storage](https://portal.thirdweb.com/infrastructure/storage/overview) interface used by the SDK.\n\nIt allows you to create an instance of "
									},
									{
										"kind": "code",
										"text": "`ThirdwebStorage`"
									},
									{
										"kind": "text",
										"text": " with your own customized config, and pass it to the SDK.\n\n*This requires the "
									},
									{
										"kind": "code",
										"text": "`@thirdweb-dev/storage`"
									},
									{
										"kind": "text",
										"text": " package to be installed.*\n\n"
									},
									{
										"kind": "code",
										"text": "```tsx\nimport { ThirdwebSDKProvider } from \"@thirdweb-dev/react\";\nimport {\n  ThirdwebStorage,\n  StorageDownloader,\n  IpfsUploader,\n} from \"@thirdweb-dev/storage\";\n\n// Configure a custom ThirdwebStorage instance\nconst gatewayUrls = {\n  \"ipfs://\": [\n    \"https://gateway.ipfscdn.io/ipfs/\",\n    \"https://cloudflare-ipfs.com/ipfs/\",\n    \"https://ipfs.io/ipfs/\",\n  ],\n};\nconst downloader = new StorageDownloader();\nconst uploader = new IpfsUploader();\nconst storage = new ThirdwebStorage({ uploader, downloader, gatewayUrls });\n\n// Provide the custom storage instance to the SDK\nfunction MyApp() {\n  return (\n    <ThirdwebSDKProvider\n      storageInterface={storage}\n    >\n      <YourApp />\n    </ThirdwebSDKProvider>\n  );\n}\n```"
									},
									{
										"kind": "text",
										"text": "\n\n### authConfig (optional)\nThe configuration object for setting up [Auth](https://portal.thirdweb.com/wallets/auth); allowing users to sign in with their wallet.\n\n### secretKey (optional)\nsecretKey for thirdweb services. This is only required if server side rendering is being used."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/@types+react@18.2.17/node_modules/@types/react/index.d.ts",
									"qualifiedName": "React.PropsWithChildren"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 1077,
										"typeArguments": [
											{
												"type": "reference",
												"target": -1,
												"name": "TChains",
												"refersToTypeParameter": true
											}
										],
										"name": "ThirdwebSDKProviderProps",
										"package": "@thirdweb-dev/react-core"
									}
								],
								"name": "PropsWithChildren",
								"package": "@types/react",
								"qualifiedName": "React.PropsWithChildren"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@types+react@18.2.17/node_modules/@types/react/jsx-runtime.d.ts",
							"qualifiedName": "JSX.Element"
						},
						"name": "Element",
						"package": "@types/react",
						"qualifiedName": "JSX.Element"
					}
				}
			]
		},
		{
			"id": 1103,
			"name": "shortenAddress",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/utils/addresses.ts",
					"line": 28,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/utils/addresses.ts#L28"
				}
			],
			"signatures": [
				{
					"id": 1104,
					"name": "shortenAddress",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "This function shortens an address if it is a valid EVM address."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The shortened address"
									}
								]
							},
							{
								"tag": "@remarks",
								"content": [
									{
										"kind": "text",
										"text": "Note that this function will not check if the address is an ENS."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "Calling shortenAddress with extraShort set to true\n"
									},
									{
										"kind": "code",
										"text": "```ts\nconst address = shortenIfAddress(\"0x1234567890123456789012345678901234567890\", true); // result will be \"0x1234...890\"\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/utils/addresses.ts",
							"line": 28,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/utils/addresses.ts#L28"
						}
					],
					"parameters": [
						{
							"id": 1105,
							"name": "address",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The address to shorten"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1106,
							"name": "extraShort",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "If true, show the first 4 and last 3 characters"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "true"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			]
		},
		{
			"id": 625,
			"name": "useAcceptDirectListingOffer",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
					"line": 2707,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L2707"
				}
			],
			"signatures": [
				{
					"id": 626,
					"name": "useAcceptDirectListingOffer",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for accepting an offer from a direct listing on a "
							},
							{
								"kind": "code",
								"text": "`Marketplace`"
							},
							{
								"kind": "text",
								"text": " contract.\n\nAllows the seller (the user who listed the NFT for sale) to accept an offer on their listing, triggering a sale event, meaning the:\n- NFT(s) are transferred from the seller to the buyer.\n- Funds from the offeror are sent to the seller."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```tsx\nimport {\n  useAcceptDirectListingOffer,\n  useContract,\n  Web3Button,\n} from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress, \"marketplace\");\n  const {\n    mutateAsync: acceptDirectOffer,\n    isLoading,\n    error,\n  } = useAcceptDirectListingOffer(contract);\n\n  return (\n    <Web3Button\n      contractAddress={contractAddress}\n      action={() =>\n        acceptDirectOffer({\n          listingId: \"{{listing_id}}\",\n          addressOfOfferor: \"{{offeror_address}}\",\n        })\n      }\n    >\n      Accept Offer\n    </Web3Button>\n  );\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Mutation object to accept an offer on a direct listing\n"
									},
									{
										"kind": "code",
										"text": "```ts\nconst { mutateAsync, isLoading, error } = useAcceptDirectListingOffer(contract);\n```"
									},
									{
										"kind": "text",
										"text": "\n\n### options\n\nThe mutation function accepts an object as argument with the following properties:\n\n#### listingId\nThe "
									},
									{
										"kind": "code",
										"text": "`listingId`"
									},
									{
										"kind": "text",
										"text": " of the listing you wish to accept.\n\n#### addressOfOfferor\nThe wallet address of the user who made the offer you wish to accept.\n\nThe "
									},
									{
										"kind": "code",
										"text": "`useContractEvents`"
									},
									{
										"kind": "text",
										"text": " hook can be used to read all "
									},
									{
										"kind": "code",
										"text": "`NewOffer`"
									},
									{
										"kind": "text",
										"text": " events on your "
									},
									{
										"kind": "code",
										"text": "`Marketplace`"
									},
									{
										"kind": "text",
										"text": " contract."
									}
								]
							},
							{
								"tag": "@marketplace",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
							"line": 2707,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L2707"
						}
					],
					"parameters": [
						{
							"id": 627,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`Marketplace`"
									},
									{
										"kind": "text",
										"text": " contract"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts",
											"qualifiedName": "Marketplace"
										},
										"name": "Marketplace",
										"package": "@thirdweb-dev/sdk"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseMutationResult"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Omit"
								},
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 628,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/sdk/dist/declarations/src/evm/core/classes/internal/marketplace/marketplace-direct.d.ts",
													"line": 146,
													"character": 74
												}
											]
										}
									},
									{
										"type": "literal",
										"value": "data"
									}
								],
								"name": "Omit",
								"package": "typescript"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							},
							{
								"type": "reference",
								"target": 1189,
								"name": "AcceptDirectOffer",
								"package": "@thirdweb-dev/react-core"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseMutationResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 954,
			"name": "useAccountAdmins",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/account.ts",
					"line": 70,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/account.ts#L70"
				}
			],
			"signatures": [
				{
					"id": 955,
					"name": "useAccountAdmins",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Get all the admins on a smart wallet account"
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```javascript\nconst { data: accounts, isLoading, error } = useAccountAdmins(contract);\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The hook's "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property, once loaded, contains an array of all admins of the provided account"
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "Account"
									}
								]
							},
							{
								"tag": "@smartWallet",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/account.ts",
							"line": 70,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/account.ts#L70"
						}
					],
					"parameters": [
						{
							"id": 956,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of "
									},
									{
										"kind": "code",
										"text": "`SmartContract`"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/contracts/smart-contract.ts",
											"qualifiedName": "SmartContract"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/.pnpm/@ethersproject+contracts@5.7.0/node_modules/@ethersproject/contracts/src.ts/index.ts",
													"qualifiedName": "BaseContract"
												},
												"name": "BaseContract",
												"package": "@ethersproject/contracts"
											}
										],
										"name": "SmartContract",
										"package": "@thirdweb-dev/sdk"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": 1126,
									"name": "WalletAddress",
									"package": "@thirdweb-dev/react-core"
								}
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 957,
			"name": "useAccountAdminsAndSigners",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/account.ts",
					"line": 103,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/account.ts#L103"
				}
			],
			"signatures": [
				{
					"id": 958,
					"name": "useAccountAdminsAndSigners",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Get all signers and admins on a smart wallet account.\n\n"
							},
							{
								"kind": "code",
								"text": "```jsx\nimport { useAccountAdminsAndSigners } from \"@thirdweb-dev/react\";\n\nconst { data: accounts, isLoading, error } = useAccountAdminsAndSigners(contract);\n```"
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "hook's "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property containing an array of all admins and signers"
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "Account"
									}
								]
							},
							{
								"tag": "@smartWallet",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/account.ts",
							"line": 103,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/account.ts#L103"
						}
					],
					"parameters": [
						{
							"id": 959,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of "
									},
									{
										"kind": "code",
										"text": "`SmartContract`"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/contracts/smart-contract.ts",
											"qualifiedName": "SmartContract"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/.pnpm/@ethersproject+contracts@5.7.0/node_modules/@ethersproject/contracts/src.ts/index.ts",
													"qualifiedName": "BaseContract"
												},
												"name": "BaseContract",
												"package": "@ethersproject/contracts"
											}
										],
										"name": "SmartContract",
										"package": "@thirdweb-dev/sdk"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"sourceFileName": "../sdk/src/evm/types/account.ts",
										"qualifiedName": "SignerWithPermissions"
									},
									"name": "SignerWithPermissions",
									"package": "@thirdweb-dev/sdk"
								}
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 943,
			"name": "useAccountSigners",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/account.ts",
					"line": 39,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/account.ts#L39"
				}
			],
			"signatures": [
				{
					"id": 944,
					"name": "useAccountSigners",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Get all signers of account"
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```javascript\nconst { data: accounts, isLoading, error } = useAccountSigners(contract);\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "hook's "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property contains an array of all signers"
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "Account"
									}
								]
							},
							{
								"tag": "@smartWallet",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/account.ts",
							"line": 39,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/account.ts#L39"
						}
					],
					"parameters": [
						{
							"id": 945,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`SmartContract`"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/contracts/smart-contract.ts",
											"qualifiedName": "SmartContract"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/.pnpm/@ethersproject+contracts@5.7.0/node_modules/@ethersproject/contracts/src.ts/index.ts",
													"qualifiedName": "BaseContract"
												},
												"name": "BaseContract",
												"package": "@ethersproject/contracts"
											}
										],
										"name": "SmartContract",
										"package": "@thirdweb-dev/sdk"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"sourceFileName": "../sdk/src/evm/types/account.ts",
										"qualifiedName": "SignerWithPermissions"
									},
									"name": "SignerWithPermissions",
									"package": "@thirdweb-dev/sdk"
								}
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 933,
			"name": "useAccounts",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/account-factory.ts",
					"line": 38,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/account-factory.ts#L38"
				}
			],
			"signatures": [
				{
					"id": 934,
					"name": "useAccounts",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Get all accounts"
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```javascript\nconst { data: accounts, isLoading, error } = useAccounts(contract);\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Query result object that includes an array of all accounts with their associated admin"
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "AccountFactory"
									}
								]
							},
							{
								"tag": "@smartWallet",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/account-factory.ts",
							"line": 38,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/account-factory.ts#L38"
						}
					],
					"parameters": [
						{
							"id": 935,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a account factory contract"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/contracts/smart-contract.ts",
											"qualifiedName": "SmartContract"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/.pnpm/@ethersproject+contracts@5.7.0/node_modules/@ethersproject/contracts/src.ts/index.ts",
													"qualifiedName": "BaseContract"
												},
												"name": "BaseContract",
												"package": "@ethersproject/contracts"
											}
										],
										"name": "SmartContract",
										"package": "@thirdweb-dev/sdk"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 939,
			"name": "useAccountsForAddress",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/account-factory.ts",
					"line": 71,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/account-factory.ts#L71"
				}
			],
			"signatures": [
				{
					"id": 940,
					"name": "useAccountsForAddress",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Get all accounts associated with the provided address"
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```javascript\nconst { data: accountsForAddress, isLoading, error } = useAccountsForAddress(contract, \"{{account_address}}\");\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Query result object that includes an array of all accounts associated with the address"
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "AccountFactory"
									}
								]
							},
							{
								"tag": "@smartWallet",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/account-factory.ts",
							"line": 71,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/account-factory.ts#L71"
						}
					],
					"parameters": [
						{
							"id": 941,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a account factory contract"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/contracts/smart-contract.ts",
											"qualifiedName": "SmartContract"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/.pnpm/@ethersproject+contracts@5.7.0/node_modules/@ethersproject/contracts/src.ts/index.ts",
													"qualifiedName": "BaseContract"
												},
												"name": "BaseContract",
												"package": "@ethersproject/contracts"
											}
										],
										"name": "SmartContract",
										"package": "@thirdweb-dev/sdk"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						},
						{
							"id": 942,
							"name": "address",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The address to get associated accounts for"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 283,
			"name": "useActiveClaimCondition",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/claim-conditions.ts",
					"line": 135,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/claim-conditions.ts#L135"
				}
			],
			"signatures": [
				{
					"id": 284,
					"name": "useActiveClaimCondition",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for getting the active claim condition for a given drop contract.\n\nAvailable for contracts that implement the \"ClaimConditions\" interface;\nsuch as [NFT Drop](https://thirdweb.com/thirdweb.eth/DropERC721), [Edition Drop](https://thirdweb.com/thirdweb.eth/DropERC1155), and [Token Drop](https://thirdweb.com/thirdweb.eth/DropERC20)."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```javascript\nimport { useActiveClaimCondition, useContract } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress);\n  const { data, isLoading, error } = useActiveClaimCondition(contract);\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A query result object with the currently active claim condition"
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "ERC20ClaimPhasesV2 | ERC20ClaimPhasesV1 | ERC20ClaimConditionsV2 | ERC20ClaimConditionsV1 | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1 | ERC1155ClaimPhasesV2 | ERC1155ClaimPhasesV1 | ERC1155ClaimConditionsV2 | ERC1155ClaimConditionsV1"
									}
								]
							},
							{
								"tag": "@claimConditions",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/claim-conditions.ts",
							"line": 135,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/claim-conditions.ts#L135"
						}
					],
					"parameters": [
						{
							"id": 285,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of contract that implement the \"ClaimConditions\" interface;\nsuch as [NFT Drop](https://thirdweb.com/thirdweb.eth/DropERC721), [Edition Drop](https://thirdweb.com/thirdweb.eth/DropERC1155), and [Token Drop](https://thirdweb.com/thirdweb.eth/DropERC20)."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 1162,
										"name": "DropContract",
										"package": "@thirdweb-dev/react-core"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						},
						{
							"id": 286,
							"name": "tokenId",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "When using the hook with ERC1155 contracts such as the [Edition Drop](https://thirdweb.com/thirdweb.eth/DropERC1155), pass the "
									},
									{
										"kind": "code",
										"text": "`tokenId`"
									},
									{
										"kind": "text",
										"text": " as the second parameter; as each token can have unique claim conditions.\n\nPass "
									},
									{
										"kind": "code",
										"text": "`undefined`"
									},
									{
										"kind": "text",
										"text": ", or leave this field out if you are using ERC721 or ERC20 drop contracts.\n\n"
									},
									{
										"kind": "code",
										"text": "```tsx\nimport { useActiveClaimCondition, useContract } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress);\n\n  // \"data\" now includes a \"snapshot\" property that contains the allowlist.\n  const { data, isLoading, error } = useActiveClaimCondition(\n    contract,\n    0, // Token ID required for ERC1155 contracts here.\n  );\n}\n```"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts",
									"qualifiedName": "BigNumberish"
								},
								"name": "BigNumberish",
								"package": "@ethersproject/bignumber"
							}
						},
						{
							"id": 287,
							"name": "options",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Additional options to pass to the claim condition fetch\n\n#### withAllowlist\n\nBy default, the hook will not include the allowlist or \"snapshot\" in the returned data. To include the allowlist in the returned data, pass "
									},
									{
										"kind": "code",
										"text": "`withAllowlist: true`"
									},
									{
										"kind": "text",
										"text": " in options object.\n\nThis will add a snapshot property to the returned data, which contains the allowlist in an array.\n\n"
									},
									{
										"kind": "code",
										"text": "```tsx\nimport { useActiveClaimCondition, useContract } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress);\n\n  // \"data\" now includes a \"snapshot\" property that contains the allowlist.\n  const { data, isLoading, error } = useActiveClaimCondition(\n    contract,\n    undefined, // Token ID required for ERC1155 contracts here.\n    {\n      withAllowlist: true,\n    },\n  );\n}\n```"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../sdk/src/evm/types/claim-conditions/claim-conditions.ts",
									"qualifiedName": "ClaimConditionFetchOptions"
								},
								"name": "ClaimConditionFetchOptions",
								"package": "@thirdweb-dev/sdk"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "union",
								"types": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/types/claim-conditions/claim-conditions.ts",
											"qualifiedName": "ClaimCondition"
										},
										"name": "ClaimCondition",
										"package": "@thirdweb-dev/sdk"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 310,
			"name": "useActiveClaimConditionForWallet",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/claim-conditions.ts",
					"line": 533,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/claim-conditions.ts#L533"
				}
			],
			"signatures": [
				{
					"id": 311,
					"name": "useActiveClaimConditionForWallet",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for getting the active claim condition on a drop contract for a specific wallet address.\n\nEach wallet address can have unique claim conditions at any given time. This hook allows you to get the active claim condition for a specific wallet address at this time.\n\nThis is available for available for contracts that implement the \"ClaimConditions\" interface; such as [NFT Drop](https://thirdweb.com/thirdweb.eth/DropERC721), [Edition Drop](https://thirdweb.com/thirdweb.eth/DropERC1155), and [Token Drop](https://thirdweb.com/thirdweb.eth/DropERC20).\n\n ---\n\n- Returns the claim condition specific to the wallet address if found in the claimer snapshot.\n- Returns the default claim condition on the contract if the address is not found in the claimer snapshot.\n- Populates the error field if there is no active claim condition on the contract."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```javascript\nimport {\n  useActiveClaimConditionForWallet,\n  useContract,\n  useAddress,\n} from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const address = useAddress();\n  const { contract } = useContract(contractAddress);\n  const { data, isLoading, error } = useActiveClaimConditionForWallet(\n    contract,\n    address,\n  );\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The active claim condition for the wallet address or "
									},
									{
										"kind": "code",
										"text": "`null`"
									},
									{
										"kind": "text",
										"text": " if there is no active claim condition"
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "ERC20ClaimPhasesV2 | ERC20ClaimPhasesV1 | ERC20ClaimConditionsV2 | ERC20ClaimConditionsV1 | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1 | ERC1155ClaimPhasesV2 | ERC1155ClaimPhasesV1 | ERC1155ClaimConditionsV2 | ERC1155ClaimConditionsV1"
									}
								]
							},
							{
								"tag": "@claimConditions",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/claim-conditions.ts",
							"line": 533,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/claim-conditions.ts#L533"
						}
					],
					"parameters": [
						{
							"id": 312,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a contract that extends the  ERC20, ERC721 or ERC1155 spec and implements the \"ClaimConditions\" extension."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 1162,
										"name": "DropContract",
										"package": "@thirdweb-dev/react-core"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						},
						{
							"id": 313,
							"name": "walletAddress",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The wallet address to check the active claim condition for. You can use the "
									},
									{
										"kind": "code",
										"text": "`useAddress`"
									},
									{
										"kind": "text",
										"text": " hook to get the currently connected wallet's address."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						},
						{
							"id": 314,
							"name": "tokenId",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "When using the hook with ERC1155 contracts, pass the "
									},
									{
										"kind": "code",
										"text": "`tokenId`"
									},
									{
										"kind": "text",
										"text": " as the third parameter; as each token can have unique claim conditions.\n\nPass "
									},
									{
										"kind": "code",
										"text": "`undefined`"
									},
									{
										"kind": "text",
										"text": ", or leave this field out if you are using ERC721 or ERC20 drop contracts."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts",
									"qualifiedName": "BigNumberish"
								},
								"name": "BigNumberish",
								"package": "@ethersproject/bignumber"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "union",
								"types": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/types/claim-conditions/claim-conditions.ts",
											"qualifiedName": "ClaimCondition"
										},
										"name": "ClaimCondition",
										"package": "@thirdweb-dev/sdk"
									},
									{
										"type": "literal",
										"value": null
									}
								]
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 561,
			"name": "useActiveListings",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
					"line": 1340,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L1340"
				}
			],
			"signatures": [
				{
					"id": 562,
					"name": "useActiveListings",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for fetching all active listings from a "
							},
							{
								"kind": "code",
								"text": "`Marketplace`"
							},
							{
								"kind": "text",
								"text": " contract.\n\n__Note: This hook is only for Marketplace contracts. For Marketplace V3 contracts, use "
							},
							{
								"kind": "code",
								"text": "`useValidDirectListings`"
							},
							{
								"kind": "text",
								"text": " or "
							},
							{
								"kind": "code",
								"text": "`useValidEnglishAuctions`"
							},
							{
								"kind": "text",
								"text": " instead__"
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```javascript\nimport { useActiveListings, useContract } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress, \"marketplace\");\n  const { data, isLoading, error } = useActiveListings(contract);\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The hook's "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property, once loaded, returns an array containing both "
									},
									{
										"kind": "code",
										"text": "`AuctionListing`"
									},
									{
										"kind": "text",
										"text": " and "
									},
									{
										"kind": "code",
										"text": "`DirectListing`"
									},
									{
										"kind": "text",
										"text": " objects.\n\nUse the "
									},
									{
										"kind": "code",
										"text": "`type`"
									},
									{
										"kind": "text",
										"text": " property to determine which type of listing each one is.\n\n#### AuctionListing\n\n"
									},
									{
										"kind": "code",
										"text": "```ts\n{\n    // The id of the listing\n    id: string;\n\n    // The address of the asset being listed.\n    assetContractAddress: string;\n\n    // The ID of the token to list.\n    tokenId: BigNumberish;\n\n    // The asset being listed.\n    asset: NFTMetadata;\n\n    // The start time of the listing.\n    startTimeInEpochSeconds: BigNumberish;\n\n    // Number of seconds until the auction expires.\n    endTimeInEpochSeconds: BigNumberish;\n\n    // The quantity of tokens in the listing.\n    // For ERC721s, this value should always be 1\n    quantity: BigNumberish;\n\n    // The address of the currency to accept for the listing.\n    currencyContractAddress: string;\n\n    // The reserve price is the minimum price that a bid must be in order to be accepted.\n    reservePrice: BigNumber;\n\n    // The buyout price of the listing.\n    buyoutPrice: BigNumber;\n\n    // The `CurrencyValue` of the buyout price listing.\n    // Useful for displaying the price information.\n    buyoutCurrencyValuePerToken: CurrencyValue;\n\n    // The `CurrencyValue` of the reserve price.\n    // Useful for displaying the price information.\n    reservePriceCurrencyValuePerToken: CurrencyValue;\n\n    // The address of the seller.\n    sellerAddress: string;\n\n    // Listing type Enum\n    type: ListingType.Auction;\n}\n```"
									},
									{
										"kind": "text",
										"text": "\n\n### DirectListing\n\n"
									},
									{
										"kind": "code",
										"text": "```ts\n{\n    // The id of the listing.\n    id: string;\n\n    //The address of the asset being listed.\n    assetContractAddress: string;\n\n    // The ID of the token to list.\n    tokenId: BigNumberish;\n\n    //The asset being listed.\n    asset: NFTMetadata;\n\n    //The start time of the listing.\n    startTimeInSeconds: BigNumberish;\n\n    //Number of seconds until the listing expires.\n    secondsUntilEnd: BigNumberish;\n\n    // The quantity of tokens to include in the listing.\n    // For ERC721s, this value should always be 1\n    quantity: BigNumberish;\n\n    // The address of the currency to accept for the listing.\n    currencyContractAddress: string;\n\n    // The `CurrencyValue` of the listing. Useful for displaying the price information.\n    buyoutCurrencyValuePerToken: CurrencyValue;\n\n    // The buyout price of the listing.\n    buyoutPrice: BigNumber;\n\n    // The address of the seller.\n    sellerAddress: string;\n\n    // Listing type Enum\n    type: ListingType.Direct;\n}\n```"
									}
								]
							},
							{
								"tag": "@marketplace",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
							"line": 1340,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L1340"
						}
					],
					"parameters": [
						{
							"id": 563,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`Marketplace`"
									},
									{
										"kind": "text",
										"text": " contract"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts",
											"qualifiedName": "Marketplace"
										},
										"name": "Marketplace",
										"package": "@thirdweb-dev/sdk"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						},
						{
							"id": 564,
							"name": "filter",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "By default, the hook returns all active listings from the marketplace.\n\nYou can filter the results by providing a filter object as the second argument for the sake of pagination & filtering\n\n"
									},
									{
										"kind": "code",
										"text": "```tsx\nimport { useActiveListings, useContract } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress, \"marketplace\");\n\n  const { data, isLoading, error } = useActiveListings(\n    contract,\n    {\n      seller: \"{{wallet_address}}\", // Filter by seller\n      tokenContract: \"{{contract_address}}\", // Filter by token contract\n      offeror: \"{{wallet_address}}\", // Filter by offeror\n      tokenId: \"{{token_id}}\", // Filter by token ID\n      count: 10, // Limit the number of results\n      start: 0, // Start from the nth result (useful for pagination)\n    },\n  );\n}\n```"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../sdk/src/evm/types/marketplace/MarketPlaceFilter.ts",
									"qualifiedName": "MarketplaceFilter"
								},
								"name": "MarketplaceFilter",
								"package": "@thirdweb-dev/sdk"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "array",
								"elementType": {
									"type": "union",
									"types": [
										{
											"type": "reference",
											"target": {
												"sourceFileName": "../sdk/src/evm/types/marketplace/AuctionListing.ts",
												"qualifiedName": "AuctionListing"
											},
											"name": "AuctionListing",
											"package": "@thirdweb-dev/sdk"
										},
										{
											"type": "reference",
											"target": {
												"sourceFileName": "../sdk/src/evm/types/marketplace/DirectListing.ts",
												"qualifiedName": "DirectListing"
											},
											"name": "DirectListing",
											"package": "@thirdweb-dev/sdk"
										}
									]
								}
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 946,
			"name": "useAddAdmin",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/account.ts",
					"line": 284,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/account.ts#L284"
				}
			],
			"signatures": [
				{
					"id": 947,
					"name": "useAddAdmin",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Add an additional admin on the smart wallet account"
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useAddAdmin } from \"@thirdweb-dev/react\";\n\nconst adminAddress = \"{{admin_address}}\";\n\nconst Component = () => {\n  const { mutate: addAdmin, isLoading, error } = useAddAdmin();\n\n  if (error) {\n    console.error(\"failed to add admin\", error);\n  }\n\n  return (\n    <button disabled={isLoading} onClick={() => addAdmin(adminAddress)}>\n      Add admin\n    </button>\n  );\n};\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "mutation object to add given address as an admin"
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "Account"
									}
								]
							},
							{
								"tag": "@smartWallet",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/account.ts",
							"line": 284,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/account.ts#L284"
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseMutationResult"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../sdk/src/evm/core/types.ts",
									"qualifiedName": "TransactionResult"
								},
								"name": "TransactionResult",
								"package": "@thirdweb-dev/sdk"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						],
						"name": "UseMutationResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 119,
			"name": "useAddress",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/wallet.ts",
					"line": 152,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/wallet.ts#L152"
				}
			],
			"signatures": [
				{
					"id": 120,
					"name": "useAddress",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Get the address of the connected wallet.\n\nReturns "
							},
							{
								"kind": "code",
								"text": "`undefined`"
							},
							{
								"kind": "text",
								"text": " if no wallet is connected."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```tsx\nimport { useAddress } from \"@thirdweb-dev/react\"\n\nfunction Example() {\n  const address = useAddress()\n\n  return <div>{address}</div>\n}\n```"
									}
								]
							},
							{
								"tag": "@walletConnection",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/wallet.ts",
							"line": 152,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/wallet.ts#L152"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "undefined"
							}
						]
					}
				}
			]
		},
		{
			"id": 825,
			"name": "useAirdropNFT",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/nft.ts",
					"line": 910,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/nft.ts#L910"
				}
			],
			"signatures": [
				{
					"id": 826,
					"name": "useAirdropNFT",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for airdropping ["
							},
							{
								"kind": "code",
								"text": "`ERC1155`"
							},
							{
								"kind": "text",
								"text": "](https://portal.thirdweb.com/contracts/build/extensions/erc-1155/ERC1155) NFT tokens to multiple wallet addresses at once.\n\nAvailable to use on smart contracts that implement the "
							},
							{
								"kind": "code",
								"text": "`ERC1155`"
							},
							{
								"kind": "text",
								"text": " standard.\n\nPerforms a batch transfer from the connected wallet to the specified addresses.\nThis means you need to have the total number of tokens you wish to airdrop available in the wallet that performs this transaction."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useAirdropNFT, useContract, Web3Button } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress);\n  const { mutateAsync: airdropNft, isLoading, error } = useAirdropNFT(contract);\n\n  return (\n    <Web3Button\n      contractAddress={contractAddress}\n      action={() =>\n        airdropNft({\n          addresses: [\n            {\n              address: \"0x123\",\n              quantity: 1,\n            },\n          ],\n          tokenId: tokenId,\n        })\n      }\n    >\n      Airdrop NFT\n    </Web3Button>\n  );\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Mutation object that to transfer batch NFTs\n\n"
									},
									{
										"kind": "code",
										"text": "```ts\nconst { mutateAsync, isLoading, error } = useAirdropNFT(contract);\n```"
									},
									{
										"kind": "text",
										"text": "\n\n### options\nThe mutation function takes an object with the following properties:\n\n#### tokenId\nThe token ID of the NFT to airdrop.\n\n#### addresses\nAn array of objects containing an "
									},
									{
										"kind": "code",
										"text": "`address`"
									},
									{
										"kind": "text",
										"text": " and "
									},
									{
										"kind": "code",
										"text": "`quantity`"
									},
									{
										"kind": "text",
										"text": " of NFTs to airdrop to each address."
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "ERC1155"
									}
								]
							},
							{
								"tag": "@nft",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/nft.ts",
							"line": 910,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/nft.ts#L910"
						}
					],
					"parameters": [
						{
							"id": 827,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`Erc1155`"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../sdk/src/evm/core/classes/erc-1155.ts",
									"qualifiedName": "Erc1155"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../sdk/src/evm/types/eips.ts",
													"qualifiedName": "BaseERC1155"
												},
												"name": "BaseERC1155",
												"package": "@thirdweb-dev/sdk"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../sdk/src/evm/types/eips.ts",
													"qualifiedName": "BaseSignatureMintERC1155"
												},
												"name": "BaseSignatureMintERC1155",
												"package": "@thirdweb-dev/sdk"
											}
										]
									}
								],
								"name": "Erc1155",
								"package": "@thirdweb-dev/sdk"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseMutationResult"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Omit"
								},
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 828,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/sdk/dist/declarations/src/evm/core/classes/erc-1155.d.ts",
													"line": 233,
													"character": 91
												}
											]
										}
									},
									{
										"type": "literal",
										"value": "data"
									}
								],
								"name": "Omit",
								"package": "typescript"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							},
							{
								"type": "reference",
								"target": 1142,
								"name": "AirdropNFTParams",
								"package": "@thirdweb-dev/react-core"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseMutationResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 843,
			"name": "useAllRoleMembers",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/roles.ts",
					"line": 98,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/roles.ts#L98"
				}
			],
			"signatures": [
				{
					"id": 844,
					"name": "useAllRoleMembers",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for getting all wallet addresses that have a role in a smart contract.\n\nAvailable to use on contracts that implement ["
							},
							{
								"kind": "code",
								"text": "`Permissions`"
							},
							{
								"kind": "text",
								"text": "](https://portal.thirdweb.com/contracts/build/extensions/general/Permissions)."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useAllRoleMembers, useContract } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress);\n  const { data, isLoading, error } = useAllRoleMembers(contract);\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The hook's "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property, once loaded, is an object, where the keys are the role names and the values are arrays of wallet addresses that have that role.\n\nFor example, if the contract has two roles, "
									},
									{
										"kind": "code",
										"text": "`admin`"
									},
									{
										"kind": "text",
										"text": " and "
									},
									{
										"kind": "code",
										"text": "`transfer`"
									},
									{
										"kind": "text",
										"text": ", and the "
									},
									{
										"kind": "code",
										"text": "`admin`"
									},
									{
										"kind": "text",
										"text": " role has two members, the "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property will look like this:\n\n"
									},
									{
										"kind": "code",
										"text": "```ts\n{\n  admin: [\"0x1234\", \"0x5678\"],\n  transfer: [],\n}\n```"
									},
									{
										"kind": "text",
										"text": "\n\n#### Type\n\n"
									},
									{
										"kind": "code",
										"text": "```ts\nRecord<\n  | \"admin\"\n  | \"transfer\"\n  | \"minter\"\n  | \"pauser\"\n  | \"lister\"\n  | \"asset\"\n  | \"unwrap\"\n  | \"factory\"\n  | (string & {}),\n  string[]\n> | undefined;\n```"
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "PermissionsEnumerable"
									}
								]
							},
							{
								"tag": "@permissionControl",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/roles.ts",
							"line": 98,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/roles.ts#L98"
						}
					],
					"typeParameter": [
						{
							"id": 845,
							"name": "TContract",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/evm/hooks/async/roles.ts",
									"qualifiedName": "ContractWithRoles"
								},
								"name": "ContractWithRoles",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"parameters": [
						{
							"id": 846,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`SmartContract`"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": -1,
										"name": "TContract",
										"refersToTypeParameter": true
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Awaited"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 877,
												"typeArguments": [
													{
														"type": "reference",
														"target": -1,
														"name": "TContract",
														"refersToTypeParameter": true
													}
												],
												"name": "RolesForContract",
												"package": "@thirdweb-dev/react-core"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								],
								"name": "Awaited",
								"package": "typescript"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 1050,
			"name": "useAppURI",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/app.ts",
					"line": 33,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/app.ts#L33"
				}
			],
			"signatures": [
				{
					"id": 1051,
					"name": "useAppURI",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Get App URI of the contract"
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```javascript\nconst { data: contractMetadata, isLoading, error } = useAppURI(contract);\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Query result object that includes the appURI of the contract"
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "AppURI"
									}
								]
							},
							{
								"tag": "@appURI",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/app.ts",
							"line": 33,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/app.ts#L33"
						}
					],
					"typeParameter": [
						{
							"id": 1052,
							"name": "TContract",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../sdk/src/evm/contracts/index.ts",
									"qualifiedName": "ValidContractInstance"
								},
								"name": "ValidContractInstance",
								"package": "@thirdweb-dev/sdk"
							}
						}
					],
					"parameters": [
						{
							"id": 1053,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The "
									},
									{
										"kind": "code",
										"text": "`SmartContract`"
									},
									{
										"kind": "text",
										"text": " instance of the contract to get the appURI of"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": -1,
										"name": "TContract",
										"refersToTypeParameter": true
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 573,
			"name": "useAuctionWinner",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
					"line": 1539,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L1539"
				}
			],
			"signatures": [
				{
					"id": 574,
					"name": "useAuctionWinner",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for getting the winner of an auction (or english auction) on a "
							},
							{
								"kind": "code",
								"text": "`Marketplace`"
							},
							{
								"kind": "text",
								"text": " or [MarketplaceV3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) contract."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```javascript\nimport { useAuctionWinner, useContract } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress, \"marketplace\");\n  const { data, isLoading, error } = useAuctionWinner(\n    contract,\n    listingId, // The listing id of the item that you want to get the auction winner for\n  );\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The hook's "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property, once loaded, contains a "
									},
									{
										"kind": "code",
										"text": "`string`"
									},
									{
										"kind": "text",
										"text": " representing the address of the auction winner, or "
									},
									{
										"kind": "code",
										"text": "`undefined`"
									},
									{
										"kind": "text",
										"text": " if there is no winner."
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "EnglishAuctions"
									}
								]
							},
							{
								"tag": "@marketplace",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
							"line": 1539,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L1539"
						}
					],
					"parameters": [
						{
							"id": 575,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`Marketplace`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`MarketplaceV3`"
									},
									{
										"kind": "text",
										"text": " contract"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts",
													"qualifiedName": "Marketplace"
												},
												"name": "Marketplace",
												"package": "@thirdweb-dev/sdk"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/marketplacev3.ts",
													"qualifiedName": "MarketplaceV3"
												},
												"name": "MarketplaceV3",
												"package": "@thirdweb-dev/sdk"
											}
										]
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						},
						{
							"id": 576,
							"name": "listingId",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The listing ID of the item that you want to get the auction winner for.\n\nThe listing must be an auction (or english auction) listing, the hook will populate the error property if it is not."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts",
											"qualifiedName": "BigNumberish"
										},
										"name": "BigNumberish",
										"package": "@ethersproject/bignumber"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 960,
			"name": "useAuth",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/auth/useAuth.ts",
					"line": 10,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/auth/useAuth.ts#L10"
				}
			],
			"signatures": [
				{
					"id": 961,
					"name": "useAuth",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook to get "
							},
							{
								"kind": "code",
								"text": "`ThirdwebAuth`"
							},
							{
								"kind": "text",
								"text": " instance"
							}
						],
						"blockTags": [
							{
								"tag": "@auth",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/auth/useAuth.ts",
							"line": 10,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/auth/useAuth.ts#L10"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../auth/src/core/auth.ts",
									"qualifiedName": "ThirdwebAuth"
								},
								"name": "ThirdwebAuth",
								"package": "@thirdweb-dev/auth"
							}
						]
					}
				}
			]
		},
		{
			"id": 108,
			"name": "useBalance",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/wallet.ts",
					"line": 48,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/wallet.ts#L48"
				}
			],
			"signatures": [
				{
					"id": 109,
					"name": "useBalance",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for getting a wallet's current balance of native or (optional) ERC20 token balance"
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "### get the balance of the native token\n\n"
									},
									{
										"kind": "code",
										"text": "```jsx\nimport { useBalance } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { data, isLoading } = useBalance();\n}\n```"
									},
									{
										"kind": "text",
										"text": "\n\n### get the balance of any other token\n\n"
									},
									{
										"kind": "code",
										"text": "```jsx\nimport { useBalance } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { data, isLoading } = useBalance(tokenAddress);\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The hook's "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property contains the token's balance in the "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " property as a "
									},
									{
										"kind": "code",
										"text": "`BigNumber`"
									},
									{
										"kind": "text",
										"text": " object."
									}
								]
							},
							{
								"tag": "@token",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/wallet.ts",
							"line": 48,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/wallet.ts#L48"
						}
					],
					"parameters": [
						{
							"id": 110,
							"name": "tokenAddress",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The address of the token contract, if not provided, it defaults to the native token"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "union",
								"types": [
									{
										"type": "reflection",
										"declaration": {
											"id": 111,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 115,
													"name": "decimals",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"sources": [
														{
															"fileName": "packages/react-core/src/evm/hooks/wallet.ts",
															"line": 53,
															"character": 6,
															"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/wallet.ts#L53"
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 116,
													"name": "displayValue",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"sources": [
														{
															"fileName": "packages/react-core/src/evm/hooks/wallet.ts",
															"line": 54,
															"character": 6,
															"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/wallet.ts#L54"
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 114,
													"name": "name",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"sources": [
														{
															"fileName": "packages/react-core/src/evm/hooks/wallet.ts",
															"line": 52,
															"character": 6,
															"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/wallet.ts#L52"
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 112,
													"name": "symbol",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"sources": [
														{
															"fileName": "packages/react-core/src/evm/hooks/wallet.ts",
															"line": 50,
															"character": 6,
															"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/wallet.ts#L50"
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 113,
													"name": "value",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"sources": [
														{
															"fileName": "packages/react-core/src/evm/hooks/wallet.ts",
															"line": 51,
															"character": 6,
															"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/wallet.ts#L51"
														}
													],
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts",
															"qualifiedName": "BigNumber"
														},
														"name": "BigNumber",
														"package": "@ethersproject/bignumber"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														115,
														116,
														114,
														112,
														113
													]
												}
											],
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/wallet.ts",
													"line": 49,
													"character": 4,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/wallet.ts#L49"
												}
											]
										}
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 127,
			"name": "useBalanceForAddress",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/wallet.ts",
					"line": 98,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/wallet.ts#L98"
				}
			],
			"signatures": [
				{
					"id": 128,
					"name": "useBalanceForAddress",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "This hook is similar to the "
							},
							{
								"kind": "code",
								"text": "`useBalance`"
							},
							{
								"kind": "text",
								"text": " hook, but it for fetching the native token balance of any given wallet address.\n\nThis hook only fetches the native token balance of the given wallet address. If you want to get the ERC20 balance from a given wallet, use "
							},
							{
								"kind": "code",
								"text": "`useTokenBalance`"
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nconst { data, isLoading } = useBalanceForAddress(walletAddress)\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The hook's "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property contains the native token's balance in the "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " property as a "
									},
									{
										"kind": "code",
										"text": "`BigNumber`"
									},
									{
										"kind": "text",
										"text": " object."
									}
								]
							},
							{
								"tag": "@token",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/wallet.ts",
							"line": 98,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/wallet.ts#L98"
						}
					],
					"parameters": [
						{
							"id": 129,
							"name": "walletAddress",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The address of the wallet that you want to get the native balance"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "reflection",
								"declaration": {
									"id": 130,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 134,
											"name": "decimals",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/wallet.ts",
													"line": 103,
													"character": 4,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/wallet.ts#L103"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 135,
											"name": "displayValue",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/wallet.ts",
													"line": 104,
													"character": 4,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/wallet.ts#L104"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 133,
											"name": "name",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/wallet.ts",
													"line": 102,
													"character": 4,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/wallet.ts#L102"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 131,
											"name": "symbol",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/wallet.ts",
													"line": 100,
													"character": 4,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/wallet.ts#L100"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 132,
											"name": "value",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/wallet.ts",
													"line": 101,
													"character": 4,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/wallet.ts#L101"
												}
											],
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts",
													"qualifiedName": "BigNumber"
												},
												"name": "BigNumber",
												"package": "@ethersproject/bignumber"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												134,
												135,
												133,
												131,
												132
											]
										}
									],
									"sources": [
										{
											"fileName": "packages/react-core/src/evm/hooks/wallet.ts",
											"line": 99,
											"character": 2,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/wallet.ts#L99"
										}
									]
								}
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 487,
			"name": "useBatchesToReveal",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/drop.ts",
					"line": 299,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/drop.ts#L299"
				}
			],
			"signatures": [
				{
					"id": 488,
					"name": "useBatchesToReveal",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for fetching batches of lazy-minted NFTs that were set to be revealed at a later date, but have not yet been revealed.\n\nAvailable to use on contracts that implement the [ERC721Revealable](https://portal.thirdweb.com/contracts/build/extensions/erc-721/ERC721Revealable)\nor [ERC1155Revealable](https://portal.thirdweb.com/contracts/build/extensions/erc-1155/ERC1155Revealable) interfaces,\nsuch as the [NFT Drop](https://thirdweb.com/thirdweb.eth/DropERC721)\nand [Edition Drop](https://thirdweb.com/thirdweb.eth/DropERC1155) smart contracts."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```tsx\nimport { useBatchesToReveal, useContract } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress);\n  const { data: batches, isLoading, error } = useBatchesToReveal(contract);\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The hook's "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property, once loaded, contains an array of batches that need to be revealed.\n\nEach batch is an object with the following properties:\n\n"
									},
									{
										"kind": "code",
										"text": "```ts\n{\n  batchId: BigNumber;\n  batchUri: string;\n  placeholderMetadata: NFTMetadata;\n}\n```"
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "ERC721Revealable | ERC1155Revealable"
									}
								]
							},
							{
								"tag": "@delayedReveal",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/drop.ts",
							"line": 299,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/drop.ts#L299"
						}
					],
					"typeParameter": [
						{
							"id": 489,
							"name": "TContract",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 1163,
								"name": "RevealableContract",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"parameters": [
						{
							"id": 490,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`RevealableContract`"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": -1,
										"name": "TContract",
										"refersToTypeParameter": true
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"sourceFileName": "../sdk/src/evm/types/delayed-reveal.ts",
										"qualifiedName": "BatchToReveal"
									},
									"name": "BatchToReveal",
									"package": "@thirdweb-dev/sdk"
								}
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 577,
			"name": "useBidBuffer",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
					"line": 1609,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L1609"
				}
			],
			"signatures": [
				{
					"id": 578,
					"name": "useBidBuffer",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for determining the current bid buffer on a "
							},
							{
								"kind": "code",
								"text": "`Marketplace`"
							},
							{
								"kind": "text",
								"text": " or [Marketplace V3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) contract.\n\nThe bid buffer is what percentage higher the next bid must be than the current highest bid, or the starting price if there are no bids."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```javascript\nimport { useBidBuffer, useContract } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress, \"marketplace\");\n  const {\n    data: bidBuffer,\n    isLoading,\n    error,\n  } = useBidBuffer(contract, listingId);\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The hook's "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property, once loaded, returns a "
									},
									{
										"kind": "code",
										"text": "`BigNumber`"
									},
									{
										"kind": "text",
										"text": " value representing the current bid buffer.\n\nThe "
									},
									{
										"kind": "code",
										"text": "`bidBuffer`"
									},
									{
										"kind": "text",
										"text": " value returned is in percentage format.\nFor example, a value of "
									},
									{
										"kind": "code",
										"text": "`500`"
									},
									{
										"kind": "text",
										"text": " means that the next bid must be 5% higher than the current highest bid."
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "EnglishAuctions"
									}
								]
							},
							{
								"tag": "@marketplace",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
							"line": 1609,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L1609"
						}
					],
					"parameters": [
						{
							"id": 579,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`Marketplace`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`MarketplaceV3`"
									},
									{
										"kind": "text",
										"text": " contract"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts",
													"qualifiedName": "Marketplace"
												},
												"name": "Marketplace",
												"package": "@thirdweb-dev/sdk"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/marketplacev3.ts",
													"qualifiedName": "MarketplaceV3"
												},
												"name": "MarketplaceV3",
												"package": "@thirdweb-dev/sdk"
											}
										]
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						},
						{
							"id": 580,
							"name": "listingId",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The listing ID of the item that you want to get the bid buffer for.\nThe listing must be an auction (or english auction) listing, the hook will populate the "
									},
									{
										"kind": "code",
										"text": "`error`"
									},
									{
										"kind": "text",
										"text": " property if it is not."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts",
											"qualifiedName": "BigNumberish"
										},
										"name": "BigNumberish",
										"package": "@ethersproject/bignumber"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts",
									"qualifiedName": "BigNumber"
								},
								"name": "BigNumber",
								"package": "@ethersproject/bignumber"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 829,
			"name": "useBurnNFT",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/nft.ts",
					"line": 990,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/nft.ts#L990"
				}
			],
			"signatures": [
				{
					"id": 830,
					"name": "useBurnNFT",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for burning a NFT on a smart contract.\n\nAvailable to use on smart contracts that implement the ["
							},
							{
								"kind": "code",
								"text": "`ERC721`"
							},
							{
								"kind": "text",
								"text": "](https://portal.thirdweb.com/contracts/build/extensions/erc-721/ERC721)\nor ["
							},
							{
								"kind": "code",
								"text": "`ERC1155`"
							},
							{
								"kind": "text",
								"text": "](https://portal.thirdweb.com/contracts/build/extensions/erc-1155/ERC1155) standard."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useBurnNFT, useContract, Web3Button } from \"@thirdweb-dev/react\";\n\nconst contractAddress = \"{{contract_address}}\";\n// The tokenId of the NFT you want to burn\nconst tokenIdToBurn = \"{{tokenId}}}}\";\nconst amount = 1;\n\nfunction App() {\n  const { contract } = useContract(contractAddress);\n  const { mutateAsync: burnNft, isLoading, error } = useBurnNFT(contract);\n\n  return (\n    <Web3Button\n      contractAddress={contractAddress}\n      action={() =>\n        burnNft({\n          tokenId: tokenIdToBurn,\n          amount: amount,\n        })\n      }\n    >\n      Burn NFT\n    </Web3Button>\n  );\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Mutation object that to burn an NFT token from the connected wallet\n\n"
									},
									{
										"kind": "code",
										"text": "```ts\nconst { mutateAsync, isLoading, error } = useBurnNFT(contract);\n```"
									},
									{
										"kind": "text",
										"text": "\n\n### options\nThe mutation function takes an object with the following properties:\n\n#### tokenId\nThe token ID of the NFT you want to burn.\n\n#### amount (optional)\nWhen using ERC1155 NFTs, you can specify the quantity you want to burn.\n\nDefaults value is "
									},
									{
										"kind": "code",
										"text": "`1`"
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "ERC721Burnable | ERC1155Burnable"
									}
								]
							},
							{
								"tag": "@nft",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/nft.ts",
							"line": 990,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/nft.ts#L990"
						}
					],
					"typeParameter": [
						{
							"id": 831,
							"name": "TContract",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 1134,
								"name": "NFTContract",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"parameters": [
						{
							"id": 832,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`NFTContract`"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": -1,
										"name": "TContract",
										"refersToTypeParameter": true
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseMutationResult"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Omit"
								},
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 833,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/sdk/dist/declarations/src/evm/core/classes/erc-1155.d.ts",
													"line": 1103,
													"character": 68
												}
											]
										}
									},
									{
										"type": "literal",
										"value": "data"
									}
								],
								"name": "Omit",
								"package": "typescript"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							},
							{
								"type": "reference",
								"target": 1158,
								"name": "BurnNFTParams",
								"package": "@thirdweb-dev/react-core"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseMutationResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 922,
			"name": "useBurnToken",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/token.ts",
					"line": 669,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/token.ts#L669"
				}
			],
			"signatures": [
				{
					"id": 923,
					"name": "useBurnToken",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for burning ERC20 tokens on a smart contract.\n\nAvailable to use on smart contracts that implement the [ERC20](https://portal.thirdweb.com/contracts/build/extensions/erc-20/ERC20) standard."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useBurnToken, useContract, Web3Button } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress);\n  const { mutateAsync: burnToken, isLoading, error } = useBurnToken(contract);\n\n  return (\n    <Web3Button\n      contractAddress={contractAddress}\n      action={() =>\n        burnToken({\n          amount: \"10\", // Amount of tokens to burn\n        })\n      }\n    >\n      Burn Token\n    </Web3Button>\n  );\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A mutation object to burn tokens from the connected wallet\n"
									},
									{
										"kind": "code",
										"text": "```ts\nconst { mutateAsync, isLoading, error } = useBurnToken(contract);\n```"
									},
									{
										"kind": "text",
										"text": "\n\n### options\nThe mutation function takes an object as an argument with the following properties:\n\n#### amount (required)\nThe amount of tokens to burn.\n\nThe wallet initiating this transaction must have at least this amount of tokens."
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "ERC20Burnable"
									}
								]
							},
							{
								"tag": "@token",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/token.ts",
							"line": 669,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/token.ts#L669"
						}
					],
					"parameters": [
						{
							"id": 924,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`TokenContract`"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 1135,
										"name": "TokenContract",
										"package": "@thirdweb-dev/react-core"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseMutationResult"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Omit"
								},
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 925,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/sdk/dist/declarations/src/evm/core/classes/erc-20.d.ts",
													"line": 354,
													"character": 48
												}
											]
										}
									},
									{
										"type": "literal",
										"value": "data"
									}
								],
								"name": "Omit",
								"package": "typescript"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							},
							{
								"type": "reference",
								"target": 1131,
								"name": "TokenBurnParams",
								"package": "@thirdweb-dev/react-core"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseMutationResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 769,
			"name": "useBuyDirectListing",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
					"line": 2991,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L2991"
				}
			],
			"signatures": [
				{
					"id": 770,
					"name": "useBuyDirectListing",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for buying a direct listing on a [Marketplace V3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) smart contract.\n\nIf the listing is in a currency that is not native to the chain (e.g. not Ether on Ethereum), the hook will prompt the user\nto approve the marketplace contract to spend the currency on their behalf before performing the buy.\n\n"
							},
							{
								"kind": "code",
								"text": "```jsx\nimport { useBuyDirectListing } from \"@thirdweb-dev/react\";\n\nconst { mutateAsync, isLoading, error } = useBuyDirectListing(contract);\n```"
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport {\n  useBuyDirectListing,\n  useContract,\n  Web3Button,\n} from \"@thirdweb-dev/react\";\nimport { ListingType } from \"@thirdweb-dev/sdk\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress, \"marketplace-v3\");\n  const {\n    mutateAsync: buyDirectListing,\n    isLoading,\n    error,\n  } = useBuyDirectListing(contract);\n\n  return (\n    <Web3Button\n      contractAddress={contractAddress}\n      action={() =>\n        buyDirectListing({\n          listingId: \"{{listing_id}}\", // ID of the listing to buy\n          quantity: \"1\",\n          buyer: \"{{wallet_address}}\", // Wallet to buy for\n        })\n      }\n    >\n      Buy Now\n    </Web3Button>\n  );\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Mutation object to buy out a direct listing\n"
									},
									{
										"kind": "code",
										"text": "```ts\nconst { mutateAsync, isLoading, error } = useBuyDirectListing(contract);\n```"
									},
									{
										"kind": "text",
										"text": "\n\n## Options\n\nThe mutation function accepts an object as argument with the following properties:\n\n### listingId\n\nThe ID of the direct listing you want to buy.\n\n### quantity\n\nThe amount of tokens you want to buy from the listing.\n\nApplicable for ERC1155 listings only, should always be "
									},
									{
										"kind": "code",
										"text": "`1`"
									},
									{
										"kind": "text",
										"text": " for ERC721 listings.\n\n### buyer\n\nSpecify a different wallet address to buy the listing for."
									}
								]
							},
							{
								"tag": "@marketplace",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
							"line": 2991,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L2991"
						}
					],
					"parameters": [
						{
							"id": 771,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`MarketplaceV3`"
									},
									{
										"kind": "text",
										"text": " contract"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/marketplacev3.ts",
											"qualifiedName": "MarketplaceV3"
										},
										"name": "MarketplaceV3",
										"package": "@thirdweb-dev/sdk"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseMutationResult"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Omit"
								},
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 772,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/sdk/dist/declarations/src/evm/core/classes/marketplacev3-direct-listings.d.ts",
													"line": 331,
													"character": 110
												}
											]
										}
									},
									{
										"type": "literal",
										"value": "data"
									}
								],
								"name": "Omit",
								"package": "typescript"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "src/evm/types.ts",
									"qualifiedName": "BuyFromListingParams"
								},
								"name": "BuyFromListingParams",
								"package": "@thirdweb-dev/react-core"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseMutationResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 765,
			"name": "useBuyNow",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
					"line": 2881,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L2881"
				}
			],
			"signatures": [
				{
					"id": 766,
					"name": "useBuyNow",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for buying a listing on a "
							},
							{
								"kind": "code",
								"text": "`Marketplace`"
							},
							{
								"kind": "text",
								"text": " smart contract.\n\nIf the listing is in a currency that is not native to the chain (e.g. not Ether on Ethereum), the hook will prompt the user\nto approve the marketplace contract to spend the currency on their behalf before performing the buy.\n\n__This hook is only for "
							},
							{
								"kind": "code",
								"text": "`Marketplace`"
							},
							{
								"kind": "text",
								"text": " contracts. Not for "
							},
							{
								"kind": "code",
								"text": "`MarketplaceV3`"
							},
							{
								"kind": "text",
								"text": "__"
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useBuyNow, useContract, Web3Button } from \"@thirdweb-dev/react\";\nimport { ListingType } from \"@thirdweb-dev/sdk\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress, \"marketplace\");\n  const { mutateAsync: buyNow, isLoading, error } = useBuyNow(contract);\n\n  return (\n    <Web3Button\n      contractAddress={contractAddress}\n      action={() =>\n        buyNow({\n          id: \"{{listing_id}}\", // ID of the listing to buy\n          type: ListingType.Direct, // Direct (0) or Auction (1)\n          buyAmount: \"{{buy_amount}}\", // Amount to buy\n          buyForWallet: \"{{wallet_address}}\", // Wallet to buy for, defaults to current wallet\n        })\n      }\n    >\n      Buy Now\n    </Web3Button>\n  );\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Mutation object to buy out an auction listing\n"
									},
									{
										"kind": "code",
										"text": "```ts\nconst { mutateAsync, isLoading, error } = useBuyNow(contract);\n```"
									},
									{
										"kind": "text",
										"text": "\n\n## Options\n\nThe mutation function accepts an object as argument with the following properties:\n\n### id\n\nThe ID of the listing you want to buy.\n\n### type\n\nThe type of listing. Either "
									},
									{
										"kind": "code",
										"text": "`ListingType.Direct`"
									},
									{
										"kind": "text",
										"text": " (0) or "
									},
									{
										"kind": "code",
										"text": "`ListingType.Auction`"
									},
									{
										"kind": "text",
										"text": " (1).\n\n### buyAmount\n\nThe amount of tokens you want to buy from the listing.\n\nApplicable for ERC1155 listings only, should always be 1 for ERC721 listings.\n\n### buyForWallet (optional)\n\nOptionally, specify a different wallet address to buy the listing for."
									}
								]
							},
							{
								"tag": "@marketplace",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
							"line": 2881,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L2881"
						}
					],
					"parameters": [
						{
							"id": 767,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`Marketplace`"
									},
									{
										"kind": "text",
										"text": " contract"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts",
											"qualifiedName": "Marketplace"
										},
										"name": "Marketplace",
										"package": "@thirdweb-dev/sdk"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseMutationResult"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Omit"
								},
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 768,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/sdk/dist/declarations/src/evm/core/classes/internal/marketplace/marketplace-direct.d.ts",
													"line": 175,
													"character": 110
												}
											]
										}
									},
									{
										"type": "literal",
										"value": "data"
									}
								],
								"name": "Omit",
								"package": "typescript"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							},
							{
								"type": "reference",
								"target": 1196,
								"name": "BuyNowParams",
								"package": "@thirdweb-dev/react-core"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseMutationResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 609,
			"name": "useCancelDirectListing",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
					"line": 2352,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L2352"
				}
			],
			"signatures": [
				{
					"id": 610,
					"name": "useCancelDirectListing",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for canceling a direct listing on a [MarketplaceV3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) contract.\n\nDirect listings can be canceled at any time, (unless the listing has already been sold).\nOnly the creator of the listing can cancel it.\n\n__Note: This hook is only for [Marketplace V3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) contracts.__\n\nFor "
							},
							{
								"kind": "code",
								"text": "`Marketplace`"
							},
							{
								"kind": "text",
								"text": " contracts, use "
							},
							{
								"kind": "code",
								"text": "`useCancelListing`"
							},
							{
								"kind": "text",
								"text": " instead."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport {\n  useCancelDirectListing,\n  useContract,\n  Web3Button,\n} from \"@thirdweb-dev/react\";\nimport { ListingType } from \"@thirdweb-dev/sdk\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress, \"marketplace-v3\");\n  const {\n    mutateAsync: cancelDirectListing,\n    isLoading,\n    error,\n  } = useCancelDirectListing(contract);\n\n  return (\n    <Web3Button\n      contractAddress={contractAddress}\n      action={() => cancelDirectListing(listingId)}\n    >\n      Cancel Direct Listing\n    </Web3Button>\n  );\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Mutation object to cancel a direct listing by passing the ID of the listing you want to cancel.\n\n"
									},
									{
										"kind": "code",
										"text": "```ts\nconst { mutateAsync, isLoading, error } = useCancelDirectListing(contract);\n```"
									},
									{
										"kind": "text",
										"text": "\n\nThe mutation function takes the "
									},
									{
										"kind": "code",
										"text": "`listingId`"
									},
									{
										"kind": "text",
										"text": " as an argument.\n\nThe "
									},
									{
										"kind": "code",
										"text": "`error`"
									},
									{
										"kind": "text",
										"text": " property is set if the listing is not active, or was not created by the wallet\n\n### listingId\n\nThe ID of the listing you want to cancel."
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "DirectListings"
									}
								]
							},
							{
								"tag": "@marketplace",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
							"line": 2352,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L2352"
						}
					],
					"parameters": [
						{
							"id": 611,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`MarketplaceV3`"
									},
									{
										"kind": "text",
										"text": " contract"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/marketplacev3.ts",
											"qualifiedName": "MarketplaceV3"
										},
										"name": "MarketplaceV3",
										"package": "@thirdweb-dev/sdk"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseMutationResult"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Omit"
								},
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 612,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/sdk/dist/declarations/src/evm/core/classes/marketplacev3-direct-listings.d.ts",
													"line": 301,
													"character": 48
												}
											]
										}
									},
									{
										"type": "literal",
										"value": "data"
									}
								],
								"name": "Omit",
								"package": "typescript"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts",
									"qualifiedName": "BigNumberish"
								},
								"name": "BigNumberish",
								"package": "@ethersproject/bignumber"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseMutationResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 613,
			"name": "useCancelEnglishAuction",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
					"line": 2436,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L2436"
				}
			],
			"signatures": [
				{
					"id": 614,
					"name": "useCancelEnglishAuction",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for canceling an english auction on a [MarketplaceV3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) contract.\n\n__English auctions cannot be canceled if a bid has been placed__\n\n__This hook is only for [Marketplace V3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) contracts.__\n\nFor "
							},
							{
								"kind": "code",
								"text": "`Marketplace`"
							},
							{
								"kind": "text",
								"text": " contracts, use "
							},
							{
								"kind": "code",
								"text": "`useCancelListing`"
							},
							{
								"kind": "text",
								"text": " instead."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport {\n  useCancelEnglishAuction,\n  useContract,\n  Web3Button,\n} from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress, \"marketplace-v3\");\n  const {\n    mutateAsync: cancelEnglishAuction,\n    isLoading,\n    error,\n  } = useCancelEnglishAuction(contract);\n\n  return (\n    <Web3Button\n      contractAddress={contractAddress}\n      action={() => cancelEnglishAuction(listingId)}\n    >\n      Cancel English Auction\n    </Web3Button>\n  );\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Mutation object to cancel an english auction\n\n"
									},
									{
										"kind": "code",
										"text": "```ts\nconst { mutateAsync, isLoading, error } = useCancelEnglishAuction(contract);\n```"
									},
									{
										"kind": "text",
										"text": "\n\nThe mutation function takes the "
									},
									{
										"kind": "code",
										"text": "`listingId`"
									},
									{
										"kind": "text",
										"text": " as an argument.\n\nThe "
									},
									{
										"kind": "code",
										"text": "`error`"
									},
									{
										"kind": "text",
										"text": " property is set if the listing is not active, cannot be canceled, or was not created by the wallet.\n\n### listingId\n\nThe ID of the listing you want to cancel."
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "EnglishAuctions"
									}
								]
							},
							{
								"tag": "@marketplace",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
							"line": 2436,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L2436"
						}
					],
					"parameters": [
						{
							"id": 615,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`MarketplaceV3`"
									},
									{
										"kind": "text",
										"text": " contract"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/marketplacev3.ts",
											"qualifiedName": "MarketplaceV3"
										},
										"name": "MarketplaceV3",
										"package": "@thirdweb-dev/sdk"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseMutationResult"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Omit"
								},
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 616,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/sdk/dist/declarations/src/evm/core/classes/marketplacev3-english-auction.d.ts",
													"line": 311,
													"character": 48
												}
											]
										}
									},
									{
										"type": "literal",
										"value": "data"
									}
								],
								"name": "Omit",
								"package": "typescript"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts",
									"qualifiedName": "BigNumberish"
								},
								"name": "BigNumberish",
								"package": "@ethersproject/bignumber"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseMutationResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 601,
			"name": "useCancelListing",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
					"line": 2248,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L2248"
				}
			],
			"signatures": [
				{
					"id": 602,
					"name": "useCancelListing",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for canceling an existing auction or listing on a "
							},
							{
								"kind": "code",
								"text": "`Marketplace`"
							},
							{
								"kind": "text",
								"text": " contract.\n\n__Auction listings cannot be canceled if a bid has been placed__\n\n__This hook is only for "
							},
							{
								"kind": "code",
								"text": "`Marketplace`"
							},
							{
								"kind": "text",
								"text": " contracts.__\n\nFor [Marketplace V3](https://thirdweb.com/thirdweb.eth/MarketplaceV3)\ncontracts, use "
							},
							{
								"kind": "code",
								"text": "`useCancelDirectListing`"
							},
							{
								"kind": "text",
								"text": " or "
							},
							{
								"kind": "code",
								"text": "`useCancelEnglishAuction`"
							},
							{
								"kind": "text",
								"text": " instead."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useCancelListing, useContract, Web3Button } from \"@thirdweb-dev/react\";\nimport { ListingType } from \"@thirdweb-dev/sdk\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress, \"marketplace\");\n  const {\n    mutateAsync: cancelListing,\n    isLoading,\n    error,\n  } = useCancelListing(contract);\n\n  return (\n    <Web3Button\n      contractAddress={contractAddress}\n      action={() =>\n        cancelListing({\n          id: \"{{listing_id}}\",\n          type: ListingType.Direct, // Direct (0) or Auction (1)\n        })\n      }\n    >\n      Cancel Listing\n    </Web3Button>\n  );\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Mutation object to cancel a listing.\n\n"
									},
									{
										"kind": "code",
										"text": "```ts\nconst { mutateAsync, isLoading, error } = useCancelListing(contract);\n```"
									},
									{
										"kind": "text",
										"text": "\n\nThe "
									},
									{
										"kind": "code",
										"text": "`error`"
									},
									{
										"kind": "text",
										"text": " property is set if the listing is not active, or was not created by the wallet.\n\n### options\n\nThe mutation function takes an object with the following properties as an argument:\n\n#### listingId\nThe ID of the listing you want to cancel.\n\n#### listingType\nThe type of listing you are canceling. Either "
									},
									{
										"kind": "code",
										"text": "`ListingType.Direct`"
									},
									{
										"kind": "text",
										"text": " (0) or "
									},
									{
										"kind": "code",
										"text": "`ListingType.Auction`"
									},
									{
										"kind": "text",
										"text": " (1)."
									}
								]
							},
							{
								"tag": "@marketplace",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
							"line": 2248,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L2248"
						}
					],
					"parameters": [
						{
							"id": 603,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a Marketplace contract"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts",
											"qualifiedName": "Marketplace"
										},
										"name": "Marketplace",
										"package": "@thirdweb-dev/sdk"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseMutationResult"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Omit"
								},
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 604,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 606,
													"name": "data",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"sources": [
														{
															"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
															"line": 2254,
															"character": 6,
															"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L2254"
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 607,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {},
															"sources": [
																{
																	"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
																	"line": 2254,
																	"character": 12,
																	"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L2254"
																}
															],
															"signatures": [
																{
																	"id": 608,
																	"name": "__type",
																	"variant": "signature",
																	"kind": 4096,
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"target": {
																			"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
																			"qualifiedName": "Promise"
																		},
																		"typeArguments": [
																			{
																				"type": "intrinsic",
																				"name": "unknown"
																			}
																		],
																		"name": "Promise",
																		"package": "typescript"
																	}
																}
															]
														}
													}
												},
												{
													"id": 605,
													"name": "receipt",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"sources": [
														{
															"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
															"line": 2253,
															"character": 6,
															"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L2253"
														}
													],
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/.pnpm/@ethersproject+abstract-provider@5.7.0/node_modules/@ethersproject/abstract-provider/src.ts/index.ts",
															"qualifiedName": "TransactionReceipt"
														},
														"name": "providers.TransactionReceipt",
														"package": "@ethersproject/abstract-provider",
														"qualifiedName": "TransactionReceipt"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														606,
														605
													]
												}
											],
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
													"line": 2252,
													"character": 4,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L2252"
												}
											]
										}
									},
									{
										"type": "literal",
										"value": "data"
									}
								],
								"name": "Omit",
								"package": "typescript"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Pick"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../sdk/src/evm/types/marketplace/AuctionListing.ts",
													"qualifiedName": "AuctionListing"
												},
												"name": "AuctionListing",
												"package": "@thirdweb-dev/sdk"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../sdk/src/evm/types/marketplace/DirectListing.ts",
													"qualifiedName": "DirectListing"
												},
												"name": "DirectListing",
												"package": "@thirdweb-dev/sdk"
											}
										]
									},
									{
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": "type"
											},
											{
												"type": "literal",
												"value": "id"
											}
										]
									}
								],
								"name": "Pick",
								"package": "typescript"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseMutationResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 125,
			"name": "useChain",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/wallet.ts",
					"line": 235,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/wallet.ts#L235"
				}
			],
			"signatures": [
				{
					"id": 126,
					"name": "useChain",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for getting the "
							},
							{
								"kind": "code",
								"text": "`Chain`"
							},
							{
								"kind": "text",
								"text": " object of the network that the user is connected - but only if\nit's a supported network (added in the "
							},
							{
								"kind": "code",
								"text": "`ThirdwebProvider`"
							},
							{
								"kind": "text",
								"text": "'s "
							},
							{
								"kind": "code",
								"text": "`supportedChains`"
							},
							{
								"kind": "text",
								"text": " or one of default chains\n\nReturns "
							},
							{
								"kind": "code",
								"text": "`undefined`"
							},
							{
								"kind": "text",
								"text": " if the network is not supported or the user is not connected to a wallet. You can use the "
							},
							{
								"kind": "code",
								"text": "`useConnectionStatus`"
							},
							{
								"kind": "text",
								"text": " hook to check if the user is connected to a wallet or not to differentiate between the two cases.\n\nIf you only want to get the chain id of the network the user is connected to regardless of whether it's supported or not, use "
							},
							{
								"kind": "code",
								"text": "`useChainId`"
							},
							{
								"kind": "text",
								"text": " instead.\n\n"
							},
							{
								"kind": "code",
								"text": "```jsx\nimport { useChain } from \"@thirdweb-dev/react\";\n\nconst chain = useChain();\n```"
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useChain, useConnectionStatus } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const chain = useChain();\n  const status = useConnectionStatus();\n\n  if (status === \"unknown\") return <div> Loading... </div>;\n  if (status === \"disconnected\") return <div> disconnected </div>;\n  if (status === \"connecting\") return <div> connecting... </div>;\n\n  if (chain) {\n    return <p> Connected to {chain.name} </p>;\n  }\n\n  return <p> Connected to an unsupported network </p>;\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "An object of type "
									},
									{
										"kind": "code",
										"text": "`Chain`"
									},
									{
										"kind": "text",
										"text": " from ["
									},
									{
										"kind": "code",
										"text": "`@thirdweb-dev/chains`"
									},
									{
										"kind": "text",
										"text": "](https://www.npmjs.com/package/@thirdweb-dev/chains) package containing various information about the network, or "
									},
									{
										"kind": "code",
										"text": "`undefined`"
									},
									{
										"kind": "text",
										"text": " if the network is not supported or user is not connected to a wallet."
									}
								]
							},
							{
								"tag": "@networkConnection",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/wallet.ts",
							"line": 235,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/wallet.ts#L235"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../chains/src/types.ts",
									"qualifiedName": "Chain"
								},
								"name": "Chain",
								"package": "@thirdweb-dev/chains"
							},
							{
								"type": "intrinsic",
								"name": "undefined"
							}
						]
					}
				}
			]
		},
		{
			"id": 121,
			"name": "useChainId",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/wallet.ts",
					"line": 186,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/wallet.ts#L186"
				}
			],
			"signatures": [
				{
					"id": 122,
					"name": "useChainId",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for accessing the chain ID of the network the current wallet is connected to\n\n"
							},
							{
								"kind": "code",
								"text": "```javascript\nimport { useChainId } from \"@thirdweb-dev/react\"\n```"
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```javascript\nimport { useChainId } from \"@thirdweb-dev/react\"\n\nconst App = () => {\n  const chainId = useChainId()\n\n  return <div>{chainId}</div>\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A "
									},
									{
										"kind": "code",
										"text": "`number`"
									},
									{
										"kind": "text",
										"text": " representing the current chain id, or "
									},
									{
										"kind": "code",
										"text": "`undefined`"
									},
									{
										"kind": "text",
										"text": " if the user is not connected to a wallet.\n\nFor Example, if the user is connected to the Ethereum Mainnet, the return value will be "
									},
									{
										"kind": "code",
										"text": "`1`"
									},
									{
										"kind": "text",
										"text": "."
									}
								]
							},
							{
								"tag": "@networkConnection",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/wallet.ts",
							"line": 186,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/wallet.ts#L186"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "intrinsic",
								"name": "undefined"
							}
						]
					}
				}
			]
		},
		{
			"id": 300,
			"name": "useClaimConditions",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/claim-conditions.ts",
					"line": 340,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/claim-conditions.ts#L340"
				}
			],
			"signatures": [
				{
					"id": 301,
					"name": "useClaimConditions",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for fetching all claim conditions for a given drop contract.\n\nThis is available for available for contracts that implement the \"ClaimConditions\" interface; such as [NFT Drop](https://thirdweb.com/thirdweb.eth/DropERC721), [Edition Drop](https://thirdweb.com/thirdweb.eth/DropERC1155), and [Token Drop](https://thirdweb.com/thirdweb.eth/DropERC20)."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```javascript\nimport { useClaimConditions, useContract } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress);\n  const { data, isLoading, error } = useClaimConditions(contract);\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Query Result object with the list of claim conditions"
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "ERC20ClaimPhasesV2 | ERC20ClaimPhasesV1 | ERC20ClaimConditionsV2 | ERC20ClaimConditionsV1 | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1 | ERC1155ClaimPhasesV2 | ERC1155ClaimPhasesV1 | ERC1155ClaimConditionsV2 | ERC1155ClaimConditionsV1"
									}
								]
							},
							{
								"tag": "@claimConditions",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/claim-conditions.ts",
							"line": 340,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/claim-conditions.ts#L340"
						}
					],
					"parameters": [
						{
							"id": 302,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a contract that extends the ERC721, ERC1155 or ERC20 spec and implements the \"ClaimConditions\" extension."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 1162,
										"name": "DropContract",
										"package": "@thirdweb-dev/react-core"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						},
						{
							"id": 303,
							"name": "tokenId",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "When using the hook with ERC1155 contracts, pass the "
									},
									{
										"kind": "code",
										"text": "`tokenId`"
									},
									{
										"kind": "text",
										"text": " parameter; as each token can have unique claim conditions.\n\nPass "
									},
									{
										"kind": "code",
										"text": "`undefined`"
									},
									{
										"kind": "text",
										"text": ", or leave this field out if you are using ERC721 or ERC20 drop contracts.\n\n"
									},
									{
										"kind": "code",
										"text": "```tsx\nimport { useClaimConditions, useContract } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress);\n\n  const { data, isLoading, error } = useClaimConditions(\n    contract,\n    0, // Token ID required for ERC1155 contracts here.\n  );\n}\n```"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts",
									"qualifiedName": "BigNumberish"
								},
								"name": "BigNumberish",
								"package": "@ethersproject/bignumber"
							}
						},
						{
							"id": 304,
							"name": "options",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "additional options to pass to the claim condition fetch\n\n#### withAllowlist\n\nBy default, the hook will not include the allowlist in the returned data. To include the allowlist in the returned data, set the "
									},
									{
										"kind": "code",
										"text": "`withAllowlist`"
									},
									{
										"kind": "text",
										"text": " option to true.\n\nThis will add a "
									},
									{
										"kind": "code",
										"text": "`snapshot`"
									},
									{
										"kind": "text",
										"text": " property to the returned data, which contains the allowlist in an array.\n\n"
									},
									{
										"kind": "code",
										"text": "```tsx\nimport { useClaimConditions, useContract } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress);\n\n  // \"data\" now includes a \"snapshot\" property that contains the allowlist.\n  const { data, isLoading, error } = useClaimConditions(\n    contract,\n    undefined, // Token ID required for ERC1155 contracts here.\n    {\n      withAllowlist: true,\n    },\n  );\n}\n```"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../sdk/src/evm/types/claim-conditions/claim-conditions.ts",
									"qualifiedName": "ClaimConditionFetchOptions"
								},
								"name": "ClaimConditionFetchOptions",
								"package": "@thirdweb-dev/sdk"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"sourceFileName": "../sdk/src/evm/types/claim-conditions/claim-conditions.ts",
										"qualifiedName": "ClaimCondition"
									},
									"name": "ClaimCondition",
									"package": "@thirdweb-dev/sdk"
								}
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 305,
			"name": "useClaimIneligibilityReasons",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/claim-conditions.ts",
					"line": 433,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/claim-conditions.ts#L433"
				}
			],
			"signatures": [
				{
					"id": 306,
					"name": "useClaimIneligibilityReasons",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for fetching the reasons a wallet is not eligible to claim tokens from a drop, if any.\n\nThis is available for available for contracts that implement the \"ClaimConditions\" interface; such as [NFT Drop](https://thirdweb.com/thirdweb.eth/DropERC721), [Edition Drop](https://thirdweb.com/thirdweb.eth/DropERC1155), and [Token Drop](https://thirdweb.com/thirdweb.eth/DropERC20)."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```javascript\nimport { useClaimIneligibilityReasons, useContract } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress);\n  const { data, isLoading, error } = useClaimIneligibilityReasons(contract, {\n    walletAddress: \"0x123...\", // Use useAddress hook to get the user's wallet address\n    quantity: 1, // Quantity to check eligibility for\n  });\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The hook's "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property, once loaded, contains an array of "
									},
									{
										"kind": "code",
										"text": "`ClaimEligibility`"
									},
									{
										"kind": "text",
										"text": " strings, which may be empty.\n\nFor example, if the user is not in the allowlist, this hook will return "
									},
									{
										"kind": "code",
										"text": "`[\"This address is not on the allowlist.\"]`"
									},
									{
										"kind": "text",
										"text": ".\n\nIf the user is eligible to claim tokens, the hook will return an empty array."
									}
								]
							},
							{
								"tag": "@claimConditions",
								"content": []
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "ERC20ClaimPhasesV2 | ERC20ClaimPhasesV1 | ERC20ClaimConditionsV2 | ERC20ClaimConditionsV1 | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1 | ERC1155ClaimPhasesV2 | ERC1155ClaimPhasesV1 | ERC1155ClaimConditionsV2 | ERC1155ClaimConditionsV1"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/claim-conditions.ts",
							"line": 433,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/claim-conditions.ts#L433"
						}
					],
					"parameters": [
						{
							"id": 307,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a contract that extends the  ERC20, ERC721 or ERC1155 spec and implements the \"ClaimConditions\" extension."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 1162,
										"name": "DropContract",
										"package": "@thirdweb-dev/react-core"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						},
						{
							"id": 308,
							"name": "params",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The conditions to check eligibility for. The "
									},
									{
										"kind": "code",
										"text": "`walletAddress`"
									},
									{
										"kind": "text",
										"text": " and "
									},
									{
										"kind": "code",
										"text": "`quantity`"
									},
									{
										"kind": "text",
										"text": " properties are required.\n\nUse the "
									},
									{
										"kind": "code",
										"text": "`useAddress`"
									},
									{
										"kind": "text",
										"text": " hook to get the connected wallet address."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 275,
								"name": "ClaimIneligibilityParams",
								"package": "@thirdweb-dev/react-core"
							}
						},
						{
							"id": 309,
							"name": "tokenId",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "When using ERC1155 contracts, provide a third argument to specify the token ID.\n\n"
									},
									{
										"kind": "code",
										"text": "```tsx\nimport { useClaimIneligibilityReasons, useContract } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress);\n  const { data, isLoading, error } = useClaimIneligibilityReasons(\n    contract,\n    {\n      walletAddress: \"0x123..\",\n      quantity: 1,\n    },\n    tokenId,\n  );\n}\n```"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts",
									"qualifiedName": "BigNumberish"
								},
								"name": "BigNumberish",
								"package": "@ethersproject/bignumber"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"sourceFileName": "../sdk/src/evm/enums/ClaimEligibility.ts",
										"qualifiedName": "ClaimEligibility"
									},
									"name": "ClaimEligibility",
									"package": "@thirdweb-dev/sdk"
								}
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 491,
			"name": "useClaimNFT",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/drop.ts",
					"line": 421,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/drop.ts#L421"
				}
			],
			"signatures": [
				{
					"id": 492,
					"name": "useClaimNFT",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for claiming an NFT from a smart contract.\n\nAvailable to use on smart contracts that implement a  "
							},
							{
								"kind": "code",
								"text": "`Claimable`"
							},
							{
								"kind": "text",
								"text": " interface, and follow either the "
							},
							{
								"kind": "code",
								"text": "`ERC721`"
							},
							{
								"kind": "text",
								"text": "or "
							},
							{
								"kind": "code",
								"text": "`ERC1155`"
							},
							{
								"kind": "text",
								"text": " standard."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useContract, useClaimNFT, Web3Button } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress);\n  const { mutateAsync: claimNft, isLoading, error } = useClaimNFT(contract);\n\n  return (\n    <Web3Button\n      contractAddress={contractAddress}\n      action={() =>\n        claimNft({\n          to: \"{{wallet_address}}\", // Use useAddress hook to get current wallet address\n          quantity: 1,\n        })\n      }\n    >\n      Claim NFT\n    </Web3Button>\n  );\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A mutation object to claim a NFT to the wallet specified in the params\n\n"
									},
									{
										"kind": "code",
										"text": "```ts\nconst { mutateAsync, isLoading, error } = useClaimNFT(contract);\n```"
									},
									{
										"kind": "text",
										"text": "\n\n### options\n\nThe mutation function takes an object as argument with below properties:\n\n#### to\n\nThe wallet address to mint the NFT(s) to.\n\nUse the "
									},
									{
										"kind": "code",
										"text": "`useAddress`"
									},
									{
										"kind": "text",
										"text": " hook to get the currently connected wallet address.\n\n#### quantity\n\nThe number of NFTs you wish to claim.\n\n- With ERC721 contracts, this represents the number of unique tokens you wish to claim.\n- With ERC1155 contracts, this represents the quantity of the specific "
									},
									{
										"kind": "code",
										"text": "`tokenId`"
									},
									{
										"kind": "text",
										"text": " you wish to claim.\n\n#### tokenId\n\nFor ERC1155 contracts, you must specify a specific "
									},
									{
										"kind": "code",
										"text": "`tokenId`"
									},
									{
										"kind": "text",
										"text": " to claim.\n\n#### options (optional)\n\nCustomizable "
									},
									{
										"kind": "code",
										"text": "`ClaimOptions`"
									},
									{
										"kind": "text",
										"text": " object to override the default behaviour of the hook.\n\nThere are three options available:\n\n- "
									},
									{
										"kind": "code",
										"text": "`checkERC20Allowance`"
									},
									{
										"kind": "text",
										"text": " - Whether to check the ERC20 allowance of the sender, defaults to true.\n- "
									},
									{
										"kind": "code",
										"text": "`currencyAddress`"
									},
									{
										"kind": "text",
										"text": " - The currency to pay for each token claimed, defaults to "
									},
									{
										"kind": "code",
										"text": "`NATIVE_TOKEN_ADDRESS`"
									},
									{
										"kind": "text",
										"text": " for native currency.\n- "
									},
									{
										"kind": "code",
										"text": "`pricePerToken`"
									},
									{
										"kind": "text",
										"text": " - The price to pay for each token claimed. Not relevant when using claim conditions.\n\n"
									},
									{
										"kind": "code",
										"text": "```jsx\nimport { useContract, useClaimNFT, Web3Button } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress);\n  const { mutate: claimNft, isLoading, error } = useClaimNFT(contract);\n\n  return (\n    <Web3Button\n      contractAddress={contractAddress}\n      action={() =>\n        claimNft({\n          to: \"{{wallet_address}}\",\n          quantity: 1,\n          options: {\n            checkERC20Allowance: true,\n            currencyAddress: \"{{erc20_address}}\",\n            pricePerToken: 0,\n          },\n        })\n      }\n    >\n      Claim NFT\n    </Web3Button>\n  );\n}\n```"
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "ERC721Claimable | ERC1155Claimable | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1 | ERC1155ClaimPhasesV2 | ERC1155ClaimPhasesV1 | ERC1155ClaimConditionsV2 | ERC1155ClaimConditionsV1"
									}
								]
							},
							{
								"tag": "@nftDrop",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/drop.ts",
							"line": 421,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/drop.ts#L421"
						}
					],
					"typeParameter": [
						{
							"id": 493,
							"name": "TContract",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 1162,
								"name": "DropContract",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"parameters": [
						{
							"id": 494,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`DropContract`"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": -1,
										"name": "TContract",
										"refersToTypeParameter": true
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseMutationResult"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 1179,
								"name": "ClaimNFTReturnType",
								"package": "@thirdweb-dev/react-core"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							},
							{
								"type": "reference",
								"target": 1173,
								"name": "ClaimNFTParams",
								"package": "@thirdweb-dev/react-core"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseMutationResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 910,
			"name": "useClaimToken",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/token.ts",
					"line": 347,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/token.ts#L347"
				}
			],
			"signatures": [
				{
					"id": 911,
					"name": "useClaimToken",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for claiming a ERC20 tokens from a smart contract.\n\nAvailable to use on smart contracts that implement both the [ERC20](https://portal.thirdweb.com/contracts/build/extensions/erc-20/ERC20) interface\nand the ["
							},
							{
								"kind": "code",
								"text": "`claim`"
							},
							{
								"kind": "text",
								"text": "](https://portal.thirdweb.com/contracts/build/extensions/erc-721/ERC721Claimable) function,\nsuch as the [Token Drop](https://thirdweb.com/thirdweb.eth/DropERC20)."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useClaimToken, useContract, Web3Button } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress);\n  const { mutateAsync: claimToken, isLoading, error } = useClaimToken(contract);\n\n  return (\n    <Web3Button\n      contractAddress={contractAddress}\n      action={() =>\n        claimToken({\n          to: \"{{wallet_address}}\", // Use useAddress hook to get current wallet address\n          amount: 100, // Amount of token to claim\n        })\n      }\n    >\n      Claim Token\n    </Web3Button>\n  );\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A mutation object to tokens to the wallet specified in the params\n\n"
									},
									{
										"kind": "code",
										"text": "```ts\nconst { mutateAsync, isLoading, error } = useClaimToken(contract);\n```"
									},
									{
										"kind": "text",
										"text": "\n\n### options\nThe mutation function takes an object as an argument with the following properties:\n\n#### to (required)\nLikely, you will want to claim the token to the currently connected wallet address.\n\nYou can use the "
									},
									{
										"kind": "code",
										"text": "`useAddress`"
									},
									{
										"kind": "text",
										"text": " hook to get this value.\n\n#### amount (required)\nThe amount of tokens to be claimed.\n\n#### checkERC20Allowance (optional)\nBoolean value to check whether the current wallet has enough allowance to pay for claiming the tokens before\nattempting to claim the tokens.\n\nDefaults to "
									},
									{
										"kind": "code",
										"text": "`true`"
									},
									{
										"kind": "text",
										"text": "."
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "ERC20ClaimPhasesV2 | ERC20ClaimPhasesV1 | ERC20ClaimConditionsV2 | ERC20ClaimConditionsV1"
									}
								]
							},
							{
								"tag": "@token",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/token.ts",
							"line": 347,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/token.ts#L347"
						}
					],
					"parameters": [
						{
							"id": 912,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`TokenContract`"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 1135,
										"name": "TokenContract",
										"package": "@thirdweb-dev/react-core"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseMutationResult"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Omit"
								},
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 913,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/sdk/dist/declarations/src/evm/core/classes/erc-20.d.ts",
													"line": 443,
													"character": 112
												}
											]
										}
									},
									{
										"type": "literal",
										"value": "data"
									}
								],
								"name": "Omit",
								"package": "typescript"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							},
							{
								"type": "reference",
								"target": 1206,
								"name": "ClaimTokenParams",
								"package": "@thirdweb-dev/react-core"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseMutationResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 484,
			"name": "useClaimedNFTSupply",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/drop.ts",
					"line": 246,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/drop.ts#L246"
				}
			],
			"signatures": [
				{
					"id": 485,
					"name": "useClaimedNFTSupply",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for retrieving the total supply of NFTs claimed from an NFT Drop contract.\n\nAvailable to use on contracts that implement ["
							},
							{
								"kind": "code",
								"text": "`ERC721Claimable`"
							},
							{
								"kind": "text",
								"text": "](https://portal.thirdweb.com/contracts/build/extensions/erc-721/ERC721Claimable)."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useClaimedNFTSupply, useContract } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress);\n  const { data, isLoading } = useClaimedNFTSupply(contract);\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The hook's "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property, once loaded, is a "
									},
									{
										"kind": "code",
										"text": "`BigNumber`"
									},
									{
										"kind": "text",
										"text": " representing the total supply of NFTs claimed from the NFT drop contract so far."
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "ERC721LazyMintable"
									}
								]
							},
							{
								"tag": "@nftDrop",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/drop.ts",
							"line": 246,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/drop.ts#L246"
						}
					],
					"parameters": [
						{
							"id": 486,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a contract that extends the ERC721 spec (NFT drop, Signature Drop, or any custom contract that extends the ERC721 spec)"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/nft-drop.ts",
													"qualifiedName": "NFTDrop"
												},
												"name": "NFTDrop",
												"package": "@thirdweb-dev/sdk"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/signature-drop.ts",
													"qualifiedName": "SignatureDrop"
												},
												"name": "SignatureDrop",
												"package": "@thirdweb-dev/sdk"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../sdk/src/evm/contracts/smart-contract.ts",
													"qualifiedName": "SmartContract"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/.pnpm/@ethersproject+contracts@5.7.0/node_modules/@ethersproject/contracts/src.ts/index.ts",
															"qualifiedName": "BaseContract"
														},
														"name": "BaseContract",
														"package": "@ethersproject/contracts"
													}
												],
												"name": "SmartContract",
												"package": "@thirdweb-dev/sdk"
											}
										]
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts",
									"qualifiedName": "BigNumber"
								},
								"name": "BigNumber",
								"package": "@ethersproject/bignumber"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 476,
			"name": "useClaimedNFTs",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/drop.ts",
					"line": 154,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/drop.ts#L154"
				}
			],
			"signatures": [
				{
					"id": 477,
					"name": "useClaimedNFTs",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for fetching all claimed NFTs from a given NFT Drop contract.\n\nAvailable to use on contracts that implement ["
							},
							{
								"kind": "code",
								"text": "`ERC721Claimable`"
							},
							{
								"kind": "text",
								"text": "](https://portal.thirdweb.com/contracts/build/extensions/erc-721/ERC721Claimable),\nsuch as the [NFT Drop](https://thirdweb.com/thirdweb.eth/DropERC721)."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useClaimedNFTs, useContract } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress, \"nft-drop\");\n  const { data: nfts, isLoading, error } = useClaimedNFTs(contract);\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Query Result object that includes an array of NFTs that are claimed in the "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property"
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "ERC721LazyMintable"
									}
								]
							},
							{
								"tag": "@nftDrop",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/drop.ts",
							"line": 154,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/drop.ts#L154"
						}
					],
					"parameters": [
						{
							"id": 478,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a contract that extends the ERC721 spec (NFT drop, Signature Drop, or any custom contract that extends the ERC721 spec)"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/nft-drop.ts",
											"qualifiedName": "NFTDrop"
										},
										"name": "NFTDrop",
										"package": "@thirdweb-dev/sdk"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						},
						{
							"id": 479,
							"name": "queryParams",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "By default, the hook will return the first "
									},
									{
										"kind": "code",
										"text": "`100`"
									},
									{
										"kind": "text",
										"text": " claimed NFTs\n\nYou can use the "
									},
									{
										"kind": "code",
										"text": "`queryParams`"
									},
									{
										"kind": "text",
										"text": " argument to paginate the NFTs that are returned.\n\n"
									},
									{
										"kind": "code",
										"text": "```jsx\nimport { useClaimedNFTs, useContract } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress, \"nft-drop\");\n  const { data, isLoading, error } = useClaimedNFTs(\n    contract,\n    {\n      // For example, to only return the first 50 claimed NFTs in the collection\n      // in order of token ID\n      count: 50,\n      start: 0,\n    },\n  );\n}\n```"
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 480,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/sdk/dist/declarations/src/core/schema/QueryParams.d.ts",
											"line": 12,
											"character": 3
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"sourceFileName": "../sdk/src/core/schema/nft.ts",
										"qualifiedName": "NFT"
									},
									"name": "NFT",
									"package": "@thirdweb-dev/sdk"
								}
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 288,
			"name": "useClaimerProofs",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/claim-conditions.ts",
					"line": 217,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/claim-conditions.ts#L217"
				}
			],
			"signatures": [
				{
					"id": 289,
					"name": "useClaimerProofs",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook to get the claimer proofs for an address for [ERC20](https://portal.thirdweb.com/contracts/build/base-contracts/erc-20/drop), [ERC721](https://portal.thirdweb.com/contracts/build/base-contracts/erc-721/drop), and [ERC1155](https://portal.thirdweb.com/contracts/build/base-contracts/erc-1155/drop) drop contracts.\n\nA claimer proof is a set of data about a claimer's claim condition, including the claimer's address, the claimer's proof, and the claimer's max claimable amount, price, and currency address.\n\nThis is available for available for contracts that implement the \"ClaimConditions\" interface; such as [NFT Drop](https://thirdweb.com/thirdweb.eth/DropERC721), [Edition Drop](https://thirdweb.com/thirdweb.eth/DropERC1155), and [Token Drop](https://thirdweb.com/thirdweb.eth/DropERC20)."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```javascript\nimport { useClaimerProofs, useContract } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress);\n\n  const {\n    data: proof,\n    isLoading,\n    error,\n  } = useClaimerProofs(contract, \"{{claimer_address}}\");\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Query result object with the snapshot for the provided address"
									}
								]
							},
							{
								"tag": "@claimConditions",
								"content": []
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "ERC20ClaimPhasesV2 | ERC20ClaimPhasesV1 | ERC20ClaimConditionsV2 | ERC20ClaimConditionsV1 | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1 | ERC1155ClaimPhasesV2 | ERC1155ClaimPhasesV1 | ERC1155ClaimConditionsV2 | ERC1155ClaimConditionsV1"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/claim-conditions.ts",
							"line": 217,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/claim-conditions.ts#L217"
						}
					],
					"parameters": [
						{
							"id": 290,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a contract that extends the ERC721, ERC1155 or ERC20 spec and implements the \"ClaimConditions\" extension."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 1162,
										"name": "DropContract",
										"package": "@thirdweb-dev/react-core"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						},
						{
							"id": 291,
							"name": "claimerAddress",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This is the address of the user you want to get the proof for.\n\nLikely, you will want to check proofs of the currently connected wallet address. You can use the "
									},
									{
										"kind": "code",
										"text": "`useAddress`"
									},
									{
										"kind": "text",
										"text": " hook to get this value."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 292,
							"name": "tokenId",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "When using the hook with ERC1155 contracts, pass the "
									},
									{
										"kind": "code",
										"text": "`tokenId`"
									},
									{
										"kind": "text",
										"text": "; as each token can have unique claim conditions.\n\nPass "
									},
									{
										"kind": "code",
										"text": "`undefined`"
									},
									{
										"kind": "text",
										"text": ", or leave this field out if you are using ERC721 or ERC20 drop contracts."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts",
									"qualifiedName": "BigNumberish"
								},
								"name": "BigNumberish",
								"package": "@ethersproject/bignumber"
							}
						},
						{
							"id": 293,
							"name": "claimConditionId",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This is the ID of the claim condition you want to get the proof for."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts",
									"qualifiedName": "BigNumberish"
								},
								"name": "BigNumberish",
								"package": "@ethersproject/bignumber"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "union",
								"types": [
									{
										"type": "reflection",
										"declaration": {
											"id": 294,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 295,
													"name": "address",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"sources": [
														{
															"fileName": "packages/react-core/src/evm/hooks/async/claim-conditions.ts",
															"line": 224,
															"character": 4,
															"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/claim-conditions.ts#L224"
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 299,
													"name": "currencyAddress",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "packages/react-core/src/evm/hooks/async/claim-conditions.ts",
															"line": 228,
															"character": 4,
															"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/claim-conditions.ts#L228"
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 297,
													"name": "maxClaimable",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"sources": [
														{
															"fileName": "packages/react-core/src/evm/hooks/async/claim-conditions.ts",
															"line": 226,
															"character": 4,
															"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/claim-conditions.ts#L226"
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 298,
													"name": "price",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "packages/react-core/src/evm/hooks/async/claim-conditions.ts",
															"line": 227,
															"character": 4,
															"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/claim-conditions.ts#L227"
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 296,
													"name": "proof",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"sources": [
														{
															"fileName": "packages/react-core/src/evm/hooks/async/claim-conditions.ts",
															"line": 225,
															"character": 4,
															"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/claim-conditions.ts#L225"
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														295,
														299,
														297,
														298,
														296
													]
												}
											],
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/async/claim-conditions.ts",
													"line": 223,
													"character": 2,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/claim-conditions.ts#L223"
												}
											]
										}
									},
									{
										"type": "literal",
										"value": null
									}
								]
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 385,
			"name": "useCompilerMetadata",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/contracts.ts",
					"line": 147,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contracts.ts#L147"
				}
			],
			"signatures": [
				{
					"id": 386,
					"name": "useCompilerMetadata",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for retrieving information such as the ABI, license, and metadata of a smart contract using it's contract address."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useCompilerMetadata } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { data, isLoading, error } = useCompilerMetadata(contractAddress);\n}\n\nexport default App;\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Query result containing the compiler metadata of the deployed contract in the "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property"
									}
								]
							},
							{
								"tag": "@metadata",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/contracts.ts",
							"line": 147,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contracts.ts#L147"
						}
					],
					"parameters": [
						{
							"id": 387,
							"name": "contractAddress",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The address of the deployed contract"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "union",
								"types": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/schema/contracts/custom.ts",
											"qualifiedName": "PublishedMetadata"
										},
										"name": "PublishedMetadata",
										"package": "@thirdweb-dev/sdk"
									},
									{
										"type": "literal",
										"value": null
									}
								]
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 61,
			"name": "useConnect",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/core/hooks/wallet-hooks.ts",
					"line": 218,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/hooks/wallet-hooks.ts#L218"
				}
			],
			"signatures": [
				{
					"id": 62,
					"name": "useConnect",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for connecting a wallet to your app.\n\nThe wallet also needs to be added in "
							},
							{
								"kind": "code",
								"text": "`ThirdwebProvider`"
							},
							{
								"kind": "text",
								"text": "'s "
							},
							{
								"kind": "code",
								"text": "`supportedWallets`"
							},
							{
								"kind": "text",
								"text": " prop to enable auto-connection on page load."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useConnect, metamaskWallet } from \"@thirdweb-dev/react\";\n\nconst metamaskConfig = metamaskWallet();\n\nfunction App() {\n  const connect = useConnect();\n\n  return (\n    <button\n      onClick={async () => {\n        const wallet = await connect(metamaskConfig, connectOptions);\n        console.log(\"connected to \", wallet);\n      }}\n    >\n      Connect to MetaMask\n    </button>\n  );\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A function to connect a wallet\n\n"
									},
									{
										"kind": "code",
										"text": "```ts\nconst connect = useConnect();\n\nfunction handleConnect() {\n const wallet = await connect(walletConfig, connectOptions);\n}\n```"
									},
									{
										"kind": "text",
										"text": "\n\nThe function accepts two arguments: "
									},
									{
										"kind": "code",
										"text": "`walletConfig`"
									},
									{
										"kind": "text",
										"text": " and "
									},
									{
										"kind": "code",
										"text": "`connectOptions`"
									},
									{
										"kind": "text",
										"text": "\n\n#### walletConfig\nThe wallet to connect. Must be of type "
									},
									{
										"kind": "code",
										"text": "`WalletConfig`"
									},
									{
										"kind": "text",
										"text": ".\n\n[Learn more about the available wallet options](https://portal.thirdweb.com/react/v4/connecting-wallets).\n\n#### connectOptions\nThe typeof "
									},
									{
										"kind": "code",
										"text": "`connectOptions`"
									},
									{
										"kind": "text",
										"text": " object depends on the wallet you are connecting. For some wallets, it may be optional\n\nIf you are using typescript, "
									},
									{
										"kind": "code",
										"text": "`connect`"
									},
									{
										"kind": "text",
										"text": " will automatically infer the type of "
									},
									{
										"kind": "code",
										"text": "`connectOptions`"
									},
									{
										"kind": "text",
										"text": " based on the "
									},
									{
										"kind": "code",
										"text": "`walletConfig`"
									},
									{
										"kind": "text",
										"text": " you pass in as the first argument and will show type errors if you pass in invalid options."
									}
								]
							},
							{
								"tag": "@walletConnection",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/core/hooks/wallet-hooks.ts",
							"line": 218,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/hooks/wallet-hooks.ts#L218"
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 63,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/providers/thirdweb-wallet-provider.tsx",
									"line": 97,
									"character": 11,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/providers/thirdweb-wallet-provider.tsx#L97"
								}
							],
							"signatures": [
								{
									"id": 64,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/react-core/src/core/providers/thirdweb-wallet-provider.tsx",
											"line": 97,
											"character": 11,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/providers/thirdweb-wallet-provider.tsx#L97"
										}
									],
									"typeParameter": [
										{
											"id": 65,
											"name": "I",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 232,
												"name": "WalletInstance",
												"package": "@thirdweb-dev/react-core"
											}
										}
									],
									"parameters": [
										{
											"id": 66,
											"name": "args",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "src/core/providers/thirdweb-wallet-provider.tsx",
													"qualifiedName": "ConnectFnArgs"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": -1,
														"name": "I",
														"refersToTypeParameter": true
													}
												],
												"name": "ConnectFnArgs",
												"package": "@thirdweb-dev/react-core"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": -1,
												"name": "I",
												"refersToTypeParameter": true
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 67,
			"name": "useConnectionStatus",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/core/hooks/wallet-hooks.ts",
					"line": 281,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/hooks/wallet-hooks.ts#L281"
				}
			],
			"signatures": [
				{
					"id": 68,
					"name": "useConnectionStatus",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for checking whether your app is connected to a wallet or not."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useConnectionStatus } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const connectionStatus = useConnectionStatus();\n\n  if (connectionStatus === \"unknown\") return <p> Loading... </p>;\n  if (connectionStatus === \"connecting\") return <p> Connecting... </p>;\n  if (connectionStatus === \"connected\") return <p> You are connected </p>;\n  if (connectionStatus === \"disconnected\")\n    return <p> You are not connected to a wallet </p>;\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The wallet connection status\n\nIt can be one of the following:\n- "
									},
									{
										"kind": "code",
										"text": "`unknown`"
									},
									{
										"kind": "text",
										"text": ": connection status is not known yet. This is the initial state.\n- "
									},
									{
										"kind": "code",
										"text": "`connecting`"
									},
									{
										"kind": "text",
										"text": ": wallet is being connected. Either because of a user action, or when the wallet is auto-connecting on page load.\n- "
									},
									{
										"kind": "code",
										"text": "`connected`"
									},
									{
										"kind": "text",
										"text": ": the wallet is connected and ready to be used.\n- "
									},
									{
										"kind": "code",
										"text": "`disconnected`"
									},
									{
										"kind": "text",
										"text": ": the wallet is not connected."
									}
								]
							},
							{
								"tag": "@walletConnection",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/core/hooks/wallet-hooks.ts",
							"line": 281,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/hooks/wallet-hooks.ts#L281"
						}
					],
					"type": {
						"type": "reference",
						"target": 107,
						"name": "ConnectionStatus",
						"package": "@thirdweb-dev/react-core"
					}
				}
			]
		},
		{
			"id": 404,
			"name": "useContract",
			"variant": "declaration",
			"kind": 64,
			"flags": {
				"isPublic": true
			},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/contracts.ts",
					"line": 214,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contracts.ts#L214"
				},
				{
					"fileName": "packages/react-core/src/evm/hooks/async/contracts.ts",
					"line": 249,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contracts.ts#L249"
				},
				{
					"fileName": "packages/react-core/src/evm/hooks/async/contracts.ts",
					"line": 275,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contracts.ts#L275"
				},
				{
					"fileName": "packages/react-core/src/evm/hooks/async/contracts.ts",
					"line": 281,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contracts.ts#L281"
				},
				{
					"fileName": "packages/react-core/src/evm/hooks/async/contracts.ts",
					"line": 291,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contracts.ts#L291"
				}
			],
			"signatures": [
				{
					"id": 405,
					"name": "useContract",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for connecting to a smart contract.\n\nProvide your smart contract address as the first parameter. Once connected, the "
							},
							{
								"kind": "code",
								"text": "`contract`"
							},
							{
								"kind": "text",
								"text": " will be an instance of your smart contract.\n\nThe ABI of the smart contract is resolved automatically for contracts deployed or imported using the [thirdweb dashboard](https://thirdweb.com/dashboard)."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```javascript\nconst { contract, isLoading, error } = useContract(contractAddress);\n```"
									}
								]
							},
							{
								"tag": "@remarks",
								"content": [
									{
										"kind": "text",
										"text": "To cache the ABI of the smart contract, use [thirdweb generate](https://portal.thirdweb.com/cli/generate). This is recommended to improve performance and provide type-safety when interacting with your smart contract."
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Query result object that includes the contract once it is resolved"
									}
								]
							},
							{
								"tag": "@contract",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/contracts.ts",
							"line": 214,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contracts.ts#L214"
						}
					],
					"parameters": [
						{
							"id": 406,
							"name": "contractAddress",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The address of the deployed contract"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 467,
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../sdk/src/evm/contracts/smart-contract.ts",
									"qualifiedName": "SmartContract"
								},
								"name": "SmartContract",
								"package": "@thirdweb-dev/sdk"
							}
						],
						"name": "UseContractResult",
						"package": "@thirdweb-dev/react-core"
					}
				},
				{
					"id": 407,
					"name": "useContract",
					"variant": "signature",
					"kind": 4096,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "If your contract is a prebuilt contract, it is strongly recommended you provide the contract's name as the second argument to gain access to improved top-level functions and type inference.\n\nAvailable contract types are:\n- "
							},
							{
								"kind": "code",
								"text": "`\"nft-drop\"`"
							},
							{
								"kind": "text",
								"text": "\n- "
							},
							{
								"kind": "code",
								"text": "`\"signature-drop\"`"
							},
							{
								"kind": "text",
								"text": "\n- "
							},
							{
								"kind": "code",
								"text": "`\"edition-drop\"`"
							},
							{
								"kind": "text",
								"text": "\n- "
							},
							{
								"kind": "code",
								"text": "`\"nft-collection\"`"
							},
							{
								"kind": "text",
								"text": "\n- "
							},
							{
								"kind": "code",
								"text": "`\"edition\"`"
							},
							{
								"kind": "text",
								"text": "\n- "
							},
							{
								"kind": "code",
								"text": "`\"multiwrap\"`"
							},
							{
								"kind": "text",
								"text": "\n- "
							},
							{
								"kind": "code",
								"text": "`\"pack\"`"
							},
							{
								"kind": "text",
								"text": "\n- "
							},
							{
								"kind": "code",
								"text": "`\"token-drop\"`"
							},
							{
								"kind": "text",
								"text": "\n- "
							},
							{
								"kind": "code",
								"text": "`\"token\"`"
							},
							{
								"kind": "text",
								"text": "\n- "
							},
							{
								"kind": "code",
								"text": "`\"marketplace\"`"
							},
							{
								"kind": "text",
								"text": "\n- "
							},
							{
								"kind": "code",
								"text": "`\"marketplace-v3\"`"
							},
							{
								"kind": "text",
								"text": "\n- "
							},
							{
								"kind": "code",
								"text": "`\"split\"`"
							},
							{
								"kind": "text",
								"text": "\n- "
							},
							{
								"kind": "code",
								"text": "`\"vote\"`"
							},
							{
								"kind": "text",
								"text": "\n\nWhen a contract type is provided, the contract object will be typed as the contract's class.\nFor example, if you provide the contract type "
							},
							{
								"kind": "code",
								"text": "`\"pack\"`"
							},
							{
								"kind": "text",
								"text": ", the contract object will be returned typed as an instance of the "
							},
							{
								"kind": "code",
								"text": "`Pack`"
							},
							{
								"kind": "text",
								"text": " class, unlocking all of the top-level functions specific to the pack."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```javascript\nconst { contract, isLoading, error } = useContract(contractAddress, \"pack\");\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Query result object that includes the contract once it is resolved"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/contracts.ts",
							"line": 249,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contracts.ts#L249"
						}
					],
					"typeParameter": [
						{
							"id": 408,
							"name": "TContractType",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "split"
									},
									{
										"type": "literal",
										"value": "edition-drop"
									},
									{
										"type": "literal",
										"value": "edition"
									},
									{
										"type": "literal",
										"value": "marketplace"
									},
									{
										"type": "literal",
										"value": "marketplace-v3"
									},
									{
										"type": "literal",
										"value": "multiwrap"
									},
									{
										"type": "literal",
										"value": "nft-collection"
									},
									{
										"type": "literal",
										"value": "nft-drop"
									},
									{
										"type": "literal",
										"value": "pack"
									},
									{
										"type": "literal",
										"value": "signature-drop"
									},
									{
										"type": "literal",
										"value": "token-drop"
									},
									{
										"type": "literal",
										"value": "token"
									},
									{
										"type": "literal",
										"value": "vote"
									},
									{
										"type": "literal",
										"value": "custom"
									}
								]
							}
						}
					],
					"parameters": [
						{
							"id": 409,
							"name": "contractAddress",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The address of the deployed contract"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						},
						{
							"id": 410,
							"name": "_contractType",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type of the contract"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": -1,
								"name": "TContractType",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 467,
						"typeArguments": [
							{
								"type": "conditional",
								"checkType": {
									"type": "reference",
									"target": -1,
									"name": "TContractType",
									"refersToTypeParameter": true
								},
								"extendsType": {
									"type": "reference",
									"target": {
										"sourceFileName": "../sdk/src/evm/contracts/index.ts",
										"qualifiedName": "PrebuiltContractType"
									},
									"name": "PrebuiltContractType",
									"package": "@thirdweb-dev/sdk"
								},
								"trueType": {
									"type": "reference",
									"target": {
										"sourceFileName": "../sdk/src/evm/contracts/index.ts",
										"qualifiedName": "ContractForPrebuiltContractType"
									},
									"typeArguments": [
										{
											"type": "reference",
											"target": -1,
											"name": "TContractType",
											"refersToTypeParameter": true
										}
									],
									"name": "ContractForPrebuiltContractType",
									"package": "@thirdweb-dev/sdk"
								},
								"falseType": {
									"type": "reference",
									"target": {
										"sourceFileName": "../sdk/src/evm/contracts/smart-contract.ts",
										"qualifiedName": "SmartContract"
									},
									"name": "SmartContract",
									"package": "@thirdweb-dev/sdk"
								}
							}
						],
						"name": "UseContractResult",
						"package": "@thirdweb-dev/react-core"
					}
				},
				{
					"id": 411,
					"name": "useContract",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Optionally, (if you don’t want to use the dashboard import feature),\nyou can provide your smart contract’s ABI to the second parameter of the useContract hook.\nThis is useful when developing on a local node, where it may be faster to use the ABI than to import the contract using the dashboard.\n\nThe ABI is only necessary if you have not deployed your contract with, or imported your contract to the [thirdweb dashboard](https://thirdweb.com/dashboard)."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```javascript\nconst { contract, isLoading, error } = useContract(contractAddress, contractAbi);\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Query result object that includes the contract once it is resolved"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/contracts.ts",
							"line": 275,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contracts.ts#L275"
						}
					],
					"parameters": [
						{
							"id": 412,
							"name": "contractAddress",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The address of the deployed contract"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						},
						{
							"id": 413,
							"name": "_abi",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The ABI of the contract to use"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/@ethersproject+contracts@5.7.0/node_modules/@ethersproject/contracts/src.ts/index.ts",
									"qualifiedName": "ContractInterface"
								},
								"name": "ContractInterface",
								"package": "@ethersproject/contracts"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 467,
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../sdk/src/evm/contracts/smart-contract.ts",
									"qualifiedName": "SmartContract"
								},
								"name": "SmartContract",
								"package": "@thirdweb-dev/sdk"
							}
						],
						"name": "UseContractResult",
						"package": "@thirdweb-dev/react-core"
					}
				},
				{
					"id": 414,
					"name": "useContract",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/contracts.ts",
							"line": 281,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contracts.ts#L281"
						}
					],
					"typeParameter": [
						{
							"id": 415,
							"name": "TContractAddress",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"parameters": [
						{
							"id": 416,
							"name": "contractAddress",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": -1,
										"name": "TContractAddress",
										"refersToTypeParameter": true
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 467,
						"typeArguments": [
							{
								"type": "conditional",
								"checkType": {
									"type": "reference",
									"target": -1,
									"name": "TContractAddress",
									"refersToTypeParameter": true
								},
								"extendsType": {
									"type": "reference",
									"target": {
										"sourceFileName": "../generated-abis/src/index.ts",
										"qualifiedName": "ContractAddress"
									},
									"name": "GeneratedContractAddress",
									"package": "@thirdweb-dev/generated-abis",
									"qualifiedName": "ContractAddress"
								},
								"trueType": {
									"type": "reference",
									"target": {
										"sourceFileName": "../sdk/src/evm/contracts/smart-contract.ts",
										"qualifiedName": "SmartContract"
									},
									"typeArguments": [
										{
											"type": "reference",
											"target": {
												"sourceFileName": "../sdk/src/evm/types/contract.ts",
												"qualifiedName": "BaseContractForAddress"
											},
											"typeArguments": [
												{
													"type": "reference",
													"target": -1,
													"name": "TContractAddress",
													"refersToTypeParameter": true
												}
											],
											"name": "BaseContractForAddress",
											"package": "@thirdweb-dev/sdk"
										}
									],
									"name": "SmartContract",
									"package": "@thirdweb-dev/sdk"
								},
								"falseType": {
									"type": "reference",
									"target": {
										"sourceFileName": "../sdk/src/evm/contracts/smart-contract.ts",
										"qualifiedName": "SmartContract"
									},
									"name": "SmartContract",
									"package": "@thirdweb-dev/sdk"
								}
							}
						],
						"name": "UseContractResult",
						"package": "@thirdweb-dev/react-core"
					}
				}
			]
		},
		{
			"id": 435,
			"name": "useContractEvents",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/contracts.ts",
					"line": 543,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contracts.ts#L543"
				}
			],
			"signatures": [
				{
					"id": 436,
					"name": "useContractEvents",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for reading events emitted by a smart contract, including new events as they are emitted (optional).\n\nBy default, it reads all events emitted by the smart contract."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```tsx\nimport { useContractEvents, useContract } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress);\n  const { data, isLoading, error } = useContractEvents(contract);\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The hook's "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property, once loaded, contains an array of "
									},
									{
										"kind": "code",
										"text": "`ContractEvent`"
									},
									{
										"kind": "text",
										"text": " objects"
									}
								]
							},
							{
								"tag": "@contract",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/contracts.ts",
							"line": 543,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contracts.ts#L543"
						}
					],
					"parameters": [
						{
							"id": 437,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The contract instance of the contract to listen to events for"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/contracts/index.ts",
											"qualifiedName": "ValidContractInstance"
										},
										"name": "ValidContractInstance",
										"package": "@thirdweb-dev/sdk"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						},
						{
							"id": 438,
							"name": "eventName",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The name of the event to query for.\n\nFor example, if your smart contract emits an event called "
									},
									{
										"kind": "code",
										"text": "`MyEvent`"
									},
									{
										"kind": "text",
										"text": ", you would pass "
									},
									{
										"kind": "code",
										"text": "`\"MyEvent\"`"
									},
									{
										"kind": "text",
										"text": " to this parameter.\n\nOmit this parameter or provide undefined to query for all events emitted by the smart contract."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 439,
							"name": "options",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "An object containing options to filter the events being queried.\n\nAvailable options include\n- "
									},
									{
										"kind": "code",
										"text": "`queryFilter`"
									},
									{
										"kind": "text",
										"text": " to refine which events you want to read,\n- a boolean "
									},
									{
										"kind": "code",
										"text": "`subscribe`"
									},
									{
										"kind": "text",
										"text": " flag to subscribe to new events as they are emitted.\n\n### Example\n"
									},
									{
										"kind": "code",
										"text": "```tsx\nimport {\n  useContractEvents,\n  useContract,\n  Web3Button,\n} from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress);\n  const { data, isLoading, error } = useContractEvents(\n    contract,\n    \"MyEvent\",\n    {\n      queryFilter: {\n        filters: {\n          tokenId: 123, // e.g. Only events where tokenId = 123\n        },\n        fromBlock: 0, // Events starting from this block\n        toBlock: 100, // Events up to this block\n        order: \"asc\", // Order of events (\"asc\" or \"desc\")\n      },\n      subscribe: true, // Subscribe to new events\n    },\n  );\n```"
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 440,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 441,
											"name": "queryFilter",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/async/contracts.ts",
													"line": 546,
													"character": 13,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contracts.ts#L546"
												}
											],
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../sdk/src/evm/types/events.ts",
													"qualifiedName": "EventQueryOptions"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "Record"
														},
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "any"
															}
														],
														"name": "Record",
														"package": "typescript"
													}
												],
												"name": "EventQueryOptions",
												"package": "@thirdweb-dev/sdk"
											}
										},
										{
											"id": 442,
											"name": "subscribe",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/async/contracts.ts",
													"line": 546,
													"character": 46,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contracts.ts#L546"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												441,
												442
											]
										}
									],
									"sources": [
										{
											"fileName": "packages/react-core/src/evm/hooks/async/contracts.ts",
											"line": 546,
											"character": 11,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contracts.ts#L546"
										}
									]
								}
							},
							"defaultValue": "..."
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"sourceFileName": "../sdk/src/evm/types/events.ts",
										"qualifiedName": "ContractEvent"
									},
									"typeArguments": [
										{
											"type": "reference",
											"target": {
												"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
												"qualifiedName": "Record"
											},
											"typeArguments": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "intrinsic",
													"name": "any"
												}
											],
											"name": "Record",
											"package": "typescript"
										}
									],
									"name": "ContractEvent",
									"package": "@thirdweb-dev/sdk"
								}
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 417,
			"name": "useContractMetadata",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/contracts.ts",
					"line": 386,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contracts.ts#L386"
				}
			],
			"signatures": [
				{
					"id": 418,
					"name": "useContractMetadata",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Get the metadata of given contract"
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```javascript\nconst { data: contractMetadata, isLoading } = useContractMetadata(contract);\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A Query result object that includes the contract metadata of the deployed contract"
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "ContractMetadata"
									}
								]
							},
							{
								"tag": "@metadata",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/contracts.ts",
							"line": 386,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contracts.ts#L386"
						}
					],
					"typeParameter": [
						{
							"id": 419,
							"name": "TContract",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../sdk/src/evm/contracts/index.ts",
									"qualifiedName": "ValidContractInstance"
								},
								"name": "ValidContractInstance",
								"package": "@thirdweb-dev/sdk"
							}
						}
					],
					"parameters": [
						{
							"id": 420,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The "
									},
									{
										"kind": "code",
										"text": "`ValidContractInstance`"
									},
									{
										"kind": "text",
										"text": " instance of the contract to get the metadata for"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": -1,
										"name": "TContract",
										"refersToTypeParameter": true
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "conditional",
								"checkType": {
									"type": "reference",
									"target": {
										"sourceFileName": "src/core/query-utils/required-param.ts",
										"qualifiedName": "RequiredParam"
									},
									"typeArguments": [
										{
											"type": "reference",
											"target": -1,
											"name": "TContract",
											"refersToTypeParameter": true
										}
									],
									"name": "RequiredParam",
									"package": "@thirdweb-dev/react-core"
								},
								"extendsType": {
									"type": "intrinsic",
									"name": "undefined"
								},
								"trueType": {
									"type": "intrinsic",
									"name": "undefined"
								},
								"falseType": {
									"type": "reference",
									"target": {
										"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
										"qualifiedName": "Awaited"
									},
									"typeArguments": [
										{
											"type": "reference",
											"target": {
												"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
												"qualifiedName": "ReturnType"
											},
											"typeArguments": [
												{
													"type": "indexedAccess",
													"indexType": {
														"type": "literal",
														"value": "get"
													},
													"objectType": {
														"type": "indexedAccess",
														"indexType": {
															"type": "literal",
															"value": "metadata"
														},
														"objectType": {
															"type": "reference",
															"target": -1,
															"name": "TContract",
															"refersToTypeParameter": true
														}
													}
												}
											],
											"name": "ReturnType",
											"package": "typescript"
										}
									],
									"name": "Awaited",
									"package": "typescript"
								}
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 421,
			"name": "useContractMetadataUpdate",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/contracts.ts",
					"line": 438,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contracts.ts#L438"
				}
			],
			"signatures": [
				{
					"id": 422,
					"name": "useContractMetadataUpdate",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Update the metadata of the given contract"
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nconst Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: updateContractMetadata,\n    isLoading,\n    error,\n  } = useContractMetadataUpdate(contract);\n\n  if (error) {\n    console.error(\"failed to update contract metadata\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => updateContractMetadata({ name: \"New name\", description: \"New description\" })}\n    >\n      Update contract metadata\n    </button>\n  );\n};\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Mutation object to update the contract metadata"
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "ContractMetadata"
									}
								]
							},
							{
								"tag": "@metadata",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/contracts.ts",
							"line": 438,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contracts.ts#L438"
						}
					],
					"parameters": [
						{
							"id": 423,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The "
									},
									{
										"kind": "code",
										"text": "`ValidContractInstance`"
									},
									{
										"kind": "text",
										"text": " instance of the contract to get the metadata for"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/contracts/index.ts",
											"qualifiedName": "ValidContractInstance"
										},
										"name": "ValidContractInstance",
										"package": "@thirdweb-dev/sdk"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseMutationResult"
						},
						"typeArguments": [
							{
								"type": "reflection",
								"declaration": {
									"id": 424,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 426,
											"name": "data",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/async/contracts.ts",
													"line": 443,
													"character": 4,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contracts.ts#L443"
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 427,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "packages/react-core/src/evm/hooks/async/contracts.ts",
															"line": 443,
															"character": 10,
															"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contracts.ts#L443"
														}
													],
													"signatures": [
														{
															"id": 428,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"type": {
																"type": "reference",
																"target": {
																	"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
																	"qualifiedName": "Promise"
																},
																"typeArguments": [
																	{
																		"type": "intrinsic",
																		"name": "any"
																	}
																],
																"name": "Promise",
																"package": "typescript"
															}
														}
													]
												}
											}
										},
										{
											"id": 425,
											"name": "receipt",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/async/contracts.ts",
													"line": 442,
													"character": 4,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contracts.ts#L442"
												}
											],
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/.pnpm/@ethersproject+abstract-provider@5.7.0/node_modules/@ethersproject/abstract-provider/src.ts/index.ts",
													"qualifiedName": "TransactionReceipt"
												},
												"name": "providers.TransactionReceipt",
												"package": "@ethersproject/abstract-provider",
												"qualifiedName": "TransactionReceipt"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												426,
												425
											]
										}
									],
									"sources": [
										{
											"fileName": "packages/react-core/src/evm/hooks/async/contracts.ts",
											"line": 441,
											"character": 2,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contracts.ts#L441"
										}
									]
								}
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 429,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 434,
											"name": "app_uri",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/async/contracts.ts",
													"line": 451,
													"character": 4,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contracts.ts#L451"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 431,
											"name": "description",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/async/contracts.ts",
													"line": 448,
													"character": 4,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contracts.ts#L448"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 433,
											"name": "external_link",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/async/contracts.ts",
													"line": 450,
													"character": 4,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contracts.ts#L450"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 432,
											"name": "image",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/async/contracts.ts",
													"line": 449,
													"character": 4,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contracts.ts#L449"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 430,
											"name": "name",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/async/contracts.ts",
													"line": 447,
													"character": 4,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contracts.ts#L447"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												434,
												431,
												433,
												432,
												430
											]
										}
									],
									"sources": [
										{
											"fileName": "packages/react-core/src/evm/hooks/async/contracts.ts",
											"line": 446,
											"character": 2,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contracts.ts#L446"
										}
									]
								}
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseMutationResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 443,
			"name": "useContractRead",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/contracts.ts",
					"line": 671,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contracts.ts#L671"
				}
			],
			"signatures": [
				{
					"id": 444,
					"name": "useContractRead",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Generic hook for reading any data from a smart contract via it’s function/view/variable name.\n\n"
							},
							{
								"kind": "code",
								"text": "```javascript\nconst { contract } = useContract(\"{{contract_address}}\");\nconst { data, isLoading, error } = useContractRead(contract, \"functionName\", args);\n```"
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "Provide your smart contract instance from "
									},
									{
										"kind": "code",
										"text": "`useContract`"
									},
									{
										"kind": "text",
										"text": ", a function name and the arguments to pass to the function (if any).\n\nFor example, to read the value of a view on your smart contract called "
									},
									{
										"kind": "code",
										"text": "`getName`"
									},
									{
										"kind": "text",
										"text": " you would do the following:\n\n"
									},
									{
										"kind": "code",
										"text": "```tsx\nimport { useContractRead, useContract } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress);\n  const { data, isLoading, error } = useContractRead(contract, \"getName\");\n}\n```"
									}
								]
							},
							{
								"tag": "@remarks",
								"content": [
									{
										"kind": "text",
										"text": "If you have cached the ABI of your smart contract using [thirdweb generate](https://portal.thirdweb.com/cli/generate), the functionName and args parameters are strongly typed according to your smart contract’s ABI."
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Query result object that includes the data returned by the function call"
									}
								]
							},
							{
								"tag": "@contract",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/contracts.ts",
							"line": 671,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contracts.ts#L671"
						}
					],
					"typeParameter": [
						{
							"id": 445,
							"name": "TContractAddress",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 446,
							"name": "TContract",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../sdk/src/evm/contracts/index.ts",
									"qualifiedName": "ValidContractInstance"
								},
								"name": "ValidContractInstance",
								"package": "@thirdweb-dev/sdk"
							}
						},
						{
							"id": 447,
							"name": "TContractInstance",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../sdk/src/evm/contracts/index.ts",
									"qualifiedName": "ValidContractInstance"
								},
								"name": "ValidContractInstance",
								"package": "@thirdweb-dev/sdk"
							}
						},
						{
							"id": 448,
							"name": "TFunctionName",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 449,
							"name": "TArgs",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "unknown"
								}
							}
						},
						{
							"id": 450,
							"name": "TReturnType",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"parameters": [
						{
							"id": 451,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The contract instance of the contract to call a function on"
									}
								]
							},
							"type": {
								"type": "conditional",
								"checkType": {
									"type": "reference",
									"target": -1,
									"name": "TContractInstance",
									"refersToTypeParameter": true
								},
								"extendsType": {
									"type": "reference",
									"target": {
										"sourceFileName": "../sdk/src/evm/contracts/index.ts",
										"qualifiedName": "ValidContractInstance"
									},
									"name": "ValidContractInstance",
									"package": "@thirdweb-dev/sdk"
								},
								"trueType": {
									"type": "reference",
									"target": {
										"sourceFileName": "src/core/query-utils/required-param.ts",
										"qualifiedName": "RequiredParam"
									},
									"typeArguments": [
										{
											"type": "reference",
											"target": -1,
											"name": "TContractInstance",
											"refersToTypeParameter": true
										}
									],
									"name": "RequiredParam",
									"package": "@thirdweb-dev/react-core"
								},
								"falseType": {
									"type": "conditional",
									"checkType": {
										"type": "reference",
										"target": -1,
										"name": "TContractAddress",
										"refersToTypeParameter": true
									},
									"extendsType": {
										"type": "intrinsic",
										"name": "never"
									},
									"trueType": {
										"type": "reference",
										"target": {
											"sourceFileName": "src/core/query-utils/required-param.ts",
											"qualifiedName": "RequiredParam"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../sdk/src/evm/contracts/smart-contract.ts",
													"qualifiedName": "SmartContract"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../sdk/src/evm/types/contract.ts",
															"qualifiedName": "BaseContractForAddress"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": -1,
																"name": "TContractAddress",
																"refersToTypeParameter": true
															}
														],
														"name": "BaseContractForAddress",
														"package": "@thirdweb-dev/sdk"
													}
												],
												"name": "SmartContract",
												"package": "@thirdweb-dev/sdk"
											}
										],
										"name": "RequiredParam",
										"package": "@thirdweb-dev/react-core"
									},
									"falseType": {
										"type": "reference",
										"target": {
											"sourceFileName": "src/core/query-utils/required-param.ts",
											"qualifiedName": "RequiredParam"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../sdk/src/evm/contracts/smart-contract.ts",
													"qualifiedName": "SmartContract"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/.pnpm/@ethersproject+contracts@5.7.0/node_modules/@ethersproject/contracts/src.ts/index.ts",
															"qualifiedName": "BaseContract"
														},
														"name": "BaseContract",
														"package": "@ethersproject/contracts"
													}
												],
												"name": "SmartContract",
												"package": "@thirdweb-dev/sdk"
											}
										],
										"name": "RequiredParam",
										"package": "@thirdweb-dev/react-core"
									}
								}
							}
						},
						{
							"id": 452,
							"name": "functionName",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The name of the function to call in the smart contract. This can be any function, view, variable, etc. that does not require a transaction to occur."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "intersection",
										"types": [
											{
												"type": "reference",
												"target": -1,
												"name": "TFunctionName",
												"refersToTypeParameter": true
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						},
						{
							"id": 453,
							"name": "args",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The arguments to pass to the function (if any)"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": -1,
								"name": "TArgs",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 454,
							"name": "overrides",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "code",
										"text": "`CallOverrides`"
									},
									{
										"kind": "text",
										"text": " object to send with your request.\n\nTo include the sender's address (msg.sender) when calling view functions within your smart contract, include the property "
									},
									{
										"kind": "code",
										"text": "`{from: 0X123}`"
									},
									{
										"kind": "text",
										"text": " passing the relevant address.\n\n"
									},
									{
										"kind": "code",
										"text": "```ts\nconst { data, isLoading, error } = useContractRead(contract, \"getName\", [\"arg1\", \"arg2\"], {\n    blockTag: 123,\n    from: \"0x123\",\n  });\n```"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/@ethersproject+contracts@5.7.0/node_modules/@ethersproject/contracts/src.ts/index.ts",
									"qualifiedName": "CallOverrides"
								},
								"name": "CallOverrides",
								"package": "@ethersproject/contracts"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": -1,
								"name": "TReturnType",
								"refersToTypeParameter": true
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 366,
			"name": "useContractType",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/contracts.ts",
					"line": 77,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contracts.ts#L77"
				}
			],
			"signatures": [
				{
					"id": 367,
					"name": "useContractType",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for determining the type of contract for a contract address.\n\nThis is useful if you want to determine if a contract is a [prebuilt contract](https://portal.thirdweb.com/pre-built-contracts)."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useContractType } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { data, isLoading, error } = useContractType(contractAddress);\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Query result containing the type of the contract in the "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property"
									}
								]
							},
							{
								"tag": "@metadata",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/contracts.ts",
							"line": 77,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contracts.ts#L77"
						}
					],
					"parameters": [
						{
							"id": 368,
							"name": "contractAddress",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The address of the contract"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "literal",
										"value": "split"
									},
									{
										"type": "literal",
										"value": "edition-drop"
									},
									{
										"type": "literal",
										"value": "edition"
									},
									{
										"type": "literal",
										"value": "marketplace"
									},
									{
										"type": "literal",
										"value": "marketplace-v3"
									},
									{
										"type": "literal",
										"value": "multiwrap"
									},
									{
										"type": "literal",
										"value": "nft-collection"
									},
									{
										"type": "literal",
										"value": "nft-drop"
									},
									{
										"type": "literal",
										"value": "pack"
									},
									{
										"type": "literal",
										"value": "signature-drop"
									},
									{
										"type": "literal",
										"value": "token-drop"
									},
									{
										"type": "literal",
										"value": "token"
									},
									{
										"type": "literal",
										"value": "vote"
									},
									{
										"type": "literal",
										"value": "custom"
									}
								]
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 455,
			"name": "useContractWrite",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/contracts.ts",
					"line": 774,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contracts.ts#L774"
				}
			],
			"signatures": [
				{
					"id": 456,
					"name": "useContractWrite",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Generic hook for calling any smart contract function that requires a transaction to take place.\n\nProvide your smart contract instance returned from the "
							},
							{
								"kind": "code",
								"text": "`useContract`"
							},
							{
								"kind": "text",
								"text": " hook, along with the name of the function you wish to call on your smart contract as arguments to the hook.\n\nThen call the "
							},
							{
								"kind": "code",
								"text": "`mutate`"
							},
							{
								"kind": "text",
								"text": " or "
							},
							{
								"kind": "code",
								"text": "`mutateAsync`"
							},
							{
								"kind": "text",
								"text": " function returned by the hook, providing an array of arguments to send to your smart contract function.\n\nIf you provide too many or too few arguments, the "
							},
							{
								"kind": "code",
								"text": "`error`"
							},
							{
								"kind": "text",
								"text": " property will be populated with an error message.\n\nIf your function has no arguments, provide an empty array by calling the function with "
							},
							{
								"kind": "code",
								"text": "`{ args: [] }`"
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```javascript\nimport { useContractWrite, useContract, Web3Button } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress);\n  const { mutateAsync, isLoading, error } = useContractWrite(\n    contract,\n    \"setName\",\n  );\n\n  return (\n    <Web3Button\n      contractAddress={contractAddress}\n      // Calls the \"setName\" function on your smart contract with \"My Name\" as the first argument\n      action={() => mutateAsync({ args: [\"My Name\"] })}\n    >\n      Send Transaction\n    </Web3Button>\n  );\n}\n```"
									}
								]
							},
							{
								"tag": "@remarks",
								"content": [
									{
										"kind": "text",
										"text": "If you have cached the ABI of your smart contract using [thirdweb generate](https://portal.thirdweb.com/cli/generate), the functionName and args parameters are strongly typed according to your smart contract’s ABI."
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A mutation object that includes the write function to call"
									}
								]
							},
							{
								"tag": "@contract",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/contracts.ts",
							"line": 774,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contracts.ts#L774"
						}
					],
					"typeParameter": [
						{
							"id": 457,
							"name": "TContractAddress",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 458,
							"name": "TContract",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../sdk/src/evm/contracts/index.ts",
									"qualifiedName": "ValidContractInstance"
								},
								"name": "ValidContractInstance",
								"package": "@thirdweb-dev/sdk"
							}
						},
						{
							"id": 459,
							"name": "TContractInstance",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../sdk/src/evm/contracts/index.ts",
									"qualifiedName": "ValidContractInstance"
								},
								"name": "ValidContractInstance",
								"package": "@thirdweb-dev/sdk"
							}
						},
						{
							"id": 460,
							"name": "TFunctionName",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 461,
							"name": "TArgs",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"parameters": [
						{
							"id": 462,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The contract instance of the contract to call a function on"
									}
								]
							},
							"type": {
								"type": "conditional",
								"checkType": {
									"type": "reference",
									"target": -1,
									"name": "TContractInstance",
									"refersToTypeParameter": true
								},
								"extendsType": {
									"type": "reference",
									"target": {
										"sourceFileName": "../sdk/src/evm/contracts/index.ts",
										"qualifiedName": "ValidContractInstance"
									},
									"name": "ValidContractInstance",
									"package": "@thirdweb-dev/sdk"
								},
								"trueType": {
									"type": "reference",
									"target": {
										"sourceFileName": "src/core/query-utils/required-param.ts",
										"qualifiedName": "RequiredParam"
									},
									"typeArguments": [
										{
											"type": "reference",
											"target": -1,
											"name": "TContractInstance",
											"refersToTypeParameter": true
										}
									],
									"name": "RequiredParam",
									"package": "@thirdweb-dev/react-core"
								},
								"falseType": {
									"type": "conditional",
									"checkType": {
										"type": "reference",
										"target": -1,
										"name": "TContractAddress",
										"refersToTypeParameter": true
									},
									"extendsType": {
										"type": "intrinsic",
										"name": "never"
									},
									"trueType": {
										"type": "reference",
										"target": {
											"sourceFileName": "src/core/query-utils/required-param.ts",
											"qualifiedName": "RequiredParam"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../sdk/src/evm/contracts/smart-contract.ts",
													"qualifiedName": "SmartContract"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../sdk/src/evm/types/contract.ts",
															"qualifiedName": "BaseContractForAddress"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": -1,
																"name": "TContractAddress",
																"refersToTypeParameter": true
															}
														],
														"name": "BaseContractForAddress",
														"package": "@thirdweb-dev/sdk"
													}
												],
												"name": "SmartContract",
												"package": "@thirdweb-dev/sdk"
											}
										],
										"name": "RequiredParam",
										"package": "@thirdweb-dev/react-core"
									},
									"falseType": {
										"type": "reference",
										"target": {
											"sourceFileName": "src/core/query-utils/required-param.ts",
											"qualifiedName": "RequiredParam"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../sdk/src/evm/contracts/smart-contract.ts",
													"qualifiedName": "SmartContract"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/.pnpm/@ethersproject+contracts@5.7.0/node_modules/@ethersproject/contracts/src.ts/index.ts",
															"qualifiedName": "BaseContract"
														},
														"name": "BaseContract",
														"package": "@ethersproject/contracts"
													}
												],
												"name": "SmartContract",
												"package": "@thirdweb-dev/sdk"
											}
										],
										"name": "RequiredParam",
										"package": "@thirdweb-dev/react-core"
									}
								}
							}
						},
						{
							"id": 463,
							"name": "functionName",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The name of the function to call in the smart contract."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "intersection",
										"types": [
											{
												"type": "reference",
												"target": -1,
												"name": "TFunctionName",
												"refersToTypeParameter": true
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseMutationResult"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Omit"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/core/types.ts",
											"qualifiedName": "TransactionResultWithMetadata"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "TransactionResultWithMetadata",
										"package": "@thirdweb-dev/sdk"
									},
									{
										"type": "literal",
										"value": "data"
									}
								],
								"name": "Omit",
								"package": "typescript"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 464,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 465,
											"name": "args",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/async/contracts.ts",
													"line": 813,
													"character": 6,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contracts.ts#L813"
												}
											],
											"type": {
												"type": "reference",
												"target": -1,
												"name": "TArgs",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 466,
											"name": "overrides",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/async/contracts.ts",
													"line": 814,
													"character": 6,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contracts.ts#L814"
												}
											],
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/.pnpm/@ethersproject+contracts@5.7.0/node_modules/@ethersproject/contracts/src.ts/index.ts",
													"qualifiedName": "CallOverrides"
												},
												"name": "CallOverrides",
												"package": "@ethersproject/contracts"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												465,
												466
											]
										}
									],
									"sources": [
										{
											"fileName": "packages/react-core/src/evm/hooks/async/contracts.ts",
											"line": 812,
											"character": 7,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contracts.ts#L812"
										}
									]
								}
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseMutationResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 936,
			"name": "useCreateAccount",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/account-factory.ts",
					"line": 163,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/account-factory.ts#L163"
				}
			],
			"signatures": [
				{
					"id": 937,
					"name": "useCreateAccount",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Create a account in the account factory contract"
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nconst Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: createAccount,\n    isLoading,\n    error,\n  } = useCreateAccount(contract);\n\n  if (error) {\n    console.error(\"failed to create account\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => createAccount(\"0x...\")}\n    >\n      Create Account\n    </button>\n  );\n};\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A mutation object to create a account"
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "AccountFactory"
									}
								]
							},
							{
								"tag": "@smartWallet",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/account-factory.ts",
							"line": 163,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/account-factory.ts#L163"
						}
					],
					"parameters": [
						{
							"id": 938,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a account factory contract"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/contracts/smart-contract.ts",
											"qualifiedName": "SmartContract"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/.pnpm/@ethersproject+contracts@5.7.0/node_modules/@ethersproject/contracts/src.ts/index.ts",
													"qualifiedName": "BaseContract"
												},
												"name": "BaseContract",
												"package": "@ethersproject/contracts"
											}
										],
										"name": "SmartContract",
										"package": "@thirdweb-dev/sdk"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseMutationResult"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../sdk/src/evm/core/types.ts",
									"qualifiedName": "TransactionResultWithAddress"
								},
								"name": "TransactionResultWithAddress",
								"package": "@thirdweb-dev/sdk"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							},
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseMutationResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 596,
			"name": "useCreateAuctionListing",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
					"line": 2141,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L2141"
				}
			],
			"signatures": [
				{
					"id": 597,
					"name": "useCreateAuctionListing",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for creating an auction listing on a "
							},
							{
								"kind": "code",
								"text": "`Marketplace`"
							},
							{
								"kind": "text",
								"text": " or\n[MarketplaceV3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) smart contract.\n\nAuction listings hold the NFTs in escrow; requiring the seller to transfer the NFTs to the marketplace contract\nas part of the listing creation process.\n\nProvide your "
							},
							{
								"kind": "code",
								"text": "`Marketplace`"
							},
							{
								"kind": "text",
								"text": "\nor\n[MarketplaceV3](https://thirdweb.com/thirdweb.eth/MarketplaceV3)\ncontract as the argument to the hook.\n\nThen, provide the information about the listing you want to create as the argument to the mutation."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport {\n  useCreateAuctionListing,\n  useContract,\n  Web3Button,\n} from \"@thirdweb-dev/react\";\nimport { NATIVE_TOKEN_ADDRESS } from \"@thirdweb-dev/sdk\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress, \"marketplace-v3\");\n  const {\n    mutateAsync: createAuctionListing,\n    isLoading,\n    error,\n  } = useCreateAuctionListing(contract);\n\n  return (\n    <Web3Button\n      contractAddress={contractAddress}\n      action={() =>\n        createAuctionListing({\n          tokenId: \"{{token_id}}\", // The ID of the token to list.\n          assetContractAddress: \"{{asset_contract_address}}\", // The contract address of the asset being listed.\n          currencyContractAddress: NATIVE_TOKEN_ADDRESS, // The address of the currency to accept for the listing.\n          quantity: \"{{quantity}}\",\n          startTimestamp: new Date(),\n          buyoutBidAmount: \"{{buyout_bid_amount}}\",\n          minimumBidAmount: \"{{minimum_bid_amount}}\",\n          endTimestamp: new Date(),\n          bidBufferBps: \"{{bid_buffer_bps}}\",\n          timeBufferInSeconds: \"{{time_buffer_in_seconds}}\",\n        })\n      }\n    >\n      Create Auction Listing\n    </Web3Button>\n  );\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A mutation object to create a new auction listing.\n\n"
									},
									{
										"kind": "code",
										"text": "```ts\nconst { mutateAsync, isLoading, error } = useCreateAuctionListing(contract);\n```"
									},
									{
										"kind": "text",
										"text": "\n\n### options\n\nThe mutation function takes an object of type "
									},
									{
										"kind": "code",
										"text": "`NewAuctionListing`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`EnglishAuctionInputParams`"
									},
									{
										"kind": "text",
										"text": " as its argument which contains the following properties:\n\n#### tokenId (required)\nThe token ID of the NFT you are listing for auction.\n\n#### assetContractAddress (required)\nThe smart contract address of the NFT you are listing for auction.\n\n#### buyoutBidAmount (required)\nThe price to **buy** each token in the listing.\n\n- For ERC721 NFTs, this is the price to buy the NFT outright.\n- For ERC1155 NFTs, this is the price to "
									},
									{
										"kind": "code",
										"text": "`1`"
									},
									{
										"kind": "text",
										"text": " quantity of the NFT.\n\n#### currencyContractAddress (optional)\nThe address of the currency you want users to pay with and make bids in.\n\nYou likely want to use the token native to the chain you are on, e.g. Ether on Ethereum.\n\nTo do that, you can import the "
									},
									{
										"kind": "code",
										"text": "`NATIVE_TOKEN_ADDRESS`"
									},
									{
										"kind": "text",
										"text": " constant from "
									},
									{
										"kind": "code",
										"text": "`@thirdweb-dev/sdk`"
									},
									{
										"kind": "text",
										"text": ".\n\nThe default value is "
									},
									{
										"kind": "code",
										"text": "`NATIVE_TOKEN_ADDRESS`"
									},
									{
										"kind": "text",
										"text": ".\n\n\n#### quantity (optional)\nHow many tokens to include in the listing.\n\n- For ERC721 NFTs, this is always "
									},
									{
										"kind": "code",
										"text": "`1`"
									},
									{
										"kind": "text",
										"text": ".\n- For ERC1155 NFTs, this is the quantity of tokens to include in the listing.\n\nThe default value is "
									},
									{
										"kind": "code",
										"text": "`1`"
									},
									{
										"kind": "text",
										"text": ".\n\n#### minimumBidAmount (required)\nThe minimum price that a bid must be in order to be placed on the listing, per token.\n\nBids that are lower than the reserve price will be rejected by the contract.\n\nThe default value is "
									},
									{
										"kind": "code",
										"text": "`0`"
									},
									{
										"kind": "text",
										"text": ".\n\n\n#### startTimestamp (optional)\nA "
									},
									{
										"kind": "code",
										"text": "`Date`"
									},
									{
										"kind": "text",
										"text": " object for the start time of the listing.\n\nThe default value is "
									},
									{
										"kind": "code",
										"text": "`new Date()`"
									},
									{
										"kind": "text",
										"text": ", which is the current time.\n\n\n#### endTimestamp (optional)\nA "
									},
									{
										"kind": "code",
										"text": "`Date`"
									},
									{
										"kind": "text",
										"text": " object for the end time of the listing (when the listing will expire).\n\n#### bidBufferBps (optional)\nBid buffer in basis points (1/100th of a percent).\n\nThe bid buffer is what percentage higher the next bid must be than the current highest bid.\n\nFor example, if you set a bid buffer of "
									},
									{
										"kind": "code",
										"text": "`100`"
									},
									{
										"kind": "text",
										"text": ", then the next bid must be at least "
									},
									{
										"kind": "code",
										"text": "`1%`"
									},
									{
										"kind": "text",
										"text": " higher than the current highest bid.\n\n#### timeBufferInSeconds (optional)\nTime buffer in seconds.\n\nThe time buffer is how much time is added to the listing when a new bid is placed.\n\nThis is to prevent users from placing a bid at the last second and winning the auction."
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "EnglishAuctions"
									}
								]
							},
							{
								"tag": "@marketplace",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
							"line": 2141,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L2141"
						}
					],
					"typeParameter": [
						{
							"id": 598,
							"name": "TMarketplace",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts",
											"qualifiedName": "Marketplace"
										},
										"name": "Marketplace",
										"package": "@thirdweb-dev/sdk"
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/marketplacev3.ts",
											"qualifiedName": "MarketplaceV3"
										},
										"name": "MarketplaceV3",
										"package": "@thirdweb-dev/sdk"
									}
								]
							}
						}
					],
					"parameters": [
						{
							"id": 599,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`Marketplace`"
									},
									{
										"kind": "text",
										"text": " contract"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": -1,
										"name": "TMarketplace",
										"refersToTypeParameter": true
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseMutationResult"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../sdk/src/evm/core/types.ts",
									"qualifiedName": "TransactionResultWithId"
								},
								"name": "TransactionResultWithId",
								"package": "@thirdweb-dev/sdk"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							},
							{
								"type": "conditional",
								"checkType": {
									"type": "reference",
									"target": -1,
									"name": "TMarketplace",
									"refersToTypeParameter": true
								},
								"extendsType": {
									"type": "reference",
									"target": {
										"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts",
										"qualifiedName": "Marketplace"
									},
									"name": "Marketplace",
									"package": "@thirdweb-dev/sdk"
								},
								"trueType": {
									"type": "reference",
									"target": {
										"sourceFileName": "../sdk/src/evm/types/marketplace/NewAuctionListing.ts",
										"qualifiedName": "NewAuctionListing"
									},
									"name": "NewAuctionListing",
									"package": "@thirdweb-dev/sdk"
								},
								"falseType": {
									"type": "reflection",
									"declaration": {
										"id": 600,
										"name": "__type",
										"variant": "declaration",
										"kind": 65536,
										"flags": {},
										"sources": [
											{
												"fileName": "packages/sdk/dist/declarations/src/evm/schema/marketplacev3/english-auctions.d.ts",
												"line": 65,
												"character": 3
											}
										]
									}
								}
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseMutationResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 591,
			"name": "useCreateDirectListing",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
					"line": 1885,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L1885"
				}
			],
			"signatures": [
				{
					"id": 592,
					"name": "useCreateDirectListing",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for creating a new direct listing on a "
							},
							{
								"kind": "code",
								"text": "`Marketplace`"
							},
							{
								"kind": "text",
								"text": "\nor [MarketplaceV3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) smart contract.\n\nDirect listings require the user to approve the marketplace to transfer the NFTs on their behalf as part of the listing creation process.\nThis is because the marketplace needs permission to execute sales and transfer the NFTs to the buyer when a sale is made."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport {\n  useCreateDirectListing,\n  useContract,\n  Web3Button,\n} from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress, \"marketplace-v3\");\n  const {\n    mutateAsync: createDirectListing,\n    isLoading,\n    error,\n  } = useCreateDirectListing(contract);\n\n  return (\n    <Web3Button\n      contractAddress={contractAddress}\n      action={() =>\n        createDirectListing({\n          assetContractAddress: \"{{asset_contract_address}}\",\n          tokenId: \"{{token_id}}\",\n          pricePerToken: \"{{price_per_token}}\",\n          currencyContractAddress: \"{{currency_contract_address}}\",\n          isReservedListing: false,\n          quantity: \"{{quantity}}\",\n          startTimestamp: new Date(),\n          endTimestamp: new Date(\n            new Date().getTime() + 7 * 24 * 60 * 60 * 1000,\n          ),\n        })\n      }\n    >\n      Create Direct Listing\n    </Web3Button>\n  );\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Mutation object to create a new direct listing\n\n"
									},
									{
										"kind": "code",
										"text": "```ts\nconst { mutateAsync, isLoading, error } = useCreateDirectListing(contract);\n```"
									},
									{
										"kind": "text",
										"text": "\n\n### options\nThe mutation function takes an object as an argument with the following properties:\n\n#### assetContractAddress (required)\nThe address of the NFT smart contract that you want to list.\n\n#### tokenId (required)\nThe token ID of the NFT that you want to list.\n\n#### pricePerToken (required)\nThe price to **buy** each token in the listing.\n\n- For ERC721 NFTs, this is the price to buy the NFT outright.\n- For ERC1155 NFTs, this is the price to "
									},
									{
										"kind": "code",
										"text": "`1`"
									},
									{
										"kind": "text",
										"text": " quantity of the NFT.\n\n#### currencyContractAddress (optional)\nThe address of the currency you want users to pay with and make bids in.\n\nYou likely want to use the token native to the chain you are on, e.g. Ether on Ethereum.\n\nTo do that, you can import the "
									},
									{
										"kind": "code",
										"text": "`NATIVE_TOKEN_ADDRESS`"
									},
									{
										"kind": "text",
										"text": " constant from "
									},
									{
										"kind": "code",
										"text": "`@thirdweb-dev/sdk`"
									},
									{
										"kind": "text",
										"text": ".\n\nThe default value is "
									},
									{
										"kind": "code",
										"text": "`NATIVE_TOKEN_ADDRESS`"
									},
									{
										"kind": "text",
										"text": ".\n\n#### isReservedListing (optional)\nWhen set to true, the seller must explicitly approve which wallet addresses can buy the NFT.\n\n#### quantity (optional)\nHow many tokens to include in the listing.\n\n- For ERC721 NFTs, this is always "
									},
									{
										"kind": "code",
										"text": "`1`"
									},
									{
										"kind": "text",
										"text": ".\n- For ERC1155 NFTs, this is the quantity of tokens to include in the listing.\n\n#### startTimestamp (optional)\nA "
									},
									{
										"kind": "code",
										"text": "`Date`"
									},
									{
										"kind": "text",
										"text": " object for the start time of the listing.\n\nThe default value is "
									},
									{
										"kind": "code",
										"text": "`new Date()`"
									},
									{
										"kind": "text",
										"text": ", which is the current time.\n\n#### endTimestamp (optional)\nA "
									},
									{
										"kind": "code",
										"text": "`Date`"
									},
									{
										"kind": "text",
										"text": " object for the end time of the listing (when the listing will expire)."
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "DirectListings"
									}
								]
							},
							{
								"tag": "@marketplace",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
							"line": 1885,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L1885"
						}
					],
					"typeParameter": [
						{
							"id": 593,
							"name": "TMarketplace",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts",
											"qualifiedName": "Marketplace"
										},
										"name": "Marketplace",
										"package": "@thirdweb-dev/sdk"
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/marketplacev3.ts",
											"qualifiedName": "MarketplaceV3"
										},
										"name": "MarketplaceV3",
										"package": "@thirdweb-dev/sdk"
									}
								]
							}
						}
					],
					"parameters": [
						{
							"id": 594,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a Marketplace contract"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": -1,
										"name": "TMarketplace",
										"refersToTypeParameter": true
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseMutationResult"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../sdk/src/evm/core/types.ts",
									"qualifiedName": "TransactionResultWithId"
								},
								"name": "TransactionResultWithId",
								"package": "@thirdweb-dev/sdk"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							},
							{
								"type": "conditional",
								"checkType": {
									"type": "reference",
									"target": -1,
									"name": "TMarketplace",
									"refersToTypeParameter": true
								},
								"extendsType": {
									"type": "reference",
									"target": {
										"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts",
										"qualifiedName": "Marketplace"
									},
									"name": "Marketplace",
									"package": "@thirdweb-dev/sdk"
								},
								"trueType": {
									"type": "reference",
									"target": {
										"sourceFileName": "../sdk/src/evm/types/marketplace/NewDirectListing.ts",
										"qualifiedName": "NewDirectListing"
									},
									"name": "NewDirectListing",
									"package": "@thirdweb-dev/sdk"
								},
								"falseType": {
									"type": "reflection",
									"declaration": {
										"id": 595,
										"name": "__type",
										"variant": "declaration",
										"kind": 65536,
										"flags": {},
										"sources": [
											{
												"fileName": "packages/sdk/dist/declarations/src/evm/schema/marketplacev3/direct-listings.d.ts",
												"line": 49,
												"character": 3
											}
										]
									}
								}
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseMutationResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 773,
			"name": "useCreateDirectListingBatch",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
					"line": 1981,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L1981"
				}
			],
			"signatures": [
				{
					"id": 774,
					"name": "useCreateDirectListingBatch",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Create multiple direct listings in one batch"
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nconst Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: createDirectListingBatch,\n    isLoading,\n    error,\n  } = useCreateDirectListingBatch(contract);\n\n  if (error) {\n    console.error(\"failed to create direct listing batch\", error);\n  }\n  \n  // Sample data\n  const directListingData = [\n    {\n      assetContractAddress: \"nft-contract-address\",\n      tokenId: \"token-id-1\",\n      quantity: \"quantity-1\",\n      currencyContractAddress: \"currency-address\",\n      pricePerToken: 1\n    },\n    {\n      assetContractAddress: \"nft-contract-address\",\n      tokenId: \"token-id-2\",\n      quantity: 1,\n      currencyContractAddress: \"currency-address\",\n      pricePerToken: 0\n    },\n  ];\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => createDirectListingBatch(directListingData)}\n    >\n      Create batch Direct Listing!\n    </button>\n  );\n};\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "a mutation object that can be used to create a new batch of direct listings"
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "DirectListings"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
							"line": 1981,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L1981"
						}
					],
					"typeParameter": [
						{
							"id": 775,
							"name": "TMarketplaceV3",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/marketplacev3.ts",
									"qualifiedName": "MarketplaceV3"
								},
								"name": "MarketplaceV3",
								"package": "@thirdweb-dev/sdk"
							}
						}
					],
					"parameters": [
						{
							"id": 776,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "an instance of a Marketplace contract"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": -1,
										"name": "TMarketplaceV3",
										"refersToTypeParameter": true
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseMutationResult"
						},
						"typeArguments": [
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"sourceFileName": "../sdk/src/evm/core/types.ts",
										"qualifiedName": "TransactionResultWithId"
									},
									"name": "TransactionResultWithId",
									"package": "@thirdweb-dev/sdk"
								}
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reflection",
									"declaration": {
										"id": 777,
										"name": "__type",
										"variant": "declaration",
										"kind": 65536,
										"flags": {},
										"sources": [
											{
												"fileName": "packages/sdk/dist/declarations/src/evm/schema/marketplacev3/direct-listings.d.ts",
												"line": 49,
												"character": 3
											}
										]
									}
								}
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseMutationResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 950,
			"name": "useCreateSessionKey",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/account.ts",
					"line": 194,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/account.ts#L194"
				}
			],
			"signatures": [
				{
					"id": 951,
					"name": "useCreateSessionKey",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Create and add a session key for the smart wallet account"
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\n const Component = () => {\n   const {\n     mutate: createSessionKey,\n     isLoading,\n     error,\n   } = useCreateSessionKey();\n\n   if (error) {\n     console.error(\"failed to create session key\", error);\n   }\n\n   return (\n     <button\n       disabled={isLoading}\n       onClick={() => createSessionKey(\n         keyAddress,\n         {\n           approvedCallTargets: [\"0x...\"], // the addresses of contracts that the session key can call\n           nativeTokenLimitPerTransaction: 0.1, // the maximum amount of native token (in ETH) that the session key can spend per transaction\n           startDate: new Date(), // the date when the session key becomes active\n           expirationDate = new Date(Date.now() + 24 * 60 * 60 * 1000); // the date when the session key expires\n         }\n        )}\n     >\n       Create Session Key\n     </button>\n   );\n };\n```"
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "Account"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Mutation object to create and add a session key for the smart wallet\n\n"
									},
									{
										"kind": "code",
										"text": "```ts\nconst { mutateAsync, isLoading, error } = useCreateSessionKey();\n```"
									},
									{
										"kind": "text",
										"text": "\n\n### options\nThe mutation function takes an object with the following properties as argument:\n\n#### address\nThe address to add as an admin on the account as a "
									},
									{
										"kind": "code",
										"text": "`string`"
									},
									{
										"kind": "text",
										"text": ".\n\n#### approvedCallTargets\nAn array of addresses that the session key can call as a "
									},
									{
										"kind": "code",
										"text": "`string[]`"
									},
									{
										"kind": "text",
										"text": ".\n\n#### nativeTokenLimitPerTransaction\nThe maximum amount of native token (in ETH) that the session key can spend per transaction as a "
									},
									{
										"kind": "code",
										"text": "`number`"
									},
									{
										"kind": "text",
										"text": ".\n\n#### startDate\nThe date when the session key becomes active as a "
									},
									{
										"kind": "code",
										"text": "`Date`"
									},
									{
										"kind": "text",
										"text": ".\n\n#### startDate\nThe date when the session key expires as a "
									},
									{
										"kind": "code",
										"text": "`Date`"
									},
									{
										"kind": "text",
										"text": "."
									}
								]
							},
							{
								"tag": "@smartWallet",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/account.ts",
							"line": 194,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/account.ts#L194"
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseMutationResult"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../sdk/src/evm/core/types.ts",
									"qualifiedName": "TransactionResult"
								},
								"name": "TransactionResult",
								"package": "@thirdweb-dev/sdk"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "src/evm/hooks/async/account.ts",
									"qualifiedName": "CreateSessionKeyInput"
								},
								"name": "CreateSessionKeyInput",
								"package": "@thirdweb-dev/react-core"
							}
						],
						"name": "UseMutationResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 69,
			"name": "useCreateWalletInstance",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/core/hooks/wallet-hooks.ts",
					"line": 381,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/hooks/wallet-hooks.ts#L381"
				}
			],
			"signatures": [
				{
					"id": 70,
					"name": "useCreateWalletInstance",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for creating a wallet instance from given "
							},
							{
								"kind": "code",
								"text": "`WalletConfig`"
							},
							{
								"kind": "text",
								"text": " object.\n\nIf you just want to connect the wallet and don't need the wallet instance before connecting the wallet, use the "
							},
							{
								"kind": "code",
								"text": "`useConnect`"
							},
							{
								"kind": "text",
								"text": " hook instead."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useConnect, metamaskWallet } from \"@thirdweb-dev/react\";\n\nconst metamaskConfig = metamaskWallet();\n\nfunction App() {\n  const createWalletInstance = useCreateWalletInstance();\n\n  return (\n    <button\n      onClick={() => {\n        const metamaskWalletInstance = createWalletInstance(metamaskConfig);\n        console.log(metamaskWalletInstance);\n      }}\n    >\n      create wallet instance\n    </button>\n  );\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A function that creates a wallet instance for given "
									},
									{
										"kind": "code",
										"text": "`WalletConfig`"
									},
									{
										"kind": "text",
										"text": " object."
									}
								]
							},
							{
								"tag": "@walletConnection",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/core/hooks/wallet-hooks.ts",
							"line": 381,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/hooks/wallet-hooks.ts#L381"
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 71,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/providers/thirdweb-wallet-provider.tsx",
									"line": 101,
									"character": 24,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/providers/thirdweb-wallet-provider.tsx#L101"
								}
							],
							"signatures": [
								{
									"id": 72,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/react-core/src/core/providers/thirdweb-wallet-provider.tsx",
											"line": 101,
											"character": 24,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/providers/thirdweb-wallet-provider.tsx#L101"
										}
									],
									"typeParameter": [
										{
											"id": 73,
											"name": "I",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 232,
												"name": "WalletInstance",
												"package": "@thirdweb-dev/react-core"
											}
										}
									],
									"parameters": [
										{
											"id": 74,
											"name": "Wallet",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 142,
												"typeArguments": [
													{
														"type": "reference",
														"target": -1,
														"name": "I",
														"refersToTypeParameter": true
													}
												],
												"name": "WalletConfig",
												"package": "@thirdweb-dev/react-core"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": -1,
										"name": "I",
										"refersToTypeParameter": true
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 503,
			"name": "useDelayedRevealLazyMint",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/drop.ts",
					"line": 679,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/drop.ts#L679"
				}
			],
			"signatures": [
				{
					"id": 504,
					"name": "useDelayedRevealLazyMint",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook to lazy-mint a batch of NFTs with [delayed reveal](https://portal.thirdweb.com/glossary/delayed-reveal);\nallowing the owner to set placeholder metadata and reveal the metadata of the NFTs at a later time.\n\nAvailable to use on contracts that implement the\n[ERC721Revealable](https://portal.thirdweb.com/contracts/build/extensions/erc-721/ERC721Revealable)\nor [ERC1155Revealable](https://portal.thirdweb.com/contracts/build/extensions/erc-1155/ERC1155Revealable)\ninterfaces."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```tsx\nimport {\n  useDelayedRevealLazyMint,\n  useContract,\n  Web3Button,\n} from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress);\n  const {\n    mutateAsync: mintNft,\n    isLoading,\n    error,\n  } = useDelayedRevealLazyMint(contract);\n\n  const nftData = {\n    placeholder: {\n      name: \"My NFT\",\n      description: \"This is my NFT\",\n      image: \"ipfs://example.com/my-nft.png\", // Accepts any URL or File type\n    },\n    metadatas: [\n      {\n        name: \"My NFT\",\n        description: \"This is my NFT\",\n        image: \"ipfs://example.com/my-nft.png\", // Accepts any URL or File type\n      },\n    ],\n    password: \"{{password}}\", // Password to be used for encryption\n  };\n\n  return (\n    <Web3Button\n      contractAddress={contractAddress}\n      action={() => mintNft(nftData)}\n    >\n      Mint NFTs\n    </Web3Button>\n  );\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Mutation object to lazy mint a batch of NFTs\n\n"
									},
									{
										"kind": "code",
										"text": "```ts\nconst { mutateAsync, isLoading, error } = useDelayedRevealLazyMint(contract);\n```"
									},
									{
										"kind": "text",
										"text": "\n\n### options\nThe mutation function takes an object as argument with below properties:\n\n#### metadatas\nAn array of metadata objects, representing the metadata of the NFTs to be lazy-minted. Each metadata object must conform to the [standard metadata properties](https://docs.opensea.io/docs/metadata-standards).\n\n#### password\nThe password used to encrypt the metadatas.\n\n__The password CANNOT be recovered once it is set. If you lose the password, you will not be able to reveal the metadata.__"
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "ERC721Revealable | ERC1155Revealable"
									}
								]
							},
							{
								"tag": "@delayedReveal",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/drop.ts",
							"line": 679,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/drop.ts#L679"
						}
					],
					"typeParameter": [
						{
							"id": 505,
							"name": "TContract",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 1163,
								"name": "RevealableContract",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"parameters": [
						{
							"id": 506,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "DropContract",
										"target": 1162,
										"tsLinkText": ""
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": -1,
										"name": "TContract",
										"refersToTypeParameter": true
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						},
						{
							"id": 507,
							"name": "onProgress",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "an optional callback that will be called with the progress of the upload"
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 508,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/react-core/src/evm/hooks/async/drop.ts",
											"line": 681,
											"character": 15,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/drop.ts#L681"
										}
									],
									"signatures": [
										{
											"id": 509,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/async/drop.ts",
													"line": 681,
													"character": 15,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/drop.ts#L681"
												}
											],
											"parameters": [
												{
													"id": 510,
													"name": "progress",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "../sdk/src/evm/types/events.ts",
															"qualifiedName": "UploadProgressEvent"
														},
														"name": "UploadProgressEvent",
														"package": "@thirdweb-dev/sdk"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseMutationResult"
						},
						"typeArguments": [
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"sourceFileName": "../sdk/src/evm/core/types.ts",
										"qualifiedName": "TransactionResultWithId"
									},
									"name": "TransactionResultWithId",
									"package": "@thirdweb-dev/sdk"
								}
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							},
							{
								"type": "reference",
								"target": 1164,
								"name": "DelayedRevealLazyMintInput",
								"package": "@thirdweb-dev/react-core"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseMutationResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 524,
			"name": "useDirectListing",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
					"line": 259,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L259"
				}
			],
			"signatures": [
				{
					"id": 525,
					"name": "useDirectListing",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook to get a specific direct listing from a [Marketplace V3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) contract.\n\n__This hook is only for [Marketplace V3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) contracts.__\n\nFor "
							},
							{
								"kind": "code",
								"text": "`Marketplace`"
							},
							{
								"kind": "text",
								"text": " contracts, use "
							},
							{
								"kind": "code",
								"text": "`useListing`"
							},
							{
								"kind": "text",
								"text": " instead."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useDirectListing, useContract } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress, \"marketplace-v3\");\n  const {\n    data: directListing,\n    isLoading,\n    error,\n  } = useDirectListing(contract, listingId);\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The hook's data property, once loaded, is a "
									},
									{
										"kind": "code",
										"text": "`DirectListingV3`"
									},
									{
										"kind": "text",
										"text": " object, containing the following properties:\n\n"
									},
									{
										"kind": "code",
										"text": "```ts\n{\n  // The id of the listing.\n  id: string;\n  // The address of the creator of listing.\n  creatorAddress: string;\n  // The address of the asset being listed.\n  assetContractAddress: string;\n  // The ID of the token to list.\n  tokenId: string;\n  // The quantity of tokens to include in the listing.\n  // For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here).\n  quantity: string;\n  // The address of the currency to accept for the listing.\n  currencyContractAddress: string;\n  // The `CurrencyValue` of the listing. Useful for displaying the price information.\n  currencyValuePerToken: CurrencyValue;\n  // The price to pay per unit of NFTs listed.\n  pricePerToken: string;\n  // The asset being listed.\n  asset: NFTMetadata;\n  // The start time of the listing.\n  startTimeInSeconds: number;\n  // The end time of the listing.\n  endTimeInSeconds: number;\n  // Whether the listing is reserved to be bought from a specific set of buyers.\n  isReservedListing: boolean;\n  // Whether the listing is CREATED, COMPLETED, or CANCELLED.\n  status: Status;\n}\n```"
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "DirectListings"
									}
								]
							},
							{
								"tag": "@marketplace",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
							"line": 259,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L259"
						}
					],
					"parameters": [
						{
							"id": 526,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a marketplace v3 contract"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/marketplacev3.ts",
											"qualifiedName": "MarketplaceV3"
										},
										"name": "MarketplaceV3",
										"package": "@thirdweb-dev/sdk"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						},
						{
							"id": 527,
							"name": "listingId",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The ID of the listing to get. If the listing is not found (or is not a direct listing), the "
									},
									{
										"kind": "code",
										"text": "`error`"
									},
									{
										"kind": "text",
										"text": " property will be set in the return value of the hook."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts",
											"qualifiedName": "BigNumberish"
										},
										"name": "BigNumberish",
										"package": "@ethersproject/bignumber"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../sdk/src/evm/types/marketplacev3/DirectListingV3.ts",
									"qualifiedName": "DirectListingV3"
								},
								"name": "DirectListingV3",
								"package": "@thirdweb-dev/sdk"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 536,
			"name": "useDirectListings",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
					"line": 632,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L632"
				}
			],
			"signatures": [
				{
					"id": 537,
					"name": "useDirectListings",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook to get all the direct listings from a [Marketplace V3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) contract.\n\n__This hook is only for [Marketplace V3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) contracts.__\n\nFor "
							},
							{
								"kind": "code",
								"text": "`Marketplace`"
							},
							{
								"kind": "text",
								"text": " contracts, use "
							},
							{
								"kind": "code",
								"text": "`useListings`"
							},
							{
								"kind": "text",
								"text": " instead."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useDirectListings, useContract } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress, \"marketplace-v3\");\n  const {\n    data: directListings,\n    isLoading,\n    error,\n  } = useDirectListings(contract);\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The hook's data property, once loaded, is a "
									},
									{
										"kind": "code",
										"text": "`DirectListingV3`"
									},
									{
										"kind": "text",
										"text": " object, containing the following properties:\n\n"
									},
									{
										"kind": "code",
										"text": "```ts\n{\n  // The id of the listing.\n  id: string;\n  // The address of the creator of listing.\n  creatorAddress: string;\n  // The address of the asset being listed.\n  assetContractAddress: string;\n  // The ID of the token to list.\n  tokenId: string;\n  // The quantity of tokens to include in the listing.\n  // For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here).\n  quantity: string;\n  // The address of the currency to accept for the listing.\n  currencyContractAddress: string;\n  // The `CurrencyValue` of the listing. Useful for displaying the price information.\n  currencyValuePerToken: CurrencyValue;\n  // The price to pay per unit of NFTs listed.\n  pricePerToken: string;\n  // The asset being listed.\n  asset: NFTMetadata;\n  // The start time of the listing.\n  startTimeInSeconds: number;\n  // The end time of the listing.\n  endTimeInSeconds: number;\n  // Whether the listing is reserved to be bought from a specific set of buyers.\n  isReservedListing: boolean;\n  // Whether the listing is CREATED, COMPLETED, or CANCELLED.\n  status: Status;\n}\n```"
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "DirectListings"
									}
								]
							},
							{
								"tag": "@marketplace",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
							"line": 632,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L632"
						}
					],
					"parameters": [
						{
							"id": 538,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`MarketplaceV3`"
									},
									{
										"kind": "text",
										"text": " contract"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/marketplacev3.ts",
											"qualifiedName": "MarketplaceV3"
										},
										"name": "MarketplaceV3",
										"package": "@thirdweb-dev/sdk"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						},
						{
							"id": 539,
							"name": "filter",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "filter to pass to the query for the sake of pagination & filtering\n\n"
									},
									{
										"kind": "code",
										"text": "```tsx\nimport { useDirectListings, useContract } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress, \"marketplace-v3\");\n  const {\n    data: directListings,\n    isLoading,\n    error,\n  } = useDirectListings(\n    contract,\n    {\n      count: 100, // Number of listings to fetch\n      offeror: \"{{offeror_address}}\", // Has offers from this address\n      seller: \"{{seller_address}}\", // Being sold by this address\n      start: 0, // Start from this index (pagination)\n      tokenContract: \"{{token_contract_address}}\", // Only show listings for NFTs from this collection\n      tokenId: \"{{token_id}}\", // Only show listings with this NFT ID\n    },\n  );\n}\n```"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../sdk/src/evm/types/marketplace/MarketPlaceFilter.ts",
									"qualifiedName": "MarketplaceFilter"
								},
								"name": "MarketplaceFilter",
								"package": "@thirdweb-dev/sdk"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"sourceFileName": "../sdk/src/evm/types/marketplacev3/DirectListingV3.ts",
										"qualifiedName": "DirectListingV3"
									},
									"name": "DirectListingV3",
									"package": "@thirdweb-dev/sdk"
								}
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 555,
			"name": "useDirectListingsCount",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
					"line": 1134,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L1134"
				}
			],
			"signatures": [
				{
					"id": 556,
					"name": "useDirectListingsCount",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook to get the total number of direct listings on a [Marketplace V3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) contract.\n\n__This hook is only for [Marketplace V3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) contracts.__\n\nFor "
							},
							{
								"kind": "code",
								"text": "`Marketplace`"
							},
							{
								"kind": "text",
								"text": " contracts, use "
							},
							{
								"kind": "code",
								"text": "`useListingsCount`"
							},
							{
								"kind": "text",
								"text": " instead."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useDirectListingsCount, useContract } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress, \"marketplace-v3\");\n  const {\n    data: listingsCount,\n    isLoading,\n    error,\n  } = useDirectListingsCount(contract);\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The hook's "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property, once loaded, is a "
									},
									{
										"kind": "code",
										"text": "`BigNumber`"
									},
									{
										"kind": "text",
										"text": " containing the number of direct listings on the Marketplace V3 contract."
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "DirectListings"
									}
								]
							},
							{
								"tag": "@marketplace",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
							"line": 1134,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L1134"
						}
					],
					"parameters": [
						{
							"id": 557,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`MarketplaceV3`"
									},
									{
										"kind": "text",
										"text": " contract"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/marketplacev3.ts",
											"qualifiedName": "MarketplaceV3"
										},
										"name": "MarketplaceV3",
										"package": "@thirdweb-dev/sdk"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts",
									"qualifiedName": "BigNumber"
								},
								"name": "BigNumber",
								"package": "@ethersproject/bignumber"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 75,
			"name": "useDisconnect",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/core/hooks/wallet-hooks.ts",
					"line": 244,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/hooks/wallet-hooks.ts#L244"
				}
			],
			"signatures": [
				{
					"id": 76,
					"name": "useDisconnect",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for disconnecting the currently connected wallet."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useDisconnect } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const disconnect = useDisconnect();\n\n  return <button onClick={disconnect}>Disconnect</button>;\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A function to disconnect from current connected wallet"
									}
								]
							},
							{
								"tag": "@walletConnection",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/core/hooks/wallet-hooks.ts",
							"line": 244,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/hooks/wallet-hooks.ts#L244"
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 77,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/providers/thirdweb-wallet-provider.tsx",
									"line": 98,
									"character": 14,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/providers/thirdweb-wallet-provider.tsx#L98"
								}
							],
							"signatures": [
								{
									"id": 78,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/react-core/src/core/providers/thirdweb-wallet-provider.tsx",
											"line": 98,
											"character": 14,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/providers/thirdweb-wallet-provider.tsx#L98"
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 528,
			"name": "useEnglishAuction",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
					"line": 357,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L357"
				}
			],
			"signatures": [
				{
					"id": 529,
					"name": "useEnglishAuction",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook to get an english auction listing from a [Marketplace V3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) contract.\n\n**Note: This hook is only for [Marketplace V3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) contracts.**\n\nFor "
							},
							{
								"kind": "code",
								"text": "`Marketplace`"
							},
							{
								"kind": "text",
								"text": "\ncontracts, use "
							},
							{
								"kind": "code",
								"text": "`useListing`"
							},
							{
								"kind": "text",
								"text": " instead."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useEnglishAuction, useContract } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress, \"marketplace-v3\");\n  const {\n    data: englishAuction,\n    isLoading,\n    error,\n  } = useEnglishAuction(contract, listingId);\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The hook's "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property, once loaded, will be an "
									},
									{
										"kind": "code",
										"text": "`EnglishAuction`"
									},
									{
										"kind": "text",
										"text": " object, containing the following properties:\n\n"
									},
									{
										"kind": "code",
										"text": "```ts\n{\n  // The id of the auction\n  id: string;\n  // The address of the creator of auction.\n  creatorAddress: string;\n  // The address of the asset being auctioned.\n  assetContractAddress: string;\n  // The ID of the token to auction.\n  tokenId: string;\n  // The quantity of tokens to include in the auction.\n  // For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here).\n  quantity: string;\n  // The address of the currency to accept for the auction.\n  currencyContractAddress: string;\n  // The minimum price that a bid must be in order to be accepted.\n  minimumBidAmount: string;\n  // The `CurrencyValue` of the minimum bid amount.\n  // Useful for displaying the price information.\n  minimumBidCurrencyValue: CurrencyValue;\n  // The buyout price of the auction.\n  buyoutBidAmount: string;\n  // The `CurrencyValue` of the buyout price.\n  // Useful for displaying the price information.\n  buyoutCurrencyValue: CurrencyValue;\n  // This is a buffer e.g. x seconds.\n  // If a new winning bid is made less than x seconds before expirationTimestamp, the\n  // expirationTimestamp is increased by x seconds.\n  timeBufferInSeconds: number;\n  // This is a buffer in basis points e.g. x%.\n  // To be considered as a new winning bid, a bid must be at least x% greater than\n  // the current winning bid.\n  bidBufferBps: number;\n  // The start time of the auction.\n  startTimeInSeconds: number;\n  // The end time of the auction.\n  endTimeInSeconds: number;\n  // The asset being auctioned.\n  asset: NFTMetadata;\n  // Whether the listing is CREATED, COMPLETED, or CANCELLED.\n  status: Status;\n}\n```"
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "EnglishAuctions"
									}
								]
							},
							{
								"tag": "@marketplace",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
							"line": 357,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L357"
						}
					],
					"parameters": [
						{
							"id": 530,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a marketplace v3 contract"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/marketplacev3.ts",
											"qualifiedName": "MarketplaceV3"
										},
										"name": "MarketplaceV3",
										"package": "@thirdweb-dev/sdk"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						},
						{
							"id": 531,
							"name": "auctionId",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "the auction id to check.  If the listing with this ID cannot be found (or is not an auction), the "
									},
									{
										"kind": "code",
										"text": "`error`"
									},
									{
										"kind": "text",
										"text": " property will be set."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts",
											"qualifiedName": "BigNumberish"
										},
										"name": "BigNumberish",
										"package": "@ethersproject/bignumber"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../sdk/src/evm/types/marketplacev3/EnglishAuction.ts",
									"qualifiedName": "EnglishAuction"
								},
								"name": "EnglishAuction",
								"package": "@thirdweb-dev/sdk"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 569,
			"name": "useEnglishAuctionWinningBid",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
					"line": 1485,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L1485"
				}
			],
			"signatures": [
				{
					"id": 570,
					"name": "useEnglishAuctionWinningBid",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook to get the winning bid for an English auction listing from a\n[Marketplace V3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) contract."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useEnglishAuctionWinningBid, useContract } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress, \"marketplace-v3\");\n  const {\n    data: winningBid,\n    isLoading,\n    error,\n  } = useEnglishAuctionWinningBid(contract, listingId);\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "If there are no bids, the "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property will be "
									},
									{
										"kind": "code",
										"text": "`undefined`"
									},
									{
										"kind": "text",
										"text": ". Use the "
									},
									{
										"kind": "code",
										"text": "`isLoading`"
									},
									{
										"kind": "text",
										"text": " property to differentiate between\nthe loading state and the no bids state.\n\nIf there is a bid, the hook's "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property, once loaded, will be an object of type "
									},
									{
										"kind": "code",
										"text": "`Bid`"
									},
									{
										"kind": "text",
										"text": ", containing the following properties:\n\n"
									},
									{
										"kind": "code",
										"text": "```ts\n{\n  // The id of the auction.\n  auctionId: string;\n  // The address of the buyer who made the offer.\n  bidderAddress: string;\n  // The currency contract address of the offer token.\n  currencyContractAddress: string;\n  // The amount of coins offered per token.\n  bidAmount: string;\n  // The `CurrencyValue` of the listing. Useful for displaying the price information.\n  bidAmountCurrencyValue: {\n    symbol: string;\n    value: BigNumber;\n    name: string;\n    decimals: number;\n    displayValue: string;\n  }\n}\n```"
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "EnglishAuctions"
									}
								]
							},
							{
								"tag": "@marketplace",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
							"line": 1485,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L1485"
						}
					],
					"parameters": [
						{
							"id": 571,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a marketplace contract"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/marketplacev3.ts",
											"qualifiedName": "MarketplaceV3"
										},
										"name": "MarketplaceV3",
										"package": "@thirdweb-dev/sdk"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						},
						{
							"id": 572,
							"name": "auctionId",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The auction id to check\nIf the listing cannot be found, or is not an English auction, the "
									},
									{
										"kind": "code",
										"text": "`error`"
									},
									{
										"kind": "text",
										"text": " property will be set."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts",
											"qualifiedName": "BigNumberish"
										},
										"name": "BigNumberish",
										"package": "@ethersproject/bignumber"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/types/marketplacev3/Bid.ts",
											"qualifiedName": "Bid"
										},
										"name": "Bid",
										"package": "@thirdweb-dev/sdk"
									}
								]
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 544,
			"name": "useEnglishAuctions",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
					"line": 893,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L893"
				}
			],
			"signatures": [
				{
					"id": 545,
					"name": "useEnglishAuctions",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook to get a list of all English auctions from a [Marketplace V3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) contract.\n\n**Note: This hook is only for [Marketplace V3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) contracts.**\n\nFor "
							},
							{
								"kind": "code",
								"text": "`Marketplace`"
							},
							{
								"kind": "text",
								"text": " contracts, use "
							},
							{
								"kind": "code",
								"text": "`useListings`"
							},
							{
								"kind": "text",
								"text": " instead."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useEnglishAuctions, useContract } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress, \"marketplace-v3\");\n  const {\n    data: englishAuctions,\n    isLoading,\n    error,\n  } = useEnglishAuctions(contract);\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The hook's data property, once loaded, is an array of EnglishAuction objects, each containing the following properties:\n\n"
									},
									{
										"kind": "code",
										"text": "```ts\nArray<{\n  // The id of the auction\n  id: string;\n\n  // The address of the creator of auction.\n  creatorAddress: string;\n\n  // The address of the asset being auctioned.\n  assetContractAddress: string;\n\n  // The ID of the token to auction.\n  tokenId: string;\n\n  // The quantity of tokens to include in the auction.\n  //  For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here).\n  quantity: string;\n\n  // The address of the currency to accept for the auction.\n  currencyContractAddress: string;\n\n  // The minimum price that a bid must be in order to be accepted.\n  minimumBidAmount: string;\n\n  // The `CurrencyValue` of the minimum bid amount.\n  // Useful for displaying the price information.\n  minimumBidCurrencyValue: CurrencyValue;\n\n  // The buyout price of the auction.\n  buyoutBidAmount: string;\n\n  // The `CurrencyValue` of the buyout price.\n  // Useful for displaying the price information.\n  buyoutCurrencyValue: CurrencyValue;\n\n  // This is a buffer e.g. x seconds.\n  // If a new winning bid is made less than x seconds before expirationTimestamp, the\n  // expirationTimestamp is increased by x seconds.\n  timeBufferInSeconds: number;\n\n  // This is a buffer in basis points e.g. x%.\n  // To be considered as a new winning bid, a bid must be at least x% greater than\n  // the current winning bid.\n  bidBufferBps: number;\n\n  // The start time of the auction.\n  startTimeInSeconds: number;\n\n  // The end time of the auction.\n  endTimeInSeconds: number;\n\n  // The asset being auctioned.\n  asset: NFTMetadata;\n\n  // Whether the listing is CREATED, COMPLETED, or CANCELLED.\n  status: Status;\n}>;\n```"
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "EnglishAuctions"
									}
								]
							},
							{
								"tag": "@marketplace",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
							"line": 893,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L893"
						}
					],
					"parameters": [
						{
							"id": 546,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a marketplace v3 contract"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/marketplacev3.ts",
											"qualifiedName": "MarketplaceV3"
										},
										"name": "MarketplaceV3",
										"package": "@thirdweb-dev/sdk"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						},
						{
							"id": 547,
							"name": "filter",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "filter to pass to the query for the sake of pagination & filtering\n\n"
									},
									{
										"kind": "code",
										"text": "```ts\nimport { useEnglishAuctions, useContract } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress, \"marketplace-v3\");\n  const {\n    data: englishAuctions,\n    isLoading,\n    error,\n  } = useEnglishAuctions(\n    contract,\n    {\n      count: 100, // Number of auctions to fetch\n      offeror: \"{{offeror_address}}\", // Has offers from this address\n      seller: \"{{seller_address}}\", // Being sold by this address\n      start: 0, // Start from this index (pagination)\n      tokenContract: \"{{token_contract_address}}\", // Only show NFTs from this collection\n      tokenId: \"{{token_id}}\", // Only show NFTs with this ID\n    },\n  );\n}\n```"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../sdk/src/evm/types/marketplace/MarketPlaceFilter.ts",
									"qualifiedName": "MarketplaceFilter"
								},
								"name": "MarketplaceFilter",
								"package": "@thirdweb-dev/sdk"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"sourceFileName": "../sdk/src/evm/types/marketplacev3/EnglishAuction.ts",
										"qualifiedName": "EnglishAuction"
									},
									"name": "EnglishAuction",
									"package": "@thirdweb-dev/sdk"
								}
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 558,
			"name": "useEnglishAuctionsCount",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
					"line": 1179,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L1179"
				}
			],
			"signatures": [
				{
					"id": 559,
					"name": "useEnglishAuctionsCount",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook to get the total number of direct listings on a [Marketplace V3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) contract.\n\n__This hook is only for [Marketplace V3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) contracts.__\n\nFor "
							},
							{
								"kind": "code",
								"text": "`Marketplace`"
							},
							{
								"kind": "text",
								"text": " contracts, use "
							},
							{
								"kind": "code",
								"text": "`useListingsCount`"
							},
							{
								"kind": "text",
								"text": " instead."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useEnglishAuctionsCount, useContract } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress, \"marketplace-v3\");\n  const {\n    data: englishAuctionsCount,\n    isLoading,\n    error,\n  } = useEnglishAuctionsCount(contract);\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The hook's "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property, once loaded, is a "
									},
									{
										"kind": "code",
										"text": "`BigNumber`"
									},
									{
										"kind": "text",
										"text": " representing the number of direct listings on the Marketplace V3 contract."
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "EnglishAuctions"
									}
								]
							},
							{
								"tag": "@marketplace",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
							"line": 1179,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L1179"
						}
					],
					"parameters": [
						{
							"id": 560,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`MarketplaceV3`"
									},
									{
										"kind": "text",
										"text": " contract"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/marketplacev3.ts",
											"qualifiedName": "MarketplaceV3"
										},
										"name": "MarketplaceV3",
										"package": "@thirdweb-dev/sdk"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts",
									"qualifiedName": "BigNumber"
								},
								"name": "BigNumber",
								"package": "@ethersproject/bignumber"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 629,
			"name": "useExecuteAuctionSale",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
					"line": 2791,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L2791"
				}
			],
			"signatures": [
				{
					"id": 630,
					"name": "useExecuteAuctionSale",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for executing a sale of an auction listing on a "
							},
							{
								"kind": "code",
								"text": "`Marketplace`"
							},
							{
								"kind": "text",
								"text": " contract.\n\nTriggers a new sale, transferring the NFT(s) to the buyer and the funds to the seller.\n\nA sale must be executed when an auction ends, and the auction has a winning bid that was below the buyout price. This means the\nauction has finished, and the highest bidder has won the auction. **Any wallet** can now execute the sale, transferring the NFT(s)\nto the buyer and the funds to the seller."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport {\n  useExecuteAuctionSale,\n  useContract,\n  Web3Button,\n} from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress, \"marketplace\");\n  const {\n    mutateAsync: executeAuctionSale,\n    isLoading,\n    error,\n  } = useExecuteAuctionSale(contract);\n\n  return (\n    <Web3Button\n      contractAddress={contractAddress}\n      action={() =>\n        executeAuctionSale({\n          // The listingId of the auction to execute\n          listingId: \"{{listing_id}}\",\n        })\n      }\n    >\n      Execute Auction Sale\n    </Web3Button>\n  );\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Mutation object to accept an offer on a direct listing\n\n"
									},
									{
										"kind": "code",
										"text": "```ts\nconst { mutateAsync, isLoading, error } = useExecuteAuctionSale(contract);\n```"
									},
									{
										"kind": "text",
										"text": "\n\n### options\nThe mutation function accepts an object as argument with the following properties:\n\n#### listingId\nThe ID of the auction listing to execute the sale on. If the listing cannot be found, is not an auction, or is not ready to be executed, the "
									},
									{
										"kind": "code",
										"text": "`error`"
									},
									{
										"kind": "text",
										"text": " property will be set."
									}
								]
							},
							{
								"tag": "@marketplace",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
							"line": 2791,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L2791"
						}
					],
					"parameters": [
						{
							"id": 631,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`Marketplace`"
									},
									{
										"kind": "text",
										"text": " contract"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts",
											"qualifiedName": "Marketplace"
										},
										"name": "Marketplace",
										"package": "@thirdweb-dev/sdk"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseMutationResult"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Omit"
								},
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 632,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/sdk/dist/declarations/src/evm/core/classes/internal/marketplace/marketplace-auction.d.ts",
													"line": 232,
													"character": 48
												}
											]
										}
									},
									{
										"type": "literal",
										"value": "data"
									}
								],
								"name": "Omit",
								"package": "typescript"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							},
							{
								"type": "reference",
								"target": 1193,
								"name": "ExecuteAuctionSale",
								"package": "@thirdweb-dev/react-core"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseMutationResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 862,
			"name": "useGrantRole",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/roles.ts",
					"line": 376,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/roles.ts#L376"
				}
			],
			"signatures": [
				{
					"id": 863,
					"name": "useGrantRole",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for granting a role on a smart contract.\n\nAvailable to use on smart contracts that implement the ["
							},
							{
								"kind": "code",
								"text": "`Permissions`"
							},
							{
								"kind": "text",
								"text": "](https://portal.thirdweb.com/contracts/build/extensions/general/Permissions) interface."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useGrantRole, useContract, Web3Button } from \"@thirdweb-dev/react\";\n\nconst contractAddress = \"{{contract_address}}\";\nconst roleToGrant = \"{{role}}\";\nconst walletAddressToGrant = \"{{wallet_address}}\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress);\n  const { mutateAsync: grantRole, isLoading, error } = useGrantRole(contract);\n\n  return (\n    <Web3Button\n      contractAddress={contractAddress}\n      action={() =>\n        grantRole({\n          role: roleToGrant, // name of your role.\n          address: walletAddressToGrant, // address to grant the role to.\n        })\n      }\n    >\n      Grant Role\n    </Web3Button>\n  );\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A mutation object to grant a member of a role on the contract\n\n"
									},
									{
										"kind": "code",
										"text": "```ts\nconst { mutateAsync, isLoading, error } = useGrantRole(contract);\n```"
									},
									{
										"kind": "text",
										"text": "\n\n### options\nThe mutation function accepts an object with the following properties:\n\n#### role\nThe name of the role to grant the address.\n\nAccepts any "
									},
									{
										"kind": "code",
										"text": "`string`"
									},
									{
										"kind": "text",
										"text": " value to include custom-defined roles.\n\nAlso accepts the default roles available on the [prebuilt contracts](https://portal.thirdweb.com/pre-built-contracts):\n\n"
									},
									{
										"kind": "code",
										"text": "```ts\n string |\n \"admin\" |\n \"minter\" |\n \"transfer\" |\n \"lister\" |\n \"asset\" |\n \"unwrap\" |\n \"pauser\" |\n \"factory\";\n```"
									},
									{
										"kind": "text",
										"text": "\n\n#### address\nThe address to grant the role to.\n\nTo use the address of the connected wallet, use the "
									},
									{
										"kind": "code",
										"text": "`useAddress`"
									},
									{
										"kind": "text",
										"text": " hook."
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "Permissions | PermissionsEnumerable"
									}
								]
							},
							{
								"tag": "@permissionControl",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/roles.ts",
							"line": 376,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/roles.ts#L376"
						}
					],
					"typeParameter": [
						{
							"id": 864,
							"name": "TContract",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/evm/hooks/async/roles.ts",
									"qualifiedName": "ContractWithRoles"
								},
								"name": "ContractWithRoles",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"parameters": [
						{
							"id": 865,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`SmartContract`"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": -1,
										"name": "TContract",
										"refersToTypeParameter": true
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseMutationResult"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "void"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 866,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 868,
											"name": "address",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/async/roles.ts",
													"line": 386,
													"character": 6,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/roles.ts#L386"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 867,
											"name": "role",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/async/roles.ts",
													"line": 385,
													"character": 6,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/roles.ts#L385"
												}
											],
											"type": {
												"type": "reference",
												"target": 877,
												"typeArguments": [
													{
														"type": "reference",
														"target": -1,
														"name": "TContract",
														"refersToTypeParameter": true
													}
												],
												"name": "RolesForContract",
												"package": "@thirdweb-dev/react-core"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												868,
												867
											]
										}
									],
									"sources": [
										{
											"fileName": "packages/react-core/src/evm/hooks/async/roles.ts",
											"line": 384,
											"character": 19,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/roles.ts#L384"
										}
									]
								}
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseMutationResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 928,
			"name": "useIsAccountDeployed",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/account-factory.ts",
					"line": 106,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/account-factory.ts#L106"
				}
			],
			"signatures": [
				{
					"id": 929,
					"name": "useIsAccountDeployed",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Check if a account has been deployed for the given admin in the account factory contract"
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```javascript\nconst { data: isAccountDeployed, isLoading, error } = useIsAccountDeployed(contract);\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A boolean indicating if a account has been deployed for the given admin"
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "AccountFactory"
									}
								]
							},
							{
								"tag": "@smartWallet",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/account-factory.ts",
							"line": 106,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/account-factory.ts#L106"
						}
					],
					"parameters": [
						{
							"id": 930,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a account factory contract"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/contracts/smart-contract.ts",
											"qualifiedName": "SmartContract"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/.pnpm/@ethersproject+contracts@5.7.0/node_modules/@ethersproject/contracts/src.ts/index.ts",
													"qualifiedName": "BaseContract"
												},
												"name": "BaseContract",
												"package": "@ethersproject/contracts"
											}
										],
										"name": "SmartContract",
										"package": "@thirdweb-dev/sdk"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						},
						{
							"id": 931,
							"name": "admin",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						},
						{
							"id": 932,
							"name": "extraData",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/@ethersproject+bytes@5.7.0/node_modules/@ethersproject/bytes/src.ts/index.ts",
									"qualifiedName": "BytesLike"
								},
								"name": "BytesLike",
								"package": "@ethersproject/bytes"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "boolean"
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 852,
			"name": "useIsAddressRole",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/roles.ts",
					"line": 216,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/roles.ts#L216"
				}
			],
			"signatures": [
				{
					"id": 853,
					"name": "useIsAddressRole",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook to check if an address is a member of a role on a smart contract.\n\nAvailable to use on contracts that implement ["
							},
							{
								"kind": "code",
								"text": "`Permissions`"
							},
							{
								"kind": "text",
								"text": "](https://portal.thirdweb.com/contracts/build/extensions/general/Permissions) interface\n\nProvide the following arguments to the hook:\n\n1. "
							},
							{
								"kind": "code",
								"text": "`contract`"
							},
							{
								"kind": "text",
								"text": " - The contract instance to check the role on.\n2. "
							},
							{
								"kind": "code",
								"text": "`roleName`"
							},
							{
								"kind": "text",
								"text": " - The name of the role to check.\n3. "
							},
							{
								"kind": "code",
								"text": "`address`"
							},
							{
								"kind": "text",
								"text": " - The wallet address to see if it is a member of the role."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useIsAddressRole, useContract } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress);\n  const isMember = useIsAddressRole(contract, roleName, walletAddress);\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "code",
										"text": "`true`"
									},
									{
										"kind": "text",
										"text": " if the address is a member of the role, or "
									},
									{
										"kind": "code",
										"text": "`false`"
									},
									{
										"kind": "text",
										"text": " if not"
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "PermissionsEnumerable"
									}
								]
							},
							{
								"tag": "@permissionControl",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/roles.ts",
							"line": 216,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/roles.ts#L216"
						}
					],
					"typeParameter": [
						{
							"id": 854,
							"name": "TContract",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/evm/hooks/async/roles.ts",
									"qualifiedName": "ContractWithRoles"
								},
								"name": "ContractWithRoles",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"parameters": [
						{
							"id": 855,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`SmartContract`"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": -1,
										"name": "TContract",
										"refersToTypeParameter": true
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						},
						{
							"id": 856,
							"name": "role",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The name of the role to check. Can be any custom role, or a built-in role, such as:\n- "
									},
									{
										"kind": "code",
										"text": "`\"admin\"`"
									},
									{
										"kind": "text",
										"text": "\n- "
									},
									{
										"kind": "code",
										"text": "`\"transfer\"`"
									},
									{
										"kind": "text",
										"text": "\n- "
									},
									{
										"kind": "code",
										"text": "`\"minter\"`"
									},
									{
										"kind": "text",
										"text": "\n- "
									},
									{
										"kind": "code",
										"text": "`\"pauser\"`"
									},
									{
										"kind": "text",
										"text": "\n- "
									},
									{
										"kind": "code",
										"text": "`\"lister\"`"
									},
									{
										"kind": "text",
										"text": "\n- "
									},
									{
										"kind": "code",
										"text": "`\"asset\"`"
									},
									{
										"kind": "text",
										"text": "\n- "
									},
									{
										"kind": "code",
										"text": "`\"unwrap\"`"
									},
									{
										"kind": "text",
										"text": "\n- "
									},
									{
										"kind": "code",
										"text": "`\"factory\"`"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 877,
								"typeArguments": [
									{
										"type": "reference",
										"target": -1,
										"name": "TContract",
										"refersToTypeParameter": true
									}
								],
								"name": "RolesForContract",
								"package": "@thirdweb-dev/react-core"
							}
						},
						{
							"id": 857,
							"name": "walletAddress",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The wallet address to check if it is a member of the role.\nUse the "
									},
									{
										"kind": "code",
										"text": "`useAddress`"
									},
									{
										"kind": "text",
										"text": " hook to get the current wallet address."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			]
		},
		{
			"id": 495,
			"name": "useLazyMint",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/drop.ts",
					"line": 567,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/drop.ts#L567"
				}
			],
			"signatures": [
				{
					"id": 496,
					"name": "useLazyMint",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for lazy minting a batch of NFTs on a drop contract.\n\nAvailable to use on smart contracts that implement the \"Drop\" extension, and\nfollow either the "
							},
							{
								"kind": "code",
								"text": "`ERC721`"
							},
							{
								"kind": "text",
								"text": " or "
							},
							{
								"kind": "code",
								"text": "`ERC1155`"
							},
							{
								"kind": "text",
								"text": " standard."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "Provide your drop contract (ERC721 or ERC1155) as the argument to the hook, and an array\nof metadata objects to lazy-mint.\n\n"
									},
									{
										"kind": "code",
										"text": "```jsx\nimport { useContract, useLazyMint, Web3Button } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress);\n  const { mutateAsync: lazyMint, isLoading, error } = useLazyMint(contract);\n\n  return (\n    <Web3Button\n      contractAddress={contractAddress}\n      action={() =>\n        lazyMint({\n          // Metadata of the NFTs to upload\n          metadatas: [\n            {\n              name: \"My NFT\",\n              description: \"An example NFT\",\n              image: \"{{image_url}}\",\n            },\n          ],\n        })\n      }\n    >\n      Lazy Mint NFTs\n    </Web3Button>\n  );\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A mutation object to lazy mint a batch of NFTs\n\n"
									},
									{
										"kind": "code",
										"text": "```ts\nconst { mutateAsync, isLoading, error } = useLazyMint(contract);\n```"
									},
									{
										"kind": "text",
										"text": "\n\n### options\n\nThe mutation function takes an object as argument with below properties:\n\n#### metadatas\nAn array of objects containing the metadata of the NFTs to lazy mint.\n\nYour metadata objects must follow the [Metadata standards](https://docs.opensea.io/docs/metadata-standards#metadata-structure).\n\n"
									},
									{
										"kind": "code",
										"text": "```jsx\nimport { useContract, useLazyMint, Web3Button } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress);\n  const { mutateAsync: lazyMint, isLoading, error } = useLazyMint(contract);\n\n  return (\n    <Web3Button\n      contractAddress={contractAddress}\n      action={() =>\n        lazyMint({\n          // Metadata of the NFTs to upload\n          metadatas: [\n            {\n              name: \"My NFT\",\n              description: \"An example NFT\",\n              image: \"{{image_url}}\",\n            },\n          ],\n        })\n      }\n    >\n      Lazy Mint NFTs\n    </Web3Button>\n  );\n}\n```"
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "ERC721LazyMintable | ERC1155LazyMintable"
									}
								]
							},
							{
								"tag": "@nftDrop",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/drop.ts",
							"line": 567,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/drop.ts#L567"
						}
					],
					"typeParameter": [
						{
							"id": 497,
							"name": "TContract",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 1162,
								"name": "DropContract",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"parameters": [
						{
							"id": 498,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`NFTContract`"
									},
									{
										"kind": "text",
										"text": " with the drop extension"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": -1,
										"name": "TContract",
										"refersToTypeParameter": true
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						},
						{
							"id": 499,
							"name": "onProgress",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Optional callback that will be called with the progress of the upload"
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 500,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/react-core/src/evm/hooks/async/drop.ts",
											"line": 569,
											"character": 15,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/drop.ts#L569"
										}
									],
									"signatures": [
										{
											"id": 501,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/async/drop.ts",
													"line": 569,
													"character": 15,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/drop.ts#L569"
												}
											],
											"parameters": [
												{
													"id": 502,
													"name": "progress",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "../sdk/src/evm/types/events.ts",
															"qualifiedName": "UploadProgressEvent"
														},
														"name": "UploadProgressEvent",
														"package": "@thirdweb-dev/sdk"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseMutationResult"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "any"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							},
							{
								"type": "intrinsic",
								"name": "any"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseMutationResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 520,
			"name": "useListing",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
					"line": 179,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L179"
				}
			],
			"signatures": [
				{
					"id": 521,
					"name": "useListing",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for getting a specific listing on a "
							},
							{
								"kind": "code",
								"text": "`Marketplace`"
							},
							{
								"kind": "text",
								"text": " contract.\n\n__This hook is only available for "
							},
							{
								"kind": "code",
								"text": "`Marketplace`"
							},
							{
								"kind": "text",
								"text": " contracts__\n\nIf you are using [Marketplace V3](https://thirdweb.com/thirdweb.eth/MarketplaceV3),\nuse "
							},
							{
								"kind": "code",
								"text": "`useDirectListing`"
							},
							{
								"kind": "text",
								"text": " or "
							},
							{
								"kind": "code",
								"text": "`useEnglishAuction`"
							},
							{
								"kind": "text",
								"text": " instead."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useContract, useListing } from \"@thirdweb-dev/react\";\n\nconst listingId = 0;\n\nfunction App() {\n  const { contract } = useContract(contractAddress, \"marketplace\");\n  const { data, isLoading, error } = useListing(contract, listingId);\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Query Result object that includes the desired listing.\n\nThe hook's "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property, once loaded, is an object containing the desired listing data.\n\nThe exact shape of the object depends on the type of listing.\n\nFor auctions, it will be a\n"
									},
									{
										"kind": "code",
										"text": "`AuctionListing`"
									},
									{
										"kind": "text",
										"text": " object.\nFor direct listings, it will be a "
									},
									{
										"kind": "code",
										"text": "`DirectListing`"
									},
									{
										"kind": "text",
										"text": " object.\n\n"
									},
									{
										"kind": "code",
										"text": "```jsx\nAuctionListing | DirectListing | undefined;\n```"
									},
									{
										"kind": "text",
										"text": "\n\nYou can use the shared "
									},
									{
										"kind": "code",
										"text": "`type`"
									},
									{
										"kind": "text",
										"text": " property to determine which type of listing is being returned.\n\n"
									},
									{
										"kind": "code",
										"text": "```ts\ninterface AuctionListing {\n  // The id of the listing\n  id: string;\n\n  // The address of the asset being listed.\n  assetContractAddress: string;\n\n  // The ID of the token to list.\n  tokenId: BigNumberish;\n\n  // The asset being listed.\n  asset: NFTMetadata;\n\n  // The start time of the listing.\n  startTimeInEpochSeconds: BigNumberish;\n\n  // Number of seconds until the auction expires.\n  endTimeInEpochSeconds: BigNumberish;\n\n  // The quantity of tokens to include in the listing.\n  // For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here).\n  quantity: BigNumberish;\n\n  // The address of the currency to accept for the listing.\n  currencyContractAddress: string;\n\n  // The reserve price is the minimum price that a bid must be in order to be accepted.\n  reservePrice: BigNumber;\n\n  // The buyout price of the listing.\n  buyoutPrice: BigNumber;\n\n  // The `CurrencyValue` of the buyout price listing.\n  // Useful for displaying the price information.\n  buyoutCurrencyValuePerToken: CurrencyValue;\n\n  // The `CurrencyValue` of the reserve price.\n  // Useful for displaying the price information.\n  reservePriceCurrencyValuePerToken: CurrencyValue;\n\n  // The address of the seller.\n  sellerAddress: string;\n\n  // The type of listing.\n  type: ListingType.Auction;\n}\n\ninterface DirectListing {\n  // The id of the listing.\n  id: string;\n\n  // The address of the asset being listed.\n  assetContractAddress: string;\n\n  // The ID of the token to list.\n  tokenId: BigNumberish;\n\n  // The asset being listed.\n  asset: NFTMetadata;\n\n  // The start time of the listing.\n  startTimeInSeconds: BigNumberish;\n\n  // Number of seconds until the listing expires.\n  secondsUntilEnd: BigNumberish;\n\n  // The quantity of tokens to include in the listing.\n  // For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here).\n  quantity: BigNumberish;\n\n  // The address of the currency to accept for the listing.\n  currencyContractAddress: string;\n\n  // The `CurrencyValue` of the listing. Useful for displaying the price information.\n  buyoutCurrencyValuePerToken: CurrencyValue;\n\n  // The buyout price of the listing.\n  buyoutPrice: BigNumber;\n\n  // The address of the seller.\n  sellerAddress: string;\n\n  // The type of listing.\n  type: ListingType.Direct;\n}\n```"
									}
								]
							},
							{
								"tag": "@marketplace",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
							"line": 179,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L179"
						}
					],
					"parameters": [
						{
							"id": 522,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a marketplace contract"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts",
											"qualifiedName": "Marketplace"
										},
										"name": "Marketplace",
										"package": "@thirdweb-dev/sdk"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						},
						{
							"id": 523,
							"name": "listingId",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The listing id to check"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts",
											"qualifiedName": "BigNumberish"
										},
										"name": "BigNumberish",
										"package": "@ethersproject/bignumber"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "union",
								"types": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/types/marketplace/AuctionListing.ts",
											"qualifiedName": "AuctionListing"
										},
										"name": "AuctionListing",
										"package": "@thirdweb-dev/sdk"
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/types/marketplace/DirectListing.ts",
											"qualifiedName": "DirectListing"
										},
										"name": "DirectListing",
										"package": "@thirdweb-dev/sdk"
									}
								]
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 532,
			"name": "useListings",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
					"line": 526,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L526"
				}
			],
			"signatures": [
				{
					"id": 533,
					"name": "useListings",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for getting all listings (including expired ones) from a "
							},
							{
								"kind": "code",
								"text": "`Marketplace`"
							},
							{
								"kind": "text",
								"text": " contract.\n\n__This hook is only available for "
							},
							{
								"kind": "code",
								"text": "`Marketplace`"
							},
							{
								"kind": "text",
								"text": " contracts__\n\nIf you are using [Marketplace V3](https://thirdweb.com/thirdweb.eth/MarketplaceV3),\nuse "
							},
							{
								"kind": "code",
								"text": "`useDirectListings`"
							},
							{
								"kind": "text",
								"text": " or "
							},
							{
								"kind": "code",
								"text": "`useEnglishAuctions`"
							},
							{
								"kind": "text",
								"text": " instead."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useContract, useListings } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress, \"marketplace\");\n  const { data, isLoading, error } = useListings(contract);\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Query result object that includes an array of listings\n\nThe hook's "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property, once loaded, is an array of listing objects.\n\nThe exact shape of each object depends on the type of listing.\n\nFor auctions, it will be a\n"
									},
									{
										"kind": "code",
										"text": "`AuctionListing`"
									},
									{
										"kind": "text",
										"text": " object.\nFor direct listings, it will be a "
									},
									{
										"kind": "code",
										"text": "`DirectListing`"
									},
									{
										"kind": "text",
										"text": " object.\n\n"
									},
									{
										"kind": "code",
										"text": "```ts\n(AuctionListing | DirectListing)[] | undefined;\n```"
									},
									{
										"kind": "text",
										"text": "\n\nYou can use the shared "
									},
									{
										"kind": "code",
										"text": "`type`"
									},
									{
										"kind": "text",
										"text": " property to determine which type of listing is being returned.\n\n"
									},
									{
										"kind": "code",
										"text": "```ts\ninterface AuctionListing {\n\n   // The id of the listing\n  id: string;\n\n   // The address of the asset being listed.\n  assetContractAddress: string;\n\n   // The ID of the token to list.\n  tokenId: BigNumberish;\n\n   // The asset being listed.\n  asset: NFTMetadata;\n\n   // The start time of the listing.\n  startTimeInEpochSeconds: BigNumberish;\n\n   // Number of seconds until the auction expires.\n  endTimeInEpochSeconds: BigNumberish;\n\n   // The quantity of tokens to include in the listing.\n   // For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here).\n  quantity: BigNumberish;\n\n   // The address of the currency to accept for the listing.\n  currencyContractAddress: string;\n\n   // The reserve price is the minimum price that a bid must be in order to be accepted.\n  reservePrice: BigNumber;\n\n   // The buyout price of the listing.\n  buyoutPrice: BigNumber;\n\n   // The `CurrencyValue` of the buyout price listing.\n   // Useful for displaying the price information.\n  buyoutCurrencyValuePerToken: CurrencyValue;\n\n   // The `CurrencyValue` of the reserve price.\n   // Useful for displaying the price information.\n  reservePriceCurrencyValuePerToken: CurrencyValue;\n\n   // The address of the seller.\n  sellerAddress: string;\n\n  // type of listing\n  type: ListingType.Auction;\n}\n\ninterface DirectListing {\n\n   // The id of the listing.\n  id: string;\n\n   // The address of the asset being listed.\n  assetContractAddress: string;\n\n   // The ID of the token to list.\n  tokenId: BigNumberish;\n\n   // The asset being listed.\n  asset: NFTMetadata;\n\n   // The start time of the listing.\n  startTimeInSeconds: BigNumberish;\n\n   // Number of seconds until the listing expires.\n  secondsUntilEnd: BigNumberish;\n\n   // The quantity of tokens to include in the listing.\n   // For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here).\n  quantity: BigNumberish;\n\n   // The address of the currency to accept for the listing.\n  currencyContractAddress: string;\n\n   // The `CurrencyValue` of the listing. Useful for displaying the price information.\n  buyoutCurrencyValuePerToken: CurrencyValue;\n\n   // The buyout price of the listing.\n  buyoutPrice: BigNumber;\n\n   // The address of the seller.\n  sellerAddress: string;\n\n  // type of listing\n  type: ListingType.Direct;\n```"
									}
								]
							},
							{
								"tag": "@marketplace",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
							"line": 526,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L526"
						}
					],
					"parameters": [
						{
							"id": 534,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a marketplace contract"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts",
											"qualifiedName": "Marketplace"
										},
										"name": "Marketplace",
										"package": "@thirdweb-dev/sdk"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						},
						{
							"id": 535,
							"name": "filter",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "filter to pass to the query for the sake of pagination & filtering\n"
									},
									{
										"kind": "code",
										"text": "```jsx\nimport { useContract, useListings } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress, \"marketplace\");\n  const { data, isLoading, error } = useListings(\n    contract,\n    {\n      count: 100, // number of listings to fetch\n      offeror: \"{{offeror_address}}\", // only show listings with offers from this address\n      seller: \"{{seller_address}}\", // only show listings where this address is the seller\n      start: 0, // start at this listing index (pagination)\n      tokenContract: \"{{token_contract_address}}\", // only show listings from this collection\n      tokenId: \"{{token_id}}\", // only show listings for this token\n    },\n  );\n}\n```"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../sdk/src/evm/types/marketplace/MarketPlaceFilter.ts",
									"qualifiedName": "MarketplaceFilter"
								},
								"name": "MarketplaceFilter",
								"package": "@thirdweb-dev/sdk"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "array",
								"elementType": {
									"type": "union",
									"types": [
										{
											"type": "reference",
											"target": {
												"sourceFileName": "../sdk/src/evm/types/marketplace/AuctionListing.ts",
												"qualifiedName": "AuctionListing"
											},
											"name": "AuctionListing",
											"package": "@thirdweb-dev/sdk"
										},
										{
											"type": "reference",
											"target": {
												"sourceFileName": "../sdk/src/evm/types/marketplace/DirectListing.ts",
												"qualifiedName": "DirectListing"
											},
											"name": "DirectListing",
											"package": "@thirdweb-dev/sdk"
										}
									]
								}
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 552,
			"name": "useListingsCount",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
					"line": 1091,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L1091"
				}
			],
			"signatures": [
				{
					"id": 553,
					"name": "useListingsCount",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for getting the total number of listings on a "
							},
							{
								"kind": "code",
								"text": "`Marketplace`"
							},
							{
								"kind": "text",
								"text": " contract.\n\n__This hook is only available for "
							},
							{
								"kind": "code",
								"text": "`Marketplace`"
							},
							{
								"kind": "text",
								"text": " contracts__\n\nIf you are using [Marketplace V3](https://thirdweb.com/thirdweb.eth/MarketplaceV3),\nuse "
							},
							{
								"kind": "code",
								"text": "`useDirectListingsCount`"
							},
							{
								"kind": "text",
								"text": " or "
							},
							{
								"kind": "code",
								"text": "`useEnglishAuctionsCount`"
							},
							{
								"kind": "text",
								"text": " instead."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useContract, useListingsCount } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress, \"marketplace\");\n  const { data: listingsCount, isLoading, error } = useListingsCount(contract);\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The hook's "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property, once loaded, is a "
									},
									{
										"kind": "code",
										"text": "`BigNumber`"
									},
									{
										"kind": "text",
										"text": " containing the total number of listings on the contract."
									}
								]
							},
							{
								"tag": "@marketplace",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
							"line": 1091,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L1091"
						}
					],
					"parameters": [
						{
							"id": 554,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a marketplace contract"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts",
											"qualifiedName": "Marketplace"
										},
										"name": "Marketplace",
										"package": "@thirdweb-dev/sdk"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts",
									"qualifiedName": "BigNumber"
								},
								"name": "BigNumber",
								"package": "@ethersproject/bignumber"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 962,
			"name": "useLogin",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/auth/useLogin.ts",
					"line": 62,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/auth/useLogin.ts#L62"
				}
			],
			"signatures": [
				{
					"id": 963,
					"name": "useLogin",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook to prompt the user to sign in with their wallet using [auth](https://portal.thirdweb.com/wallets/auth)\n\nRequires the "
							},
							{
								"kind": "code",
								"text": "`authConfig`"
							},
							{
								"kind": "text",
								"text": " prop to be configured on the "
							},
							{
								"kind": "code",
								"text": "`ThirdwebProvider`"
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useLogin } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { isLoading, login } = useLogin();\n\n  return (\n    <button onClick={() => login()}>\n      {isLoading ? \"Loading...\" : \"Sign in with Ethereum\"}\n    </button>\n  );\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A function to invoke to login with the connected wallet, and an "
									},
									{
										"kind": "code",
										"text": "`isLoading`"
									},
									{
										"kind": "text",
										"text": " state that indicates if the login request is in progress\n\n### login\n\nThe "
									},
									{
										"kind": "code",
										"text": "`login`"
									},
									{
										"kind": "text",
										"text": " function accepts an optional "
									},
									{
										"kind": "code",
										"text": "`LoginOptions`"
									},
									{
										"kind": "text",
										"text": " object as an argument.\n\nThis configuration follows the [EIP-4361](https://eips.ethereum.org/EIPS/eip-4361) Sign in with Ethereum standard.\n\n"
									},
									{
										"kind": "code",
										"text": "```jsx\nimport { useLogin, Web3Button } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { login, isLoading } = useLogin();\n\n  const loginOptions = {\n    domain: \"https://your-domain.com\", // Your dapp domain\n    statement: \"My statement\", // Text that the user will sign\n    uri: \"https://your-domain.com/login\", // RFC 3986 URI referring to the resource that is the subject of the signing\n    version: \"1.0\", // The current version of the message, which MUST be 1 for this specification.\n    chainId: \"mainnet\", // Chain ID to which the session is bound\n    nonce: \"my-nonce\", // randomized token typically used to prevent replay attacks\n    expirationTime: new Date(2021, 1, 1), // When this message expires\n    invalidBefore: new Date(2020, 12, 1), // When this message becomes valid\n    resources: [\"balance\", \"history\", \"info\"], // A list of information or references to information the user wishes to have resolved\n  };\n\n  return <Web3Button action={() => login(loginOptions)}>Login</Web3Button>;\n}\n```"
									}
								]
							},
							{
								"tag": "@auth",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/auth/useLogin.ts",
							"line": 62,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/auth/useLogin.ts#L62"
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 964,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"children": [
								{
									"id": 968,
									"name": "isLoading",
									"variant": "declaration",
									"kind": 1024,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/react-core/src/evm/hooks/auth/useLogin.ts",
											"line": 131,
											"character": 4,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/auth/useLogin.ts#L131"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "login.isLoading"
								},
								{
									"id": 965,
									"name": "login",
									"variant": "declaration",
									"kind": 1024,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/react-core/src/evm/hooks/auth/useLogin.ts",
											"line": 130,
											"character": 4,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/auth/useLogin.ts#L130"
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 966,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/auth/useLogin.ts",
													"line": 130,
													"character": 11,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/auth/useLogin.ts#L130"
												}
											],
											"signatures": [
												{
													"id": 967,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {},
													"sources": [
														{
															"fileName": "packages/react-core/src/evm/hooks/auth/useLogin.ts",
															"line": 130,
															"character": 11,
															"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/auth/useLogin.ts#L130"
														}
													],
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "Promise"
														},
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "any"
															}
														],
														"name": "Promise",
														"package": "typescript"
													}
												}
											]
										}
									},
									"defaultValue": "..."
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										968,
										965
									]
								}
							],
							"sources": [
								{
									"fileName": "packages/react-core/src/evm/hooks/auth/useLogin.ts",
									"line": 129,
									"character": 9,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/auth/useLogin.ts#L129"
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 969,
			"name": "useLogout",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/auth/useLogout.ts",
					"line": 29,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/auth/useLogout.ts#L29"
				}
			],
			"signatures": [
				{
					"id": 970,
					"name": "useLogout",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for signing out of a wallet after a user has logged in using "
							},
							{
								"kind": "code",
								"text": "`useLogin`"
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useLogout } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { logout, isLoading } = useLogout();\n\n  return (\n    <button onClick={() => logout()}>\n      {isLoading ? \"Logging out...\" : \"Logout\"}\n    </button>\n  );\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "object containing a "
									},
									{
										"kind": "code",
										"text": "`logout`"
									},
									{
										"kind": "text",
										"text": " function and an "
									},
									{
										"kind": "code",
										"text": "`isLoading`"
									},
									{
										"kind": "text",
										"text": " state that indicates if the logout request is in progress"
									}
								]
							},
							{
								"tag": "@auth",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/auth/useLogout.ts",
							"line": 29,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/auth/useLogout.ts#L29"
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 971,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"children": [
								{
									"id": 973,
									"name": "isLoading",
									"variant": "declaration",
									"kind": 1024,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/react-core/src/evm/hooks/auth/useLogout.ts",
											"line": 54,
											"character": 39,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/auth/useLogout.ts#L54"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "logout.isLoading"
								},
								{
									"id": 972,
									"name": "logout",
									"variant": "declaration",
									"kind": 1024,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/react-core/src/evm/hooks/auth/useLogout.ts",
											"line": 54,
											"character": 11,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/auth/useLogout.ts#L54"
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
											"qualifiedName": "UseMutateAsyncFunction"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											},
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "UseMutateAsyncFunction",
										"package": "@tanstack/react-query"
									},
									"defaultValue": "logout.mutateAsync"
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										973,
										972
									]
								}
							],
							"sources": [
								{
									"fileName": "packages/react-core/src/evm/hooks/auth/useLogout.ts",
									"line": 54,
									"character": 9,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/auth/useLogout.ts#L54"
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 617,
			"name": "useMakeBid",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
					"line": 2533,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L2533"
				}
			],
			"signatures": [
				{
					"id": 618,
					"name": "useMakeBid",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for placing a bid on a "
							},
							{
								"kind": "code",
								"text": "`Marketplace`"
							},
							{
								"kind": "text",
								"text": " auction listing.\n\nBids have several important properties:\n\n- Cannot be canceled once placed.\n- Are automatically refunded if they are outbid.\n- Must be higher than the current highest bid by the percentage defined in the bid buffer.\n- Must be higher than the reserve price (if there is no bid yet)."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useMakeBid, useContract, Web3Button } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress, \"marketplace\");\n  const { mutateAsync: makeBid, isLoading, error } = useMakeBid(contract);\n\n  return (\n    <Web3Button\n      contractAddress={contractAddress}\n      action={() =>\n        makeBid({\n          listingId: \"1\", // ID of the listing to bid on. Must be an auction.\n          bid: \"1\", // Uses the currencyContractAddress of the listing.\n        })\n      }\n    >\n      Make Bid\n    </Web3Button>\n  );\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Mutation object to make a bid on an auction listing\n\n"
									},
									{
										"kind": "code",
										"text": "```ts\nconst { mutateAsync, isLoading, error } = useMakeBid(contract);\n```"
									},
									{
										"kind": "text",
										"text": "\n\n### options\nThe mutation function takes an object as an argument with the following properties:\n\n#### listingId\nThe ID of the listing to bid on. Must be an auction type listing.\n(Use "
									},
									{
										"kind": "code",
										"text": "`useMakeOffer`"
									},
									{
										"kind": "text",
										"text": " for direct listings).\n\nIf the listing cannot be found, is not an auction, or is not active, the "
									},
									{
										"kind": "code",
										"text": "`error`"
									},
									{
										"kind": "text",
										"text": " property will be set.\n\n#### bid\nThe amount to bid on the listing. Uses the "
									},
									{
										"kind": "code",
										"text": "`currencyContractAddress`"
									},
									{
										"kind": "text",
										"text": " of the listing.\n\nFor example, if the listing uses the "
									},
									{
										"kind": "code",
										"text": "`NATIVE_TOKEN_ADDRESS`"
									},
									{
										"kind": "text",
										"text": " on Ethereum, the bid amount is the amount of ETH to bid. Can be\nin the form of a number, string, or BigNumber.\n\nThe bid value **must** be either:\n\n- Greater than or equal to the reserve price if there is no current bid.\n- Greater than the current highest bid by the percentage defined in the bid buffer.\n\nUse the "
									},
									{
										"kind": "code",
										"text": "`useNextMinimumBid`"
									},
									{
										"kind": "text",
										"text": " hook to get the next minimum bid amount required."
									}
								]
							},
							{
								"tag": "@marketplace",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
							"line": 2533,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L2533"
						}
					],
					"parameters": [
						{
							"id": 619,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`Marketplace`"
									},
									{
										"kind": "text",
										"text": " contract"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts",
											"qualifiedName": "Marketplace"
										},
										"name": "Marketplace",
										"package": "@thirdweb-dev/sdk"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseMutationResult"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Omit"
								},
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 620,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/sdk/dist/declarations/src/evm/core/classes/internal/marketplace/marketplace-auction.d.ts",
													"line": 160,
													"character": 80
												}
											]
										}
									},
									{
										"type": "literal",
										"value": "data"
									}
								],
								"name": "Omit",
								"package": "typescript"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							},
							{
								"type": "reference",
								"target": 1180,
								"name": "MakeBidParams",
								"package": "@thirdweb-dev/react-core"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseMutationResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 621,
			"name": "useMakeOffer",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
					"line": 2622,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L2622"
				}
			],
			"signatures": [
				{
					"id": 622,
					"name": "useMakeOffer",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for placing an offer on a "
							},
							{
								"kind": "code",
								"text": "`Marketplace`"
							},
							{
								"kind": "text",
								"text": " direct listing."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useMakeOffer, useContract, Web3Button } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress, \"marketplace\");\n  const { mutateAsync: makeOffer, isLoading, error } = useMakeOffer(contract);\n\n  return (\n    <Web3Button\n      contractAddress={contractAddress}\n      action={() =>\n        makeOffer({\n          listingId: 1, // ID of the listing to make an offer on\n          pricePerToken: 1, // Price per token to offer (in the listing's currency)\n          quantity: 1, // Number of NFTs you want to buy (used for ERC1155 NFTs)\n        })\n      }\n    >\n      Make Bid\n    </Web3Button>\n  );\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Mutation object to make a bid on an auction listing\n\n"
									},
									{
										"kind": "code",
										"text": "```ts\nconst { mutateAsync, isLoading, error } = useMakeOffer(contract);\n```"
									},
									{
										"kind": "text",
										"text": "\n\n### options\nThe mutation function takes an object as an argument with the following properties:\n\n#### listingId (required)\nThe ID of the listing to make an offer on.\n\nIf the listing cannot be found, is not a direct listing, or is not active, the "
									},
									{
										"kind": "code",
										"text": "`error`"
									},
									{
										"kind": "text",
										"text": " property will be set.\n\n#### pricePerToken (required)\nThe price to offer per token.\n\n- For ERC1155, this is the price to offer per quantity of the NFT (see ["
									},
									{
										"kind": "code",
										"text": "`quantity`"
									},
									{
										"kind": "text",
										"text": "](#quantity) below).\n- For ERC721, this is the price to offer to buy the NFT.\n\n#### quantity (optional)\nUsed for ERC1155 NFTs, where multiple quantity of the same NFT can be bought at once.\n\nThis field works with the "
									},
									{
										"kind": "code",
										"text": "`pricePerToken`"
									},
									{
										"kind": "text",
										"text": " field to calculate the total price of the offer.\nFor example, if you want to buy 5 NFTs at a price of 1 ETH each, you would set "
									},
									{
										"kind": "code",
										"text": "`pricePerToken`"
									},
									{
										"kind": "text",
										"text": " to "
									},
									{
										"kind": "code",
										"text": "`1`"
									},
									{
										"kind": "text",
										"text": " and "
									},
									{
										"kind": "code",
										"text": "`quantity`"
									},
									{
										"kind": "text",
										"text": " to "
									},
									{
										"kind": "code",
										"text": "`5`"
									},
									{
										"kind": "text",
										"text": ", for a total of "
									},
									{
										"kind": "code",
										"text": "`5`"
									},
									{
										"kind": "text",
										"text": " ETH as the offer.\n\nFor ERC721 NFTs, this value is ignored and "
									},
									{
										"kind": "code",
										"text": "`1`"
									},
									{
										"kind": "text",
										"text": " is used instead.\n\nThe default value is "
									},
									{
										"kind": "code",
										"text": "`1`"
									},
									{
										"kind": "text",
										"text": "."
									}
								]
							},
							{
								"tag": "@marketplace",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
							"line": 2622,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L2622"
						}
					],
					"parameters": [
						{
							"id": 623,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`Marketplace`"
									},
									{
										"kind": "text",
										"text": " contract"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts",
											"qualifiedName": "Marketplace"
										},
										"name": "Marketplace",
										"package": "@thirdweb-dev/sdk"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseMutationResult"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Omit"
								},
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 624,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/sdk/dist/declarations/src/evm/contracts/prebuilt-implementations/marketplace.d.ts",
													"line": 300,
													"character": 117
												}
											]
										}
									},
									{
										"type": "literal",
										"value": "data"
									}
								],
								"name": "Omit",
								"package": "typescript"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							},
							{
								"type": "reference",
								"target": 1184,
								"name": "MakeOfferParams",
								"package": "@thirdweb-dev/react-core"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseMutationResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 360,
			"name": "useMetadata",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/contract-settings.ts",
					"line": 506,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contract-settings.ts#L506"
				}
			],
			"signatures": [
				{
					"id": 361,
					"name": "useMetadata",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for getting the metadata associated with a smart contract.\n\nAvailable to use on contracts that implement the [Contract Metadata](https://portal.thirdweb.com/contracts/build/extensions/general/ContractMetadata) interface."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useContract, useMetadata } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress);\n  const { data, isLoading, error } = useMetadata(contract);\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A "
									},
									{
										"kind": "code",
										"text": "`CustomContractMetadata`"
									},
									{
										"kind": "text",
										"text": " object containing the metadata\n\nThe hook's "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property, once loaded, is an object containing the contract's metadata.\n\n"
									},
									{
										"kind": "code",
										"text": "```ts\nCustomContractMetadata | undefined;\n```"
									},
									{
										"kind": "text",
										"text": "\n\n"
									},
									{
										"kind": "code",
										"text": "```ts\ninterface CustomContractMetadata {\n  // The name of the contract.\n  name: string;\n  // A description of the contract.\n  description?: string;\n  // The image associated with the contract.\n  image?: any;\n  // An external link associated with the contract.\n  external_link?: string;\n}\n```"
									}
								]
							},
							{
								"tag": "@metadata",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/contract-settings.ts",
							"line": 506,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contract-settings.ts#L506"
						}
					],
					"parameters": [
						{
							"id": 362,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`SmartContract`"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/contracts/index.ts",
											"qualifiedName": "ValidContractInstance"
										},
										"name": "ValidContractInstance",
										"package": "@thirdweb-dev/sdk"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 581,
			"name": "useMinimumNextBid",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
					"line": 1677,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L1677"
				}
			],
			"signatures": [
				{
					"id": 582,
					"name": "useMinimumNextBid",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for getting the minimum value a bid must be to be valid\nin an auction listing on a "
							},
							{
								"kind": "code",
								"text": "`Marketplace`"
							},
							{
								"kind": "text",
								"text": " or\n[MarketplaceV3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) contract.\n\nTakes into account the current highest bid, or the reserve price if there is no bid,\nand increments it by the bid buffer to calculate the minimum next bid."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useContract, useMinimumNextBid } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress, \"marketplace\");\n  const { data, isLoading, error } = useMinimumNextBid(contract, listingId);\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Query result object that includes the minimum next bid for the auction listing"
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "EnglishAuction"
									}
								]
							},
							{
								"tag": "@marketplace",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
							"line": 1677,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L1677"
						}
					],
					"parameters": [
						{
							"id": 583,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a marketplace contract"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts",
													"qualifiedName": "Marketplace"
												},
												"name": "Marketplace",
												"package": "@thirdweb-dev/sdk"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/marketplacev3.ts",
													"qualifiedName": "MarketplaceV3"
												},
												"name": "MarketplaceV3",
												"package": "@thirdweb-dev/sdk"
											}
										]
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						},
						{
							"id": 584,
							"name": "listingId",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The ID of the listing to get the minimum next bid for.\n\nIf the listing cannot be found, is not an auction listing, or is not active, the "
									},
									{
										"kind": "code",
										"text": "`error`"
									},
									{
										"kind": "text",
										"text": " property will be set."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts",
											"qualifiedName": "BigNumberish"
										},
										"name": "BigNumberish",
										"package": "@ethersproject/bignumber"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "reflection",
								"declaration": {
									"id": 585,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 589,
											"name": "decimals",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
													"line": 1685,
													"character": 4,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L1685"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 590,
											"name": "displayValue",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
													"line": 1686,
													"character": 4,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L1686"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 588,
											"name": "name",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
													"line": 1684,
													"character": 4,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L1684"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 586,
											"name": "symbol",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
													"line": 1682,
													"character": 4,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L1682"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 587,
											"name": "value",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
													"line": 1683,
													"character": 4,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L1683"
												}
											],
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts",
													"qualifiedName": "BigNumber"
												},
												"name": "BigNumber",
												"package": "@ethersproject/bignumber"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												589,
												590,
												588,
												586,
												587
											]
										}
									],
									"sources": [
										{
											"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
											"line": 1681,
											"character": 2,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L1681"
										}
									]
								}
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 809,
			"name": "useMintNFT",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/nft.ts",
					"line": 586,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/nft.ts#L586"
				}
			],
			"signatures": [
				{
					"id": 810,
					"name": "useMintNFT",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for minting a new NFT on a smart contract.\n\nAvailable to use on smart contracts that implement the ["
							},
							{
								"kind": "code",
								"text": "`ERC721`"
							},
							{
								"kind": "text",
								"text": "](https://portal.thirdweb.com/contracts/build/extensions/erc-721/ERC721)\nor ["
							},
							{
								"kind": "code",
								"text": "`ERC1155`"
							},
							{
								"kind": "text",
								"text": "](https://portal.thirdweb.com/contracts/build/extensions/erc-1155/ERC1155) standard.\n\nBy default, the process uploads and pins the NFT metadata to IPFS before minting."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useMintNFT, useContract, Web3Button } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress);\n  const { mutateAsync: mintNft, isLoading, error } = useMintNFT(contract);\n\n  return (\n    <Web3Button\n      contractAddress={contractAddress}\n      action={() =>\n        mintNft({\n          metadata: {\n            name: \"My NFT\",\n            description: \"This is my NFT\",\n            image: \"ipfs://example.com/my-nft.png\", // Accepts any URL or File type\n          },\n          to: \"{{wallet_address}}\", // Use useAddress hook to get current wallet address\n        })\n      }\n    >\n      Mint NFT\n    </Web3Button>\n  );\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Mutation object that to mint a new NFT token to the connected wallet\n\n"
									},
									{
										"kind": "code",
										"text": "```ts\nconst { mutateAsync, isLoading, error } = useMintNFT(contract);\n```"
									},
									{
										"kind": "text",
										"text": "\n\n### options\nThe mutation function takes an object with the following properties:\n\n#### metadata\nThe metadata of the NFT to mint.\n\nBy default, the "
									},
									{
										"kind": "code",
										"text": "`metadata`"
									},
									{
										"kind": "text",
										"text": " object is uploaded and pinned to IPFS before minting.\n\nYou can override this behavior by providing a "
									},
									{
										"kind": "code",
										"text": "`string`"
									},
									{
										"kind": "text",
										"text": " to the metadata property. The string must be a URL that points to a valid JSON object containing [standard metadata properties](https://docs.opensea.io/docs/metadata-standards)\n\n"
									},
									{
										"kind": "code",
										"text": "```jsx\nimport { useMintNFT, useContract, Web3Button } from \"@thirdweb-dev/react\";\n\n// Your smart contract address\nconst contractAddress = \"{{contract_address}}\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress);\n  const { mutateAsync: mintNft, isLoading, error } = useMintNFT(contract);\n\n  return (\n    <Web3Button\n      contractAddress={contractAddress}\n      action={() =>\n        mintNft({\n          // Any valid IPFS or HTTP URL that points to a JSON object\n          metadata: \"https://<url>/<to>/<your>/<metadata>.json\",\n          to: \"{{wallet_address}}\",\n        })\n      }\n    >\n      Mint NFT\n    </Web3Button>\n  );\n}\n```"
									},
									{
										"kind": "text",
										"text": "\n\n#### to (required)\nThe wallet address to mint the NFT to.\n\nLikely, you will want to mint the NFT to the currently connected wallet address.\nUse the "
									},
									{
										"kind": "code",
										"text": "`useAddress`"
									},
									{
										"kind": "text",
										"text": " hook to get this value."
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "ERC721Mintable | ERC1155Mintable"
									}
								]
							},
							{
								"tag": "@nft",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/nft.ts",
							"line": 586,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/nft.ts#L586"
						}
					],
					"typeParameter": [
						{
							"id": 811,
							"name": "TContract",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 1134,
								"name": "NFTContract",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"parameters": [
						{
							"id": 812,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`NFTContract`"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": -1,
										"name": "TContract",
										"refersToTypeParameter": true
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseMutationResult"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 1156,
								"typeArguments": [
									{
										"type": "reference",
										"target": -1,
										"name": "TContract",
										"refersToTypeParameter": true
									}
								],
								"name": "MintNFTReturnType",
								"package": "@thirdweb-dev/react-core"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							},
							{
								"type": "reference",
								"target": 1151,
								"name": "MintNFTParams",
								"package": "@thirdweb-dev/react-core"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseMutationResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 813,
			"name": "useMintNFTSupply",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/nft.ts",
					"line": 704,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/nft.ts#L704"
				}
			],
			"signatures": [
				{
					"id": 814,
					"name": "useMintNFTSupply",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for minting additional supply to an _existing_ ERC-1155 token.\n\nAvailable to use on contracts that implement the\n[ERC1155Mintable](https://portal.thirdweb.com/contracts/build/extensions/erc-1155/ERC1155Mintable)\ninterface, such as the [Edition](https://thirdweb.com/thirdweb.eth/TokenERC1155) or [Edition Drop](https://thirdweb.com/thirdweb.eth/DropERC1155).\n\nThe wallet address that initiates this transaction must have minting permissions on the contract."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useContract, useMintNFTSupply, Web3Button } from \"@thirdweb-dev/react\";\n\nconst contractAddress = \"{{contract_address}}\";\nconst walletAddress = \"{{wallet_address}}\";\nconst tokenId = \"{{token_id}}\";\nconst additionalSupply = \"{{additional_supply}}\";\n\nfunction App() {\n  // Contract must be an ERC-1155 contract that implements the ERC1155Mintable interface\n  const { contract } = useContract(contractAddress);\n  const {\n    mutateAsync: mintNftSupply,\n    isLoading,\n    error,\n  } = useMintNFTSupply(contract);\n\n  return (\n    <Web3Button\n      contractAddress={contractAddress}\n      action={() =>\n        mintNftSupply({\n          additionalSupply: additionalSupply, // Quantity to mint\n          to: walletAddress, // Address to mint to\n          tokenId: tokenId, // Token ID to add supply to\n        })\n      }\n    >\n      Mint NFT Supply\n    </Web3Button>\n  );\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Mutation object to mint a more supply of a token id to the provided wallet\n\n"
									},
									{
										"kind": "code",
										"text": "```ts\nconst { mutateAsync, isLoading, error } = useMintNFTSupply(contract);\n```"
									},
									{
										"kind": "text",
										"text": "\n\n### options\n\nThe mutation function takes an object with the following properties:\n\n#### additionalSupply\nThe quantity of additional supply to mint.\n\nFor example, if you have 10 quantity so far, and you want to mint 5 more, set "
									},
									{
										"kind": "code",
										"text": "`additionalSupply`"
									},
									{
										"kind": "text",
										"text": " to "
									},
									{
										"kind": "code",
										"text": "`5`"
									},
									{
										"kind": "text",
										"text": ".\n\nCan be a "
									},
									{
										"kind": "code",
										"text": "`string`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`number`"
									},
									{
										"kind": "text",
										"text": ".\n\n\n#### to\nThe wallet address to mint the new supply to.\n\nTo use the connected wallet address, use the "
									},
									{
										"kind": "code",
										"text": "`useAddress`"
									},
									{
										"kind": "text",
										"text": " hook.\n\n\n#### tokenId\nThe token ID of the NFT to mint additional supply to.\n\nCan be a "
									},
									{
										"kind": "code",
										"text": "`string`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`number`"
									},
									{
										"kind": "text",
										"text": "."
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "ERC1155Mintable"
									}
								]
							},
							{
								"tag": "@nft",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/nft.ts",
							"line": 704,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/nft.ts#L704"
						}
					],
					"parameters": [
						{
							"id": 815,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`Erc1155`"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../sdk/src/evm/core/classes/erc-1155.ts",
									"qualifiedName": "Erc1155"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../sdk/src/evm/types/eips.ts",
													"qualifiedName": "BaseERC1155"
												},
												"name": "BaseERC1155",
												"package": "@thirdweb-dev/sdk"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../sdk/src/evm/types/eips.ts",
													"qualifiedName": "BaseSignatureMintERC1155"
												},
												"name": "BaseSignatureMintERC1155",
												"package": "@thirdweb-dev/sdk"
											}
										]
									}
								],
								"name": "Erc1155",
								"package": "@thirdweb-dev/sdk"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseMutationResult"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../sdk/src/evm/core/types.ts",
									"qualifiedName": "TransactionResultWithId"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/core/schema/nft.ts",
											"qualifiedName": "NFT"
										},
										"name": "NFT",
										"package": "@thirdweb-dev/sdk"
									}
								],
								"name": "TransactionResultWithId",
								"package": "@thirdweb-dev/sdk"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							},
							{
								"type": "reference",
								"target": 1146,
								"name": "MintNFTSupplyParams",
								"package": "@thirdweb-dev/react-core"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseMutationResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 902,
			"name": "useMintToken",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/token.ts",
					"line": 248,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/token.ts#L248"
				}
			],
			"signatures": [
				{
					"id": 903,
					"name": "useMintToken",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for minting new tokens in an ERC20 smart contract.\n\nAvailable to use on contracts that implement the [ERC20Mintable](https://portal.thirdweb.com/contracts/build/extensions/erc-20/ERC20BatchMintable)\ninterface, such as the [Token](https://thirdweb.com/thirdweb.eth/TokenERC20) contract.\n\nThe wallet address that initiates this transaction must have minting permissions on the contract."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useContract, useMintToken, Web3Button } from \"@thirdweb-dev/react\";\n\nconst contractAddress = \"{{contract_address}}\";\nconst walletAddress = \"{{wallet_address}}\";\nconst tokenAmount = \"{{token_amount}}\";\n\nfunction App() {\n  // Contract must be an ERC-20 contract that implements the ERC20Mintable interface\n  const { contract } = useContract(contractAddress, \"token\");\n  const { mutateAsync: mintToken, isLoading, error } = useMintToken(contract);\n\n  return (\n    <Web3Button\n      contractAddress={contractAddress}\n      action={() =>\n        mintToken({\n          amount: tokenAmount, // Quantity to mint\n          to: walletAddress, // Address to mint to\n        })\n      }\n    >\n      Mint Token\n    </Web3Button>\n  );\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A mutation object to mint new tokens to the connected wallet\n\n"
									},
									{
										"kind": "code",
										"text": "```ts\nconst { mutateAsync, isLoading, error } = useMintToken(contract);\n```"
									},
									{
										"kind": "text",
										"text": "\n\n### options\nThe mutation function takes an object as an argument with the following properties:\n\n#### amount\nThe quantity of tokens to mint. Can be a "
									},
									{
										"kind": "code",
										"text": "`string`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`number`"
									},
									{
										"kind": "text",
										"text": ".\n\n#### to\nThe wallet address to mint the new tokens to.\n\nTo use the connected wallet address, use the "
									},
									{
										"kind": "code",
										"text": "`useAddress`"
									},
									{
										"kind": "text",
										"text": " hook."
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "ERC20Mintable"
									}
								]
							},
							{
								"tag": "@token",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/token.ts",
							"line": 248,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/token.ts#L248"
						}
					],
					"parameters": [
						{
							"id": 904,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`TokenContract`"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 1135,
										"name": "TokenContract",
										"package": "@thirdweb-dev/react-core"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseMutationResult"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Omit"
								},
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 905,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 907,
													"name": "data",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"sources": [
														{
															"fileName": "packages/react-core/src/evm/hooks/async/token.ts",
															"line": 254,
															"character": 6,
															"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/token.ts#L254"
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 908,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {},
															"sources": [
																{
																	"fileName": "packages/react-core/src/evm/hooks/async/token.ts",
																	"line": 254,
																	"character": 12,
																	"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/token.ts#L254"
																}
															],
															"signatures": [
																{
																	"id": 909,
																	"name": "__type",
																	"variant": "signature",
																	"kind": 4096,
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"target": {
																			"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
																			"qualifiedName": "Promise"
																		},
																		"typeArguments": [
																			{
																				"type": "intrinsic",
																				"name": "unknown"
																			}
																		],
																		"name": "Promise",
																		"package": "typescript"
																	}
																}
															]
														}
													}
												},
												{
													"id": 906,
													"name": "receipt",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"sources": [
														{
															"fileName": "packages/react-core/src/evm/hooks/async/token.ts",
															"line": 253,
															"character": 6,
															"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/token.ts#L253"
														}
													],
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/.pnpm/@ethersproject+abstract-provider@5.7.0/node_modules/@ethersproject/abstract-provider/src.ts/index.ts",
															"qualifiedName": "TransactionReceipt"
														},
														"name": "providers.TransactionReceipt",
														"package": "@ethersproject/abstract-provider",
														"qualifiedName": "TransactionReceipt"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														907,
														906
													]
												}
											],
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/async/token.ts",
													"line": 252,
													"character": 4,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/token.ts#L252"
												}
											]
										}
									},
									{
										"type": "literal",
										"value": "data"
									}
								],
								"name": "Omit",
								"package": "typescript"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							},
							{
								"type": "reference",
								"target": 1127,
								"name": "TokenParams",
								"package": "@thirdweb-dev/react-core"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseMutationResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 778,
			"name": "useNFT",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/nft.ts",
					"line": 94,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/nft.ts#L94"
				}
			],
			"signatures": [
				{
					"id": 779,
					"name": "useNFT",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for fetching information about an NFT from a smart contract.\n\nAvailable to use on smart contracts that implement the ["
							},
							{
								"kind": "code",
								"text": "`ERC721`"
							},
							{
								"kind": "text",
								"text": "](https://portal.thirdweb.com/contracts/build/extensions/erc-721/ERC721)\nor ["
							},
							{
								"kind": "code",
								"text": "`ERC1155`"
							},
							{
								"kind": "text",
								"text": "](https://portal.thirdweb.com/contracts/build/extensions/erc-1155/ERC1155) standard.\n\nNFT metadata is automatically fetched from where the "
							},
							{
								"kind": "code",
								"text": "`tokenUri`"
							},
							{
								"kind": "text",
								"text": " is hosted (e.g. IPFS), and makes the "
							},
							{
								"kind": "code",
								"text": "`image`"
							},
							{
								"kind": "text",
								"text": "\nproperty available as a URL through our IPFS gateway (if the image is hosted on IPFS)."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "Provide your NFT collection contract object and the token ID of the NFT you want to fetch as\narguments.\n\n"
									},
									{
										"kind": "code",
										"text": "```jsx\nimport { useContract, useNFT } from \"@thirdweb-dev/react\";\n\n// The token ID of the NFT you want to fetch\nconst tokenId = 0;\n\nfunction App() {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const { data: nft, isLoading, error } = useNFT(contract, tokenId);\n\n  if (isLoading) return <div>Fetching NFT…</div>;\n  if (error) return <div>Error fetching NFT</div>;\n  if (!nft) return <div>NFT not found</div>;\n  return <div>NFT: {nft.metadata.name}</div>;\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Query result object that includes the metadata for the given tokenId in "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property"
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "ERC721 | ERC1155"
									}
								]
							},
							{
								"tag": "@nft",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/nft.ts",
							"line": 94,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/nft.ts#L94"
						}
					],
					"typeParameter": [
						{
							"id": 780,
							"name": "TContract",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 1134,
								"name": "NFTContract",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"parameters": [
						{
							"id": 781,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`NFTContract`"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": -1,
										"name": "TContract",
										"refersToTypeParameter": true
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						},
						{
							"id": 782,
							"name": "tokenId",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The token ID of the NFT you want to fetch.\n"
									},
									{
										"kind": "code",
										"text": "```jsx\nimport { useContract, useNFT } from \"@thirdweb-dev/react\";\n\n// The token ID of the NFT you want to fetch\nconst tokenId = 0;\n\nfunction App() {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    data: nft,\n    isLoading,\n    error,\n  } = useNFT(\n    contract,\n    tokenId,\n  );\n}\n```"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts",
											"qualifiedName": "BigNumberish"
										},
										"name": "BigNumberish",
										"package": "@ethersproject/bignumber"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../sdk/src/core/schema/nft.ts",
									"qualifiedName": "NFT"
								},
								"name": "NFT",
								"package": "@thirdweb-dev/sdk"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 804,
			"name": "useNFTBalance",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/nft.ts",
					"line": 416,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/nft.ts#L416"
				}
			],
			"signatures": [
				{
					"id": 805,
					"name": "useNFTBalance",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook to get the quantity a user owns of a specific [ERC1155](https://portal.thirdweb.com/contracts/build/extensions/erc-1155/ERC1155) NFT.\n\nAvailable to use on smart contracts that implement the ["
							},
							{
								"kind": "code",
								"text": "`ERC1155`"
							},
							{
								"kind": "text",
								"text": "](https://portal.thirdweb.com/contracts/build/extensions/erc-1155/ERC1155) standard."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useNFTBalance, useContract } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress);\n  const { isLoading, data, error } = useNFTBalance(\n    contract,\n    \"{{wallet_address}}\",\n    \"{{token_id}}\",\n  );\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The hook's "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property, once loaded, returns a "
									},
									{
										"kind": "code",
										"text": "`BigNumber`"
									},
									{
										"kind": "text",
										"text": " representing the quantity of the NFT owned by the wallet."
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "ERC721 | ERC1155"
									}
								]
							},
							{
								"tag": "@nft",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/nft.ts",
							"line": 416,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/nft.ts#L416"
						}
					],
					"parameters": [
						{
							"id": 806,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`NFTContract`"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 1134,
										"name": "NFTContract",
										"package": "@thirdweb-dev/react-core"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						},
						{
							"id": 807,
							"name": "ownerWalletAddress",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The wallet address to check the balance of. Use the "
									},
									{
										"kind": "code",
										"text": "`useAddress`"
									},
									{
										"kind": "text",
										"text": " hook to get the current wallet address."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						},
						{
							"id": 808,
							"name": "tokenId",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Required for ERC1155, the tokenId to look up"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts",
											"qualifiedName": "BigNumberish"
										},
										"name": "BigNumberish",
										"package": "@ethersproject/bignumber"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts",
									"qualifiedName": "BigNumber"
								},
								"name": "BigNumber",
								"package": "@ethersproject/bignumber"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 783,
			"name": "useNFTs",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/nft.ts",
					"line": 156,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/nft.ts#L156"
				}
			],
			"signatures": [
				{
					"id": 784,
					"name": "useNFTs",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook to query all NFTs associated with a smart contract.\n\nAvailable to use on smart contracts that implement the ["
							},
							{
								"kind": "code",
								"text": "`ERC721`"
							},
							{
								"kind": "text",
								"text": "](https://portal.thirdweb.com/contracts/build/extensions/erc-721/ERC721)\nor ["
							},
							{
								"kind": "code",
								"text": "`ERC1155`"
							},
							{
								"kind": "text",
								"text": "](https://portal.thirdweb.com/contracts/build/extensions/erc-1155/ERC1155) standard.\n\nNFT metadata is automatically fetched from where the "
							},
							{
								"kind": "code",
								"text": "`tokenUri`"
							},
							{
								"kind": "text",
								"text": " is hosted (e.g. IPFS), and makes the "
							},
							{
								"kind": "code",
								"text": "`image`"
							},
							{
								"kind": "text",
								"text": "\nproperty available as a URL through our IPFS gateway (if the image is hosted on IPFS).\n\nBy default, only returns the first "
							},
							{
								"kind": "code",
								"text": "`100`"
							},
							{
								"kind": "text",
								"text": " NFTs in the collection. You can use the "
							},
							{
								"kind": "code",
								"text": "`queryParams`"
							},
							{
								"kind": "text",
								"text": " argument to\nfilter the NFTs that are returned or to paginate through the collection."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useNFTs, useContract } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress);\n  const { data, isLoading, error } = useNFTs(contract);\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Query result object that includes an array of "
									},
									{
										"kind": "code",
										"text": "`NFT`"
									},
									{
										"kind": "text",
										"text": " objects"
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "ERC721Supply | ERC721Enumerable | ERC1155Enumerable"
									}
								]
							},
							{
								"tag": "@nft",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/nft.ts",
							"line": 156,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/nft.ts#L156"
						}
					],
					"typeParameter": [
						{
							"id": 785,
							"name": "TContract",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 1134,
								"name": "NFTContract",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"parameters": [
						{
							"id": 786,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`NFTContract`"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": -1,
										"name": "TContract",
										"refersToTypeParameter": true
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						},
						{
							"id": 787,
							"name": "queryParams",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "By default, the hook will return the first 100 NFTs associated with the contract.\n\nYou can use the "
									},
									{
										"kind": "code",
										"text": "`queryParams`"
									},
									{
										"kind": "text",
										"text": " argument to paginate the NFTs that are returned."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 788,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/sdk/dist/declarations/src/core/schema/QueryParams.d.ts",
											"line": 12,
											"character": 3
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"sourceFileName": "../sdk/src/core/schema/nft.ts",
										"qualifiedName": "NFT"
									},
									"name": "NFT",
									"package": "@thirdweb-dev/sdk"
								}
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 1035,
			"name": "useNetworkMismatch",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/useNetworkMismatch.ts",
					"line": 25,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/useNetworkMismatch.ts#L25"
				}
			],
			"signatures": [
				{
					"id": 1036,
					"name": "useNetworkMismatch",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for checking whether the connected wallet is currently on the correct chain,\ni.e. the chain specified in the "
							},
							{
								"kind": "code",
								"text": "`activeChain`"
							},
							{
								"kind": "text",
								"text": " on the "
							},
							{
								"kind": "code",
								"text": "`ThirdwebProvider`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useNetworkMismatch } from \"@thirdweb-dev/react\";\n\nconst App = () => {\n  const isMismatched = useNetworkMismatch();\n};\n```"
									},
									{
										"kind": "text",
										"text": "\n\nUsing this value, you can prompt users to switch their network using the "
									},
									{
										"kind": "code",
										"text": "`useSwitchChain`"
									},
									{
										"kind": "text",
										"text": " hook."
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Returns "
									},
									{
										"kind": "code",
										"text": "`true`"
									},
									{
										"kind": "text",
										"text": " if the "
									},
									{
										"kind": "code",
										"text": "`chainId`"
									},
									{
										"kind": "text",
										"text": " of the connected wallet is different from the "
									},
									{
										"kind": "code",
										"text": "`chainId`"
									},
									{
										"kind": "text",
										"text": " of the "
									},
									{
										"kind": "code",
										"text": "`activeChain`"
									},
									{
										"kind": "text",
										"text": " on the "
									},
									{
										"kind": "code",
										"text": "`ThirdwebProvider`"
									},
									{
										"kind": "text",
										"text": " component"
									}
								]
							},
							{
								"tag": "@networkConnection",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/useNetworkMismatch.ts",
							"line": 25,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/useNetworkMismatch.ts#L25"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			]
		},
		{
			"id": 633,
			"name": "useOffers",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
					"line": 1769,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L1769"
				}
			],
			"signatures": [
				{
					"id": 634,
					"name": "useOffers",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for getting all of the offers made on a\ndirect listing on a "
							},
							{
								"kind": "code",
								"text": "`Marketplace`"
							},
							{
								"kind": "text",
								"text": " contract."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useOffers, useContract } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress, \"marketplace\");\n  const { data: offers, isLoading, error } = useOffers(contract, listingId);\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "This hook uses the "
									},
									{
										"kind": "code",
										"text": "`useEvents`"
									},
									{
										"kind": "text",
										"text": " hook under the hood to fetch "
									},
									{
										"kind": "code",
										"text": "`NewOffer`"
									},
									{
										"kind": "text",
										"text": " events for the given listing ID.\n\nThe return value is an array of "
									},
									{
										"kind": "code",
										"text": "`NewOffer`"
									},
									{
										"kind": "text",
										"text": " event objects. Each event object has the following properties:\n\n"
									},
									{
										"kind": "code",
										"text": "```ts\n{\n  offeror: string;\n  offerId: BigNumber;\n  assetContract: string;\n  offer: {\n    offerId: BigNumber;\n    offeror: string;\n    assetContract: string;\n    tokenId: BigNumber;\n    quantity: BigNumber;\n    currency: string;\n    totalPrice: BigNumber;\n    expirationTimestamp: BigNumber;\n    tokenType: \"ERC721\" | \"ERC1155\";\n    status: \"UNSET\" | \"CREATED\" | \"COMPLETED\" | \"CANCELLED\";\n  }\n}\n```"
									}
								]
							},
							{
								"tag": "@marketplace",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
							"line": 1769,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L1769"
						}
					],
					"parameters": [
						{
							"id": 635,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a Marketplace contract"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts",
											"qualifiedName": "Marketplace"
										},
										"name": "Marketplace",
										"package": "@thirdweb-dev/sdk"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						},
						{
							"id": 636,
							"name": "listingId",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The id of the listing to fetch offers for\nIf the listing cannot be found, is not a direct listing, or is not active, the "
									},
									{
										"kind": "code",
										"text": "`error`"
									},
									{
										"kind": "text",
										"text": " property will be set."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts",
											"qualifiedName": "BigNumberish"
										},
										"name": "BigNumberish",
										"package": "@ethersproject/bignumber"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reflection",
								"declaration": {
									"id": 637,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 638,
											"name": "data",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
													"line": 1776,
													"character": 4,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L1776"
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"target": {
																"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
																"qualifiedName": "Record"
															},
															"typeArguments": [
																{
																	"type": "intrinsic",
																	"name": "string"
																},
																{
																	"type": "intrinsic",
																	"name": "any"
																}
															],
															"name": "Record",
															"package": "typescript"
														}
													}
												]
											},
											"defaultValue": "..."
										},
										{
											"id": 646,
											"name": "dataUpdatedAt",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 228,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 639,
											"name": "error",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 275,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "unknown"
											}
										},
										{
											"id": 650,
											"name": "errorUpdateCount",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 233,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 647,
											"name": "errorUpdatedAt",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 230,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 648,
											"name": "failureCount",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 231,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 649,
											"name": "failureReason",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 232,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "unknown"
											}
										},
										{
											"id": 668,
											"name": "fetchStatus",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 251,
													"character": 4
												}
											],
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
													"qualifiedName": "FetchStatus"
												},
												"name": "FetchStatus",
												"package": "@tanstack/query-core"
											}
										},
										{
											"id": 640,
											"name": "isError",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 276,
													"character": 4
												}
											],
											"type": {
												"type": "literal",
												"value": true
											}
										},
										{
											"id": 651,
											"name": "isFetched",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 235,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 652,
											"name": "isFetchedAfterMount",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 236,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 653,
											"name": "isFetching",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 237,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 654,
											"name": "isInitialLoading",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 240,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 641,
											"name": "isLoading",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 277,
													"character": 4
												}
											],
											"type": {
												"type": "literal",
												"value": false
											}
										},
										{
											"id": 642,
											"name": "isLoadingError",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 278,
													"character": 4
												}
											],
											"type": {
												"type": "literal",
												"value": false
											}
										},
										{
											"id": 655,
											"name": "isPaused",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 241,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 656,
											"name": "isPlaceholderData",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 242,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 657,
											"name": "isPreviousData",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 243,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 643,
											"name": "isRefetchError",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 279,
													"character": 4
												}
											],
											"type": {
												"type": "literal",
												"value": true
											}
										},
										{
											"id": 658,
											"name": "isRefetching",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 245,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 659,
											"name": "isStale",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 246,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 644,
											"name": "isSuccess",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 280,
													"character": 4
												}
											],
											"type": {
												"type": "literal",
												"value": false
											}
										},
										{
											"id": 660,
											"name": "refetch",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 248,
													"character": 4
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 661,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
															"line": 248,
															"character": 13
														}
													],
													"signatures": [
														{
															"id": 662,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
																	"line": 248,
																	"character": 13
																}
															],
															"typeParameter": [
																{
																	"id": 663,
																	"name": "TPageData",
																	"variant": "typeParam",
																	"kind": 131072,
																	"flags": {
																		"isExternal": true
																	}
																}
															],
															"parameters": [
																{
																	"id": 664,
																	"name": "options",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isOptional": true
																	},
																	"type": {
																		"type": "intersection",
																		"types": [
																			{
																				"type": "reference",
																				"target": {
																					"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
																					"qualifiedName": "RefetchOptions"
																				},
																				"name": "RefetchOptions",
																				"package": "@tanstack/query-core"
																			},
																			{
																				"type": "reference",
																				"target": {
																					"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
																					"qualifiedName": "RefetchQueryFilters"
																				},
																				"typeArguments": [
																					{
																						"type": "reference",
																						"target": -1,
																						"name": "TPageData",
																						"refersToTypeParameter": true
																					}
																				],
																				"name": "RefetchQueryFilters",
																				"package": "@tanstack/query-core"
																			}
																		]
																	}
																}
															],
															"type": {
																"type": "reference",
																"target": {
																	"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
																	"qualifiedName": "Promise"
																},
																"typeArguments": [
																	{
																		"type": "reference",
																		"target": {
																			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
																			"qualifiedName": "QueryObserverResult"
																		},
																		"typeArguments": [
																			{
																				"type": "array",
																				"elementType": {
																					"type": "reference",
																					"target": {
																						"sourceFileName": "../sdk/src/evm/types/events.ts",
																						"qualifiedName": "ContractEvent"
																					},
																					"typeArguments": [
																						{
																							"type": "reference",
																							"target": {
																								"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
																								"qualifiedName": "Record"
																							},
																							"typeArguments": [
																								{
																									"type": "intrinsic",
																									"name": "string"
																								},
																								{
																									"type": "intrinsic",
																									"name": "any"
																								}
																							],
																							"name": "Record",
																							"package": "typescript"
																						}
																					],
																					"name": "ContractEvent",
																					"package": "@thirdweb-dev/sdk"
																				}
																			},
																			{
																				"type": "intrinsic",
																				"name": "unknown"
																			}
																		],
																		"name": "QueryObserverResult",
																		"package": "@tanstack/query-core"
																	}
																],
																"name": "Promise",
																"package": "typescript"
															}
														}
													]
												}
											}
										},
										{
											"id": 665,
											"name": "remove",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 249,
													"character": 4
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 666,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
															"line": 249,
															"character": 12
														}
													],
													"signatures": [
														{
															"id": 667,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
																	"line": 249,
																	"character": 12
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										},
										{
											"id": 645,
											"name": "status",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 281,
													"character": 4
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												638,
												646,
												639,
												650,
												647,
												648,
												649,
												668,
												640,
												651,
												652,
												653,
												654,
												641,
												642,
												655,
												656,
												657,
												643,
												658,
												659,
												644,
												660,
												665,
												645
											]
										}
									],
									"sources": [
										{
											"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
											"line": 1774,
											"character": 9,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L1774"
										}
									]
								}
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 669,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 670,
											"name": "data",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
													"line": 1776,
													"character": 4,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L1776"
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"target": {
																"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
																"qualifiedName": "Record"
															},
															"typeArguments": [
																{
																	"type": "intrinsic",
																	"name": "string"
																},
																{
																	"type": "intrinsic",
																	"name": "any"
																}
															],
															"name": "Record",
															"package": "typescript"
														}
													}
												]
											},
											"defaultValue": "..."
										},
										{
											"id": 678,
											"name": "dataUpdatedAt",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 228,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 671,
											"name": "error",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 285,
													"character": 4
												}
											],
											"type": {
												"type": "literal",
												"value": null
											}
										},
										{
											"id": 682,
											"name": "errorUpdateCount",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 233,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 679,
											"name": "errorUpdatedAt",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 230,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 680,
											"name": "failureCount",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 231,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 681,
											"name": "failureReason",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 232,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "unknown"
											}
										},
										{
											"id": 700,
											"name": "fetchStatus",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 251,
													"character": 4
												}
											],
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
													"qualifiedName": "FetchStatus"
												},
												"name": "FetchStatus",
												"package": "@tanstack/query-core"
											}
										},
										{
											"id": 672,
											"name": "isError",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 286,
													"character": 4
												}
											],
											"type": {
												"type": "literal",
												"value": false
											}
										},
										{
											"id": 683,
											"name": "isFetched",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 235,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 684,
											"name": "isFetchedAfterMount",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 236,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 685,
											"name": "isFetching",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 237,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 686,
											"name": "isInitialLoading",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 240,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 673,
											"name": "isLoading",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 287,
													"character": 4
												}
											],
											"type": {
												"type": "literal",
												"value": false
											}
										},
										{
											"id": 674,
											"name": "isLoadingError",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 288,
													"character": 4
												}
											],
											"type": {
												"type": "literal",
												"value": false
											}
										},
										{
											"id": 687,
											"name": "isPaused",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 241,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 688,
											"name": "isPlaceholderData",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 242,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 689,
											"name": "isPreviousData",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 243,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 675,
											"name": "isRefetchError",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 289,
													"character": 4
												}
											],
											"type": {
												"type": "literal",
												"value": false
											}
										},
										{
											"id": 690,
											"name": "isRefetching",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 245,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 691,
											"name": "isStale",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 246,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 676,
											"name": "isSuccess",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 290,
													"character": 4
												}
											],
											"type": {
												"type": "literal",
												"value": true
											}
										},
										{
											"id": 692,
											"name": "refetch",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 248,
													"character": 4
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 693,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
															"line": 248,
															"character": 13
														}
													],
													"signatures": [
														{
															"id": 694,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
																	"line": 248,
																	"character": 13
																}
															],
															"typeParameter": [
																{
																	"id": 695,
																	"name": "TPageData",
																	"variant": "typeParam",
																	"kind": 131072,
																	"flags": {
																		"isExternal": true
																	}
																}
															],
															"parameters": [
																{
																	"id": 696,
																	"name": "options",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isOptional": true
																	},
																	"type": {
																		"type": "intersection",
																		"types": [
																			{
																				"type": "reference",
																				"target": {
																					"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
																					"qualifiedName": "RefetchOptions"
																				},
																				"name": "RefetchOptions",
																				"package": "@tanstack/query-core"
																			},
																			{
																				"type": "reference",
																				"target": {
																					"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
																					"qualifiedName": "RefetchQueryFilters"
																				},
																				"typeArguments": [
																					{
																						"type": "reference",
																						"target": -1,
																						"name": "TPageData",
																						"refersToTypeParameter": true
																					}
																				],
																				"name": "RefetchQueryFilters",
																				"package": "@tanstack/query-core"
																			}
																		]
																	}
																}
															],
															"type": {
																"type": "reference",
																"target": {
																	"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
																	"qualifiedName": "Promise"
																},
																"typeArguments": [
																	{
																		"type": "reference",
																		"target": {
																			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
																			"qualifiedName": "QueryObserverResult"
																		},
																		"typeArguments": [
																			{
																				"type": "array",
																				"elementType": {
																					"type": "reference",
																					"target": {
																						"sourceFileName": "../sdk/src/evm/types/events.ts",
																						"qualifiedName": "ContractEvent"
																					},
																					"typeArguments": [
																						{
																							"type": "reference",
																							"target": {
																								"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
																								"qualifiedName": "Record"
																							},
																							"typeArguments": [
																								{
																									"type": "intrinsic",
																									"name": "string"
																								},
																								{
																									"type": "intrinsic",
																									"name": "any"
																								}
																							],
																							"name": "Record",
																							"package": "typescript"
																						}
																					],
																					"name": "ContractEvent",
																					"package": "@thirdweb-dev/sdk"
																				}
																			},
																			{
																				"type": "intrinsic",
																				"name": "unknown"
																			}
																		],
																		"name": "QueryObserverResult",
																		"package": "@tanstack/query-core"
																	}
																],
																"name": "Promise",
																"package": "typescript"
															}
														}
													]
												}
											}
										},
										{
											"id": 697,
											"name": "remove",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 249,
													"character": 4
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 698,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
															"line": 249,
															"character": 12
														}
													],
													"signatures": [
														{
															"id": 699,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
																	"line": 249,
																	"character": 12
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										},
										{
											"id": 677,
											"name": "status",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 291,
													"character": 4
												}
											],
											"type": {
												"type": "literal",
												"value": "success"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												670,
												678,
												671,
												682,
												679,
												680,
												681,
												700,
												672,
												683,
												684,
												685,
												686,
												673,
												674,
												687,
												688,
												689,
												675,
												690,
												691,
												676,
												692,
												697,
												677
											]
										}
									],
									"sources": [
										{
											"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
											"line": 1774,
											"character": 9,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L1774"
										}
									]
								}
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 701,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 702,
											"name": "data",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
													"line": 1776,
													"character": 4,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L1776"
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"target": {
																"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
																"qualifiedName": "Record"
															},
															"typeArguments": [
																{
																	"type": "intrinsic",
																	"name": "string"
																},
																{
																	"type": "intrinsic",
																	"name": "any"
																}
															],
															"name": "Record",
															"package": "typescript"
														}
													}
												]
											},
											"defaultValue": "..."
										},
										{
											"id": 710,
											"name": "dataUpdatedAt",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 228,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 703,
											"name": "error",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 265,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "unknown"
											}
										},
										{
											"id": 714,
											"name": "errorUpdateCount",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 233,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 711,
											"name": "errorUpdatedAt",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 230,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 712,
											"name": "failureCount",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 231,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 713,
											"name": "failureReason",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 232,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "unknown"
											}
										},
										{
											"id": 732,
											"name": "fetchStatus",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 251,
													"character": 4
												}
											],
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
													"qualifiedName": "FetchStatus"
												},
												"name": "FetchStatus",
												"package": "@tanstack/query-core"
											}
										},
										{
											"id": 704,
											"name": "isError",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 266,
													"character": 4
												}
											],
											"type": {
												"type": "literal",
												"value": true
											}
										},
										{
											"id": 715,
											"name": "isFetched",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 235,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 716,
											"name": "isFetchedAfterMount",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 236,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 717,
											"name": "isFetching",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 237,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 718,
											"name": "isInitialLoading",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 240,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 705,
											"name": "isLoading",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 267,
													"character": 4
												}
											],
											"type": {
												"type": "literal",
												"value": false
											}
										},
										{
											"id": 706,
											"name": "isLoadingError",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 268,
													"character": 4
												}
											],
											"type": {
												"type": "literal",
												"value": true
											}
										},
										{
											"id": 719,
											"name": "isPaused",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 241,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 720,
											"name": "isPlaceholderData",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 242,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 721,
											"name": "isPreviousData",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 243,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 707,
											"name": "isRefetchError",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 269,
													"character": 4
												}
											],
											"type": {
												"type": "literal",
												"value": false
											}
										},
										{
											"id": 722,
											"name": "isRefetching",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 245,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 723,
											"name": "isStale",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 246,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 708,
											"name": "isSuccess",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 270,
													"character": 4
												}
											],
											"type": {
												"type": "literal",
												"value": false
											}
										},
										{
											"id": 724,
											"name": "refetch",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 248,
													"character": 4
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 725,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
															"line": 248,
															"character": 13
														}
													],
													"signatures": [
														{
															"id": 726,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
																	"line": 248,
																	"character": 13
																}
															],
															"typeParameter": [
																{
																	"id": 727,
																	"name": "TPageData",
																	"variant": "typeParam",
																	"kind": 131072,
																	"flags": {
																		"isExternal": true
																	}
																}
															],
															"parameters": [
																{
																	"id": 728,
																	"name": "options",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isOptional": true
																	},
																	"type": {
																		"type": "intersection",
																		"types": [
																			{
																				"type": "reference",
																				"target": {
																					"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
																					"qualifiedName": "RefetchOptions"
																				},
																				"name": "RefetchOptions",
																				"package": "@tanstack/query-core"
																			},
																			{
																				"type": "reference",
																				"target": {
																					"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
																					"qualifiedName": "RefetchQueryFilters"
																				},
																				"typeArguments": [
																					{
																						"type": "reference",
																						"target": -1,
																						"name": "TPageData",
																						"refersToTypeParameter": true
																					}
																				],
																				"name": "RefetchQueryFilters",
																				"package": "@tanstack/query-core"
																			}
																		]
																	}
																}
															],
															"type": {
																"type": "reference",
																"target": {
																	"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
																	"qualifiedName": "Promise"
																},
																"typeArguments": [
																	{
																		"type": "reference",
																		"target": {
																			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
																			"qualifiedName": "QueryObserverResult"
																		},
																		"typeArguments": [
																			{
																				"type": "array",
																				"elementType": {
																					"type": "reference",
																					"target": {
																						"sourceFileName": "../sdk/src/evm/types/events.ts",
																						"qualifiedName": "ContractEvent"
																					},
																					"typeArguments": [
																						{
																							"type": "reference",
																							"target": {
																								"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
																								"qualifiedName": "Record"
																							},
																							"typeArguments": [
																								{
																									"type": "intrinsic",
																									"name": "string"
																								},
																								{
																									"type": "intrinsic",
																									"name": "any"
																								}
																							],
																							"name": "Record",
																							"package": "typescript"
																						}
																					],
																					"name": "ContractEvent",
																					"package": "@thirdweb-dev/sdk"
																				}
																			},
																			{
																				"type": "intrinsic",
																				"name": "unknown"
																			}
																		],
																		"name": "QueryObserverResult",
																		"package": "@tanstack/query-core"
																	}
																],
																"name": "Promise",
																"package": "typescript"
															}
														}
													]
												}
											}
										},
										{
											"id": 729,
											"name": "remove",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 249,
													"character": 4
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 730,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
															"line": 249,
															"character": 12
														}
													],
													"signatures": [
														{
															"id": 731,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
																	"line": 249,
																	"character": 12
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										},
										{
											"id": 709,
											"name": "status",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 271,
													"character": 4
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												702,
												710,
												703,
												714,
												711,
												712,
												713,
												732,
												704,
												715,
												716,
												717,
												718,
												705,
												706,
												719,
												720,
												721,
												707,
												722,
												723,
												708,
												724,
												729,
												709
											]
										}
									],
									"sources": [
										{
											"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
											"line": 1774,
											"character": 9,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L1774"
										}
									]
								}
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 733,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 734,
											"name": "data",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
													"line": 1776,
													"character": 4,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L1776"
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"target": {
																"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
																"qualifiedName": "Record"
															},
															"typeArguments": [
																{
																	"type": "intrinsic",
																	"name": "string"
																},
																{
																	"type": "intrinsic",
																	"name": "any"
																}
															],
															"name": "Record",
															"package": "typescript"
														}
													}
												]
											},
											"defaultValue": "..."
										},
										{
											"id": 742,
											"name": "dataUpdatedAt",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 228,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 735,
											"name": "error",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 255,
													"character": 4
												}
											],
											"type": {
												"type": "literal",
												"value": null
											}
										},
										{
											"id": 746,
											"name": "errorUpdateCount",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 233,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 743,
											"name": "errorUpdatedAt",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 230,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 744,
											"name": "failureCount",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 231,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 745,
											"name": "failureReason",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 232,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "unknown"
											}
										},
										{
											"id": 764,
											"name": "fetchStatus",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 251,
													"character": 4
												}
											],
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
													"qualifiedName": "FetchStatus"
												},
												"name": "FetchStatus",
												"package": "@tanstack/query-core"
											}
										},
										{
											"id": 736,
											"name": "isError",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 256,
													"character": 4
												}
											],
											"type": {
												"type": "literal",
												"value": false
											}
										},
										{
											"id": 747,
											"name": "isFetched",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 235,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 748,
											"name": "isFetchedAfterMount",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 236,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 749,
											"name": "isFetching",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 237,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 750,
											"name": "isInitialLoading",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 240,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 737,
											"name": "isLoading",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 257,
													"character": 4
												}
											],
											"type": {
												"type": "literal",
												"value": true
											}
										},
										{
											"id": 738,
											"name": "isLoadingError",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 258,
													"character": 4
												}
											],
											"type": {
												"type": "literal",
												"value": false
											}
										},
										{
											"id": 751,
											"name": "isPaused",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 241,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 752,
											"name": "isPlaceholderData",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 242,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 753,
											"name": "isPreviousData",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 243,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 739,
											"name": "isRefetchError",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 259,
													"character": 4
												}
											],
											"type": {
												"type": "literal",
												"value": false
											}
										},
										{
											"id": 754,
											"name": "isRefetching",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 245,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 755,
											"name": "isStale",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 246,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 740,
											"name": "isSuccess",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 260,
													"character": 4
												}
											],
											"type": {
												"type": "literal",
												"value": false
											}
										},
										{
											"id": 756,
											"name": "refetch",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 248,
													"character": 4
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 757,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
															"line": 248,
															"character": 13
														}
													],
													"signatures": [
														{
															"id": 758,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
																	"line": 248,
																	"character": 13
																}
															],
															"typeParameter": [
																{
																	"id": 759,
																	"name": "TPageData",
																	"variant": "typeParam",
																	"kind": 131072,
																	"flags": {
																		"isExternal": true
																	}
																}
															],
															"parameters": [
																{
																	"id": 760,
																	"name": "options",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isOptional": true
																	},
																	"type": {
																		"type": "intersection",
																		"types": [
																			{
																				"type": "reference",
																				"target": {
																					"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
																					"qualifiedName": "RefetchOptions"
																				},
																				"name": "RefetchOptions",
																				"package": "@tanstack/query-core"
																			},
																			{
																				"type": "reference",
																				"target": {
																					"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
																					"qualifiedName": "RefetchQueryFilters"
																				},
																				"typeArguments": [
																					{
																						"type": "reference",
																						"target": -1,
																						"name": "TPageData",
																						"refersToTypeParameter": true
																					}
																				],
																				"name": "RefetchQueryFilters",
																				"package": "@tanstack/query-core"
																			}
																		]
																	}
																}
															],
															"type": {
																"type": "reference",
																"target": {
																	"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
																	"qualifiedName": "Promise"
																},
																"typeArguments": [
																	{
																		"type": "reference",
																		"target": {
																			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
																			"qualifiedName": "QueryObserverResult"
																		},
																		"typeArguments": [
																			{
																				"type": "array",
																				"elementType": {
																					"type": "reference",
																					"target": {
																						"sourceFileName": "../sdk/src/evm/types/events.ts",
																						"qualifiedName": "ContractEvent"
																					},
																					"typeArguments": [
																						{
																							"type": "reference",
																							"target": {
																								"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
																								"qualifiedName": "Record"
																							},
																							"typeArguments": [
																								{
																									"type": "intrinsic",
																									"name": "string"
																								},
																								{
																									"type": "intrinsic",
																									"name": "any"
																								}
																							],
																							"name": "Record",
																							"package": "typescript"
																						}
																					],
																					"name": "ContractEvent",
																					"package": "@thirdweb-dev/sdk"
																				}
																			},
																			{
																				"type": "intrinsic",
																				"name": "unknown"
																			}
																		],
																		"name": "QueryObserverResult",
																		"package": "@tanstack/query-core"
																	}
																],
																"name": "Promise",
																"package": "typescript"
															}
														}
													]
												}
											}
										},
										{
											"id": 761,
											"name": "remove",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 249,
													"character": 4
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 762,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
															"line": 249,
															"character": 12
														}
													],
													"signatures": [
														{
															"id": 763,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
																	"line": 249,
																	"character": 12
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										},
										{
											"id": 741,
											"name": "status",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/build/lib/types.d.ts",
													"line": 261,
													"character": 4
												}
											],
											"type": {
												"type": "literal",
												"value": "loading"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												734,
												742,
												735,
												746,
												743,
												744,
												745,
												764,
												736,
												747,
												748,
												749,
												750,
												737,
												738,
												751,
												752,
												753,
												739,
												754,
												755,
												740,
												756,
												761,
												741
											]
										}
									],
									"sources": [
										{
											"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
											"line": 1774,
											"character": 9,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L1774"
										}
									]
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 797,
			"name": "useOwnedNFTs",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/nft.ts",
					"line": 363,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/nft.ts#L363"
				}
			],
			"signatures": [
				{
					"id": 798,
					"name": "useOwnedNFTs",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for accessing a list of NFTs owned by a single wallet address.\n\nAvailable to use on smart contracts that implement either ERC721Enumerable, ERC1155Enumerable, or ERC721Supply extensions."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useOwnedNFTs, useContract, useAddress } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const address = useAddress();\n  const { contract } = useContract(contractAddress);\n  const { data, isLoading, error } = useOwnedNFTs(contract, address);\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Query result object that includes the list of owned "
									},
									{
										"kind": "code",
										"text": "`NFT`"
									},
									{
										"kind": "text",
										"text": " objects"
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "ERC721Enumerable | ERC1155Enumerable | ERC721Supply"
									}
								]
							},
							{
								"tag": "@nft",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/nft.ts",
							"line": 363,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/nft.ts#L363"
						}
					],
					"typeParameter": [
						{
							"id": 799,
							"name": "TContract",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 1134,
								"name": "NFTContract",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"parameters": [
						{
							"id": 800,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`NFTContract`"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": -1,
										"name": "TContract",
										"refersToTypeParameter": true
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						},
						{
							"id": 801,
							"name": "ownerWalletAddress",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The wallet address to get owned tokens for. Likely, you will want to view the connected wallet’s NFTs. use the "
									},
									{
										"kind": "code",
										"text": "`useAddress`"
									},
									{
										"kind": "text",
										"text": " hook to get this value."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						},
						{
							"id": 802,
							"name": "queryParams",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Paginate the results by providing a "
									},
									{
										"kind": "code",
										"text": "`queryParams`"
									},
									{
										"kind": "text",
										"text": " object as an argument.\n\n"
									},
									{
										"kind": "code",
										"text": "```jsx\nimport { useOwnedNFTs, useContract, useAddress } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress);\n  const address = useAddress();\n  const { data, isLoading, error } = useOwnedNFTs(\n    contract,\n    address\n    {\n      count: 10, // Limit the number of results\n      start: 0, // Start from the nth result (useful for pagination)\n    },\n  );\n}\n```"
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 803,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/sdk/dist/declarations/src/core/schema/QueryParams.d.ts",
											"line": 12,
											"character": 3
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"sourceFileName": "../sdk/src/core/schema/nft.ts",
										"qualifiedName": "NFT"
									},
									"name": "NFT",
									"package": "@thirdweb-dev/sdk"
								}
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 103,
			"name": "usePersonalWalletAddress",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/usePersonalWalletAddress.ts",
					"line": 10,
					"character": 13,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/usePersonalWalletAddress.ts#L10"
				}
			],
			"signatures": [
				{
					"id": 104,
					"name": "usePersonalWalletAddress",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for getting the address of the personal wallet connected to the current wallet connection.\n\nThis is only relevant if the current connected wallet uses a personal wallet - For Example - Smart Wallet and Safe."
							}
						],
						"blockTags": [
							{
								"tag": "@walletConnection",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/usePersonalWalletAddress.ts",
							"line": 10,
							"character": 40,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/usePersonalWalletAddress.ts#L10"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				}
			]
		},
		{
			"id": 347,
			"name": "usePlatformFees",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/contract-settings.ts",
					"line": 346,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contract-settings.ts#L346"
				}
			],
			"signatures": [
				{
					"id": 348,
					"name": "usePlatformFees",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for getting the platform fee settings of a contract.\n\nAvailable to use on contracts that implement the ["
							},
							{
								"kind": "code",
								"text": "`PlatformFee`"
							},
							{
								"kind": "text",
								"text": "](https://portal.thirdweb.com/contracts/build/extensions/general/PlatformFee) interface."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useContract, usePlatformFees } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress);\n  const { data, isLoading, error } = usePlatformFees(contract);\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The hook's "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property, once loaded, is an object containing two fields:\n\n- "
									},
									{
										"kind": "code",
										"text": "`platform_fee_basis_points`"
									},
									{
										"kind": "text",
										"text": ": the platform fee basis points set on the contract\n- "
									},
									{
										"kind": "code",
										"text": "`platform_fee_recipient`"
									},
									{
										"kind": "text",
										"text": ": the wallet address of the platform fee recipient\n\n_Note_: The basis points are in percentage format, meaning that a value of "
									},
									{
										"kind": "code",
										"text": "`500`"
									},
									{
										"kind": "text",
										"text": " is equivalent to a "
									},
									{
										"kind": "code",
										"text": "`5%`"
									},
									{
										"kind": "text",
										"text": " fee.\n\n"
									},
									{
										"kind": "code",
										"text": "```ts\n{\n  platform_fee_basis_points: number;\n  platform_fee_recipient: string;\n}\n```"
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "PlatformFee"
									}
								]
							},
							{
								"tag": "@platformFees",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/contract-settings.ts",
							"line": 346,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contract-settings.ts#L346"
						}
					],
					"parameters": [
						{
							"id": 349,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`SmartContract`"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/contracts/index.ts",
											"qualifiedName": "ValidContractInstance"
										},
										"name": "ValidContractInstance",
										"package": "@thirdweb-dev/sdk"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "reflection",
								"declaration": {
									"id": 350,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 351,
											"name": "platform_fee_basis_points",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/async/contract-settings.ts",
													"line": 350,
													"character": 4,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contract-settings.ts#L350"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 352,
											"name": "platform_fee_recipient",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/async/contract-settings.ts",
													"line": 351,
													"character": 4,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contract-settings.ts#L351"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												351,
												352
											]
										}
									],
									"sources": [
										{
											"fileName": "packages/react-core/src/evm/hooks/async/contract-settings.ts",
											"line": 349,
											"character": 2,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contract-settings.ts#L349"
										}
									]
								}
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 326,
			"name": "usePrimarySaleRecipient",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/contract-settings.ts",
					"line": 49,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contract-settings.ts#L49"
				}
			],
			"signatures": [
				{
					"id": 327,
					"name": "usePrimarySaleRecipient",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for getting the primary sales recipient of a smart contract.\n\nAvailable to use on contracts that implement the ["
							},
							{
								"kind": "code",
								"text": "`PrimarySale`"
							},
							{
								"kind": "text",
								"text": "](https://portal.thirdweb.com/contracts/build/extensions/general/PrimarySale) interface."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useContract, usePrimarySaleRecipient } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress);\n  const { data, isLoading, error } = usePrimarySaleRecipient(contract);\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The hook's "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property, once loaded, is a "
									},
									{
										"kind": "code",
										"text": "`string`"
									},
									{
										"kind": "text",
										"text": " with the wallet address of the primary sales recipient."
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "PrimarySale"
									}
								]
							},
							{
								"tag": "@platformFees",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/contract-settings.ts",
							"line": 49,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contract-settings.ts#L49"
						}
					],
					"parameters": [
						{
							"id": 328,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`SmartContract`"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/contracts/index.ts",
											"qualifiedName": "ValidContractInstance"
										},
										"name": "ValidContractInstance",
										"package": "@thirdweb-dev/sdk"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 948,
			"name": "useRemoveAdmin",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/account.ts",
					"line": 323,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/account.ts#L323"
				}
			],
			"signatures": [
				{
					"id": 949,
					"name": "useRemoveAdmin",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Remove an admin on the smart wallet account. This action has to be performed by an admin on the account.\n\n"
							},
							{
								"kind": "code",
								"text": "```jsx\nimport { useRemoveAdmin } from \"@thirdweb-dev/react\";\n\nconst adminAddress = \"{{admin_address}}\";\n\nconst Component = () => {\n  const { mutate: removeAdmin, isLoading, error } = useRemoveAdmin();\n\n  if (error) {\n    console.error(\"failed to remove admin\", error);\n  }\n\n  return (\n    <button disabled={isLoading} onClick={() => removeAdmin(adminAddress)}>\n      Remove admin\n    </button>\n  );\n};\n```"
							}
						],
						"blockTags": [
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "Account"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "mutation object to remove given address as an admin"
									}
								]
							},
							{
								"tag": "@smartWallet",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/account.ts",
							"line": 323,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/account.ts#L323"
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseMutationResult"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../sdk/src/evm/core/types.ts",
									"qualifiedName": "TransactionResult"
								},
								"name": "TransactionResult",
								"package": "@thirdweb-dev/sdk"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						],
						"name": "UseMutationResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 321,
			"name": "useResetClaimConditions",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/claim-conditions.ts",
					"line": 915,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/claim-conditions.ts#L915"
				}
			],
			"signatures": [
				{
					"id": 322,
					"name": "useResetClaimConditions",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for resetting the claim conditions on a drop contract.\n\nAvailable to use on contracts that implement\n["
							},
							{
								"kind": "code",
								"text": "`ERC721ClaimableWithConditions`"
							},
							{
								"kind": "text",
								"text": "](https://portal.thirdweb.com/contracts/build/extensions/erc-721/ERC721ClaimConditions),\n["
							},
							{
								"kind": "code",
								"text": "`ERC1155ClaimableWithConditions`"
							},
							{
								"kind": "text",
								"text": "](https://portal.thirdweb.com/contracts/build/extensions/erc-1155/ERC1155ClaimConditions) or\n["
							},
							{
								"kind": "code",
								"text": "`ERC20ClaimableWithConditions`"
							},
							{
								"kind": "text",
								"text": "](https://portal.thirdweb.com/contracts/build/extensions/erc-20/ERC20ClaimConditions)."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport {\n  useContract,\n  useResetClaimConditions,\n  Web3Button,\n} from \"@thirdweb-dev/react\";\n\nfunction App() {\n  // Contract must be a drop contract that implements claim conditions\n  const { contract } = useContract(contractAddress);\n  const {\n    mutateAsync: resetClaimConditions,\n    isLoading,\n    error,\n  } = useResetClaimConditions(contract);\n\n  return (\n    <Web3Button\n      contractAddress={contractAddress}\n      action={() => resetClaimConditions()}\n    >\n      Reset Claim Conditions\n    </Web3Button>\n  );\n}\n```"
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "ERC20ClaimPhasesV2 | ERC20ClaimPhasesV1 | ERC20ClaimConditionsV2 | ERC20ClaimConditionsV1 | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1 | ERC1155ClaimPhasesV2 | ERC1155ClaimPhasesV1 | ERC1155ClaimConditionsV2 | ERC1155ClaimConditionsV1"
									}
								]
							},
							{
								"tag": "@nftDrop",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/claim-conditions.ts",
							"line": 915,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/claim-conditions.ts#L915"
						}
					],
					"parameters": [
						{
							"id": 323,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`DropContract`"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 1162,
										"name": "DropContract",
										"package": "@thirdweb-dev/react-core"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						},
						{
							"id": 324,
							"name": "tokenId",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "For ERC1155 NFTs, provide the token ID of the NFT as the second argument to the hook."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts",
									"qualifiedName": "BigNumberish"
								},
								"name": "BigNumberish",
								"package": "@ethersproject/bignumber"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseMutationResult"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Omit"
								},
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 325,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/sdk/dist/declarations/src/evm/core/classes/drop-erc1155-claim-conditions.d.ts",
													"line": 131,
													"character": 62
												}
											]
										}
									},
									{
										"type": "literal",
										"value": "data"
									}
								],
								"name": "Omit",
								"package": "typescript"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							},
							{
								"type": "intrinsic",
								"name": "void"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseMutationResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 511,
			"name": "useRevealLazyMint",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/drop.ts",
					"line": 777,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/drop.ts#L777"
				}
			],
			"signatures": [
				{
					"id": 512,
					"name": "useRevealLazyMint",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for revealing a batch of delayed reveal NFTs using [delayed reveal](https://portal.thirdweb.com/glossary/delayed-reveal).\n\nAvailable to use on contracts that implement the\n[ERC721Revealable](https://portal.thirdweb.com/contracts/build/extensions/erc-721/ERC721Revealable)\nor [ERC1155Revealable](https://portal.thirdweb.com/contracts/build/extensions/erc-1155/ERC1155Revealable)\ninterfaces.\n\n"
							},
							{
								"kind": "code",
								"text": "```jsx\nimport { useRevealLazyMint } from \"@thirdweb-dev/react\";\n\nconst { mutateAsync, isLoading, error } = useRevealLazyMint(contract);\n```"
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```tsx\nimport {\n  useContract,\n  useRevealLazyMint,\n  Web3Button,\n} from \"@thirdweb-dev/react\";\n\nfunction App() {\n  // Contract must be an ERC-721 or ERC-1155 contract that implements the ERC721Revealable or ERC1155Revealable interface\n  const { contract } = useContract(contractAddress);\n  const {\n    mutateAsync: revealLazyMint,\n    isLoading,\n    error,\n  } = useRevealLazyMint(contract);\n\n  return (\n    <Web3Button\n      contractAddress={contractAddress}\n      action={() =>\n        revealLazyMint({\n          batchId: \"{{batch_id}}\", // ID of the batch to reveal (use useBatchesToReveal to get the batch IDs)\n          password: \"{{password}}\", // Password to reveal the batch\n        })\n      }\n    >\n      Reveal Lazy Mint\n    </Web3Button>\n  );\n}\n```"
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "ERC721Revealable | ERC1155Revealable"
									}
								]
							},
							{
								"tag": "@delayedReveal",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/drop.ts",
							"line": 777,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/drop.ts#L777"
						}
					],
					"typeParameter": [
						{
							"id": 513,
							"name": "TContract",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 1163,
								"name": "RevealableContract",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"parameters": [
						{
							"id": 514,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`RevealableContract`"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": -1,
										"name": "TContract",
										"refersToTypeParameter": true
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseMutationResult"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Omit"
								},
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 515,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 517,
													"name": "data",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"sources": [
														{
															"fileName": "packages/react-core/src/evm/hooks/async/drop.ts",
															"line": 783,
															"character": 6,
															"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/drop.ts#L783"
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 518,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {},
															"sources": [
																{
																	"fileName": "packages/react-core/src/evm/hooks/async/drop.ts",
																	"line": 783,
																	"character": 12,
																	"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/drop.ts#L783"
																}
															],
															"signatures": [
																{
																	"id": 519,
																	"name": "__type",
																	"variant": "signature",
																	"kind": 4096,
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"target": {
																			"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
																			"qualifiedName": "Promise"
																		},
																		"typeArguments": [
																			{
																				"type": "intrinsic",
																				"name": "unknown"
																			}
																		],
																		"name": "Promise",
																		"package": "typescript"
																	}
																}
															]
														}
													}
												},
												{
													"id": 516,
													"name": "receipt",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"sources": [
														{
															"fileName": "packages/react-core/src/evm/hooks/async/drop.ts",
															"line": 782,
															"character": 6,
															"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/drop.ts#L782"
														}
													],
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/.pnpm/@ethersproject+abstract-provider@5.7.0/node_modules/@ethersproject/abstract-provider/src.ts/index.ts",
															"qualifiedName": "TransactionReceipt"
														},
														"name": "providers.TransactionReceipt",
														"package": "@ethersproject/abstract-provider",
														"qualifiedName": "TransactionReceipt"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														517,
														516
													]
												}
											],
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/async/drop.ts",
													"line": 781,
													"character": 4,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/drop.ts#L781"
												}
											]
										}
									},
									{
										"type": "literal",
										"value": "data"
									}
								],
								"name": "Omit",
								"package": "typescript"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							},
							{
								"type": "reference",
								"target": 1169,
								"name": "RevealLazyMintInput",
								"package": "@thirdweb-dev/react-core"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseMutationResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 869,
			"name": "useRevokeRole",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/roles.ts",
					"line": 464,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/roles.ts#L464"
				}
			],
			"signatures": [
				{
					"id": 870,
					"name": "useRevokeRole",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for revoking a wallet address from a role on a smart contract.\n\nAvailable to use on contracts that implement ["
							},
							{
								"kind": "code",
								"text": "`Permissions`"
							},
							{
								"kind": "text",
								"text": "](https://portal.thirdweb.com/contracts/build/extensions/general/Permissions) interface\n\nThe wallet address that initiates this transaction must have the relevant permissions on the contract to remove the role from the wallet address (typically "
							},
							{
								"kind": "code",
								"text": "`\"admin\"`"
							},
							{
								"kind": "text",
								"text": " level required).\n\n"
							},
							{
								"kind": "code",
								"text": "```jsx\nimport { useContract, useRevokeRole, Web3Button } from \"@thirdweb-dev/react\";\n\n// Your smart contract address (must implement permission controls)\nconst contractAddress = \"{{contract_address}}\";\nconst walletAddress = \"{{wallet_address}}\";\n\nfunction App() {\n  // Contract must be a contract that implements the Permission Controls interface\n  const { contract } = useContract(contractAddress);\n  const { mutateAsync: revokeRole, isLoading, error } = useRevokeRole(contract);\n\n  return (\n    <Web3Button\n      contractAddress={contractAddress}\n      action={() =>\n        revokeRole({\n          role: \"admin\",\n          address: walletAddress,\n        })\n      }\n    >\n      Revoke Role\n    </Web3Button>\n  );\n}\n```"
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A mutation object to revoke a role from a member on the contract\n#### role (required)\n\nThe role to revoke from the wallet address.\n\nCan be any custom role, or a built-in role, such as:\n- "
									},
									{
										"kind": "code",
										"text": "`\"admin\"`"
									},
									{
										"kind": "text",
										"text": "\n- "
									},
									{
										"kind": "code",
										"text": "`\"transfer\"`"
									},
									{
										"kind": "text",
										"text": "\n- "
									},
									{
										"kind": "code",
										"text": "`\"minter\"`"
									},
									{
										"kind": "text",
										"text": "\n- "
									},
									{
										"kind": "code",
										"text": "`\"pauser\"`"
									},
									{
										"kind": "text",
										"text": "\n- "
									},
									{
										"kind": "code",
										"text": "`\"lister\"`"
									},
									{
										"kind": "text",
										"text": "\n- "
									},
									{
										"kind": "code",
										"text": "`\"asset\"`"
									},
									{
										"kind": "text",
										"text": "\n- "
									},
									{
										"kind": "code",
										"text": "`\"unwrap\"`"
									},
									{
										"kind": "text",
										"text": "\n- "
									},
									{
										"kind": "code",
										"text": "`\"factory\"`"
									},
									{
										"kind": "text",
										"text": "\n\n#### address\n\nThe wallet address to revoke the role from.\n\nTo use the connected wallet address, use the "
									},
									{
										"kind": "code",
										"text": "`useAddress`"
									},
									{
										"kind": "text",
										"text": " hook."
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "Permissions | PermissionsEnumerable"
									}
								]
							},
							{
								"tag": "@permissionControl",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/roles.ts",
							"line": 464,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/roles.ts#L464"
						}
					],
					"typeParameter": [
						{
							"id": 871,
							"name": "TContract",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/evm/hooks/async/roles.ts",
									"qualifiedName": "ContractWithRoles"
								},
								"name": "ContractWithRoles",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"parameters": [
						{
							"id": 872,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`SmartContract`"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": -1,
										"name": "TContract",
										"refersToTypeParameter": true
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseMutationResult"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "void"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 873,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 875,
											"name": "address",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/async/roles.ts",
													"line": 473,
													"character": 6,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/roles.ts#L473"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 874,
											"name": "role",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/async/roles.ts",
													"line": 472,
													"character": 6,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/roles.ts#L472"
												}
											],
											"type": {
												"type": "reference",
												"target": 877,
												"typeArguments": [
													{
														"type": "reference",
														"target": -1,
														"name": "TContract",
														"refersToTypeParameter": true
													}
												],
												"name": "RolesForContract",
												"package": "@thirdweb-dev/react-core"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												875,
												874
											]
										}
									],
									"sources": [
										{
											"fileName": "packages/react-core/src/evm/hooks/async/roles.ts",
											"line": 471,
											"character": 19,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/roles.ts#L471"
										}
									]
								}
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseMutationResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 952,
			"name": "useRevokeSessionKey",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/account.ts",
					"line": 243,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/account.ts#L243"
				}
			],
			"signatures": [
				{
					"id": 953,
					"name": "useRevokeSessionKey",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Revoke a session key (or signer) on the smart wallet account"
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useRevokeSessionKey } from \"@thirdweb-dev/react\";\n\n// Your ERC20 token smart contract address\nconst keyAddress = \"{{key_address}}\";\n\nconst Component = () => {\n  const { mutate: revokeSessionKey, isLoading, error } = useRevokeSessionKey();\n\n  if (error) {\n    console.error(\"failed to revoke session key\", error);\n  }\n\n  return (\n    <button disabled={isLoading} onClick={() => revokeSessionKey(keyAddress)}>\n      Revoke Session Key\n    </button>\n  );\n};\n```"
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "Account"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Mutation object to revoke a session key (or signer) on the smart wallet\n\n"
									},
									{
										"kind": "code",
										"text": "```ts\nconst { mutateAsync, isLoading, error } = useRevokeSessionKey();\n```"
									},
									{
										"kind": "text",
										"text": "\n\nThe mutation function takes an address of type "
									},
									{
										"kind": "code",
										"text": "`string`"
									},
									{
										"kind": "text",
										"text": " to remove as an admin."
									}
								]
							},
							{
								"tag": "@smartWallet",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/account.ts",
							"line": 243,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/account.ts#L243"
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseMutationResult"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../sdk/src/evm/core/types.ts",
									"qualifiedName": "TransactionResult"
								},
								"name": "TransactionResult",
								"package": "@thirdweb-dev/sdk"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						],
						"name": "UseMutationResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 847,
			"name": "useRoleMembers",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/roles.ts",
					"line": 155,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/roles.ts#L155"
				}
			],
			"signatures": [
				{
					"id": 848,
					"name": "useRoleMembers",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for getting all wallet addresses that have a specific role in a smart contract.\n\nAvailable to use on contracts that implement the ["
							},
							{
								"kind": "code",
								"text": "`Permissions`"
							},
							{
								"kind": "text",
								"text": "](https://portal.thirdweb.com/contracts/build/extensions/general/Permissions) interface."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useContract, useRoleMembers } from \"@thirdweb-dev/react\";\n\n// Your smart contract address (must implement permission controls)\nconst contractAddress = \"{{contract_address}}\";\n\nconst roleName = \"admin\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress);\n  const { data, isLoading, error } = useRoleMembers(contract, roleName);\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The hook's "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property, once loaded, is an array of wallet addresses that have the specified role"
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "Permissions"
									}
								]
							},
							{
								"tag": "@permissionControl",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/roles.ts",
							"line": 155,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/roles.ts#L155"
						}
					],
					"typeParameter": [
						{
							"id": 849,
							"name": "TContract",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/evm/hooks/async/roles.ts",
									"qualifiedName": "ContractWithRoles"
								},
								"name": "ContractWithRoles",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"parameters": [
						{
							"id": 850,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`SmartContract`"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": -1,
										"name": "TContract",
										"refersToTypeParameter": true
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						},
						{
							"id": 851,
							"name": "role",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The name of the role to get the members of\n\nCan be any custom role, or a built-in role, such as:\n- "
									},
									{
										"kind": "code",
										"text": "`\"admin\"`"
									},
									{
										"kind": "text",
										"text": "\n- "
									},
									{
										"kind": "code",
										"text": "`\"transfer\"`"
									},
									{
										"kind": "text",
										"text": "\n- "
									},
									{
										"kind": "code",
										"text": "`\"minter\"`"
									},
									{
										"kind": "text",
										"text": "\n- "
									},
									{
										"kind": "code",
										"text": "`\"pauser\"`"
									},
									{
										"kind": "text",
										"text": "\n- "
									},
									{
										"kind": "code",
										"text": "`\"lister\"`"
									},
									{
										"kind": "text",
										"text": "\n- "
									},
									{
										"kind": "code",
										"text": "`\"asset\"`"
									},
									{
										"kind": "text",
										"text": "\n- "
									},
									{
										"kind": "code",
										"text": "`\"unwrap\"`"
									},
									{
										"kind": "text",
										"text": "\n- "
									},
									{
										"kind": "code",
										"text": "`\"factory\"`"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 877,
								"typeArguments": [
									{
										"type": "reference",
										"target": -1,
										"name": "TContract",
										"refersToTypeParameter": true
									}
								],
								"name": "RolesForContract",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 334,
			"name": "useRoyaltySettings",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/contract-settings.ts",
					"line": 190,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contract-settings.ts#L190"
				}
			],
			"signatures": [
				{
					"id": 335,
					"name": "useRoyaltySettings",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for retrieving royalty settings of a smart contract.\n\nAvailable to use on contracts that implement the ["
							},
							{
								"kind": "code",
								"text": "`Royalty`"
							},
							{
								"kind": "text",
								"text": "](https://portal.thirdweb.com/contracts/build/extensions/general/Royalty) interface."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useContract, useRoyaltySettings } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress);\n  const { data, isLoading, error } = useRoyaltySettings(contract);\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The hook's "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property, once loaded, is an object with two properties:\n\n"
									},
									{
										"kind": "code",
										"text": "```ts\n{\n  seller_fee_basis_points: number;\n  fee_recipient: string;\n}\n```"
									},
									{
										"kind": "text",
										"text": "\n\n- The "
									},
									{
										"kind": "code",
										"text": "`seller_fee_basis_points`"
									},
									{
										"kind": "text",
										"text": " is the royalty amount (in basis points) that the seller\n  will receive for each token sale on secondary markets.\n- The "
									},
									{
										"kind": "code",
										"text": "`fee_recipient`"
									},
									{
										"kind": "text",
										"text": " is the wallet address that will receive the royalty payments."
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "Royalty"
									}
								]
							},
							{
								"tag": "@platformFees",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/contract-settings.ts",
							"line": 190,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contract-settings.ts#L190"
						}
					],
					"parameters": [
						{
							"id": 336,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`SmartContract`"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/contracts/index.ts",
											"qualifiedName": "ValidContractInstance"
										},
										"name": "ValidContractInstance",
										"package": "@thirdweb-dev/sdk"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "reflection",
								"declaration": {
									"id": 337,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 339,
											"name": "fee_recipient",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/async/contract-settings.ts",
													"line": 195,
													"character": 4,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contract-settings.ts#L195"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 338,
											"name": "seller_fee_basis_points",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/async/contract-settings.ts",
													"line": 194,
													"character": 4,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contract-settings.ts#L194"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												339,
												338
											]
										}
									],
									"sources": [
										{
											"fileName": "packages/react-core/src/evm/hooks/async/contract-settings.ts",
											"line": 193,
											"character": 2,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contract-settings.ts#L193"
										}
									]
								}
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 1073,
			"name": "useSDK",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/useSDK.ts",
					"line": 44,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/useSDK.ts#L44"
				}
			],
			"signatures": [
				{
					"id": 1074,
					"name": "useSDK",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook to get the instance of the "
							},
							{
								"kind": "code",
								"text": "`ThirdwebSDK`"
							},
							{
								"kind": "text",
								"text": " class being used by the "
							},
							{
								"kind": "code",
								"text": "`ThirdwebProvider`"
							},
							{
								"kind": "text",
								"text": " component.\n\nThis gives access to all of the functionality of the TypeScript SDK in your React app.\n\n- If there is a connected wallet, the SDK is instantiated from the connected wallet’s signer. Meaning all transactions are initiated from the connected wallet.\n- If there is no connected wallet, the SDK is in read-only mode on the activeChain."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```tsx\nimport { useSDK } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const sdk = useSDK();\n\n  // Now you use all of the TypeScript SDK functionality\n  // For example, deploy a new contract from the connected wallet.\n  async function deployContract() {\n    sdk?.deployer.deployNFTDrop({\n      name: \"My NFT Drop\",\n      primary_sale_recipient: \"{{wallet_address}}\",\n    });\n  }\n}\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/useSDK.ts",
							"line": 44,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/useSDK.ts#L44"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../sdk/src/evm/core/sdk.ts",
									"qualifiedName": "ThirdwebSDK"
								},
								"name": "ThirdwebSDK",
								"package": "@thirdweb-dev/sdk"
							},
							{
								"type": "intrinsic",
								"name": "undefined"
							}
						]
					}
				}
			]
		},
		{
			"id": 858,
			"name": "useSetAllRoleMembers",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/roles.ts",
					"line": 279,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/roles.ts#L279"
				}
			],
			"signatures": [
				{
					"id": 859,
					"name": "useSetAllRoleMembers",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Overwrite the list of members for specific roles"
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nconst Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: overwriteRoles,\n    isLoading,\n    error,\n  } = useSetAllRoleMembers(contract);\n\n  if (error) {\n    console.error(\"failed to overwrite roles\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => overwriteRoles({ rolesWithAddresses: { minter: [\"{{wallet_address}\"] } })}\n    >\n      Overwrite Roles\n    </button>\n  );\n};\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A mutation object to overwrite all roles on the contract"
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "Permissions"
									}
								]
							},
							{
								"tag": "@permissionControl",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/roles.ts",
							"line": 279,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/roles.ts#L279"
						}
					],
					"typeParameter": [
						{
							"id": 860,
							"name": "TContract",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/evm/hooks/async/roles.ts",
									"qualifiedName": "ContractWithRoles"
								},
								"name": "ContractWithRoles",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"parameters": [
						{
							"id": 861,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`SmartContract`"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": -1,
										"name": "TContract",
										"refersToTypeParameter": true
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseMutationResult"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "void"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							},
							{
								"type": "mapped",
								"parameter": "role",
								"parameterType": {
									"type": "intrinsic",
									"name": "any"
								},
								"templateType": {
									"type": "array",
									"elementType": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseMutationResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 1054,
			"name": "useSetAppURI",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/app.ts",
					"line": 81,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/app.ts#L81"
				}
			],
			"signatures": [
				{
					"id": 1055,
					"name": "useSetAppURI",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Set App URI of the contract"
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nconst Component = () => {\n  const {\n    mutate: useSetAppURI,\n    isLoading,\n    error,\n  } = useSetAppURI(contract);\n\n  if (error) {\n    console.error(\"failed to update appURI\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => useSetAppURI({ uri })}\n    >\n      Update App URI\n    </button>\n  );\n};\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A mutation object to update the appURI of a contract"
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "AppURI"
									}
								]
							},
							{
								"tag": "@appURI",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/app.ts",
							"line": 81,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/app.ts#L81"
						}
					],
					"parameters": [
						{
							"id": 1056,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`SmartContract`"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/contracts/index.ts",
											"qualifiedName": "ValidContractInstance"
										},
										"name": "ValidContractInstance",
										"package": "@thirdweb-dev/sdk"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseMutationResult"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Omit"
								},
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 1057,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 1059,
													"name": "data",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"sources": [
														{
															"fileName": "packages/react-core/src/evm/hooks/async/app.ts",
															"line": 87,
															"character": 6,
															"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/app.ts#L87"
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 1060,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {},
															"sources": [
																{
																	"fileName": "packages/react-core/src/evm/hooks/async/app.ts",
																	"line": 87,
																	"character": 12,
																	"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/app.ts#L87"
																}
															],
															"signatures": [
																{
																	"id": 1061,
																	"name": "__type",
																	"variant": "signature",
																	"kind": 4096,
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"target": {
																			"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
																			"qualifiedName": "Promise"
																		},
																		"typeArguments": [
																			{
																				"type": "intrinsic",
																				"name": "unknown"
																			}
																		],
																		"name": "Promise",
																		"package": "typescript"
																	}
																}
															]
														}
													}
												},
												{
													"id": 1058,
													"name": "receipt",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"sources": [
														{
															"fileName": "packages/react-core/src/evm/hooks/async/app.ts",
															"line": 86,
															"character": 6,
															"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/app.ts#L86"
														}
													],
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/.pnpm/@ethersproject+abstract-provider@5.7.0/node_modules/@ethersproject/abstract-provider/src.ts/index.ts",
															"qualifiedName": "TransactionReceipt"
														},
														"name": "providers.TransactionReceipt",
														"package": "@ethersproject/abstract-provider",
														"qualifiedName": "TransactionReceipt"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														1059,
														1058
													]
												}
											],
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/async/app.ts",
													"line": 85,
													"character": 4,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/app.ts#L85"
												}
											]
										}
									},
									{
										"type": "literal",
										"value": "data"
									}
								],
								"name": "Omit",
								"package": "typescript"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 1062,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 1063,
											"name": "uri",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/async/app.ts",
													"line": 93,
													"character": 4,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/app.ts#L93"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												1063
											]
										}
									],
									"sources": [
										{
											"fileName": "packages/react-core/src/evm/hooks/async/app.ts",
											"line": 92,
											"character": 2,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/app.ts#L92"
										}
									]
								}
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseMutationResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 315,
			"name": "useSetClaimConditions",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/claim-conditions.ts",
					"line": 828,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/claim-conditions.ts#L828"
				}
			],
			"signatures": [
				{
					"id": 316,
					"name": "useSetClaimConditions",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for setting claim conditions on a drop contract.\n\nThis is available for available for contracts that implement the \"ClaimConditions\" interface; such as [NFT Drop](https://thirdweb.com/thirdweb.eth/DropERC721), [Edition Drop](https://thirdweb.com/thirdweb.eth/DropERC1155), and [Token Drop](https://thirdweb.com/thirdweb.eth/DropERC20).\n\nWhen using an ERC1155 contract, you must also provide the token ID of the NFT you want to set claim conditions on as the second parameter to the hook."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```tsx\nimport {\n  useSetClaimConditions,\n  useContract,\n  Web3Button,\n} from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress);\n  const {\n    mutateAsync: setClaimConditions,\n    isLoading,\n    error,\n  } = useSetClaimConditions(contract);\n\n  const claimConditions = {\n    phases: [\n      {\n        metadata: {\n          name: \"Phase 1\", // The name of the phase\n        },\n        currencyAddress: \"0x...\", // The address of the currency you want users to pay in\n        price: 1, // The price of the token in the currency specified above\n        maxClaimablePerWallet: 1, // The maximum number of tokens a wallet can claim\n        maxClaimableSupply: 100, // The total number of tokens that can be claimed in this phase\n        startTime: new Date(), // When the phase starts (i.e. when users can start claiming tokens)\n        waitInSeconds: 60 * 60 * 24 * 7, // The period of time users must wait between repeat claims\n        snapshot: [\n          {\n            address: \"0x...\", // The address of the wallet\n            currencyAddress: \"0x...\", // Override the currency address this wallet pays in\n            maxClaimable: 5, // Override the maximum number of tokens this wallet can claim\n            price: 0.5, // Override the price this wallet pays\n          },\n        ],\n        merkleRootHash: \"0x...\", // The merkle root hash of the snapshot\n      },\n    ],\n  }\n\n  return (\n    <Web3Button\n      contractAddress={contractAddress}\n      action={() => setClaimConditions(claimConditions)}\n    >\n      Set Claim Conditions\n    </Web3Button>\n  );\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A Mutation object to set claim conditions\n\n"
									},
									{
										"kind": "code",
										"text": "```ts\nconst { mutateAsync, isLoading, error } = useSetClaimConditions(contract);\n\nfunction setPhases(phases) {\n mutateAsync({\n   phases,\n });\n}\n\nfunction reset() {\n mutateAsync({\n   reset: true,\n })\n}\n```"
									},
									{
										"kind": "text",
										"text": "\n\n### options\n\nThe mutation function takes an object with two possible properties:\n\n1. "
									},
									{
										"kind": "code",
										"text": "`reset`"
									},
									{
										"kind": "text",
										"text": " - A boolean that determines whether to reset the claim conditions. This means you reset any previous claim conditions that existed and allow users to claim again as if the drop had just started.\n2. "
									},
									{
										"kind": "code",
										"text": "`phases`"
									},
									{
										"kind": "text",
										"text": " - An array of claim phases that occur in chronological order. You can only have one phase occur at a time. All properties of a phase are optional, with the default being a free, open, unlimited claim, in the native currency, starting immediately.\n\n---\n\n#### reset (optional)\n\nA boolean value that determines whether to reset the claim conditions or to keep the existing state.\n\nBy resetting them, any previous claims that were made will be ignored by the claim condition restrictions.\n\nFor example, if you had a limit of 1 token per wallet, and a user claimed a token, then you reset the claim conditions, that user will be able to claim another token.\n\nDefault value is "
									},
									{
										"kind": "code",
										"text": "`false`"
									},
									{
										"kind": "text",
										"text": ".\n\n---\n\n#### phases (required)\n\nProvide an array of phases that occur in chronological order. All properties of a phase are optional and are described below:\n\n##### metadata\n\nAn object representing the metadata of the phase. This is only for display purposes in the dashboard and isn’t used elsewhere.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\n{\n  name: string;\n}\n```"
									},
									{
										"kind": "text",
										"text": "\n\n##### currencyAddress\n\nThe address of the currency you want users to pay in.\n\nThis can be any ERC20 token value. If you want users to pay in the native currency (e.g. Ether on Ethereum), you can import the "
									},
									{
										"kind": "code",
										"text": "`NATIVE_TOKEN_ADDRESS`"
									},
									{
										"kind": "text",
										"text": " constant from "
									},
									{
										"kind": "code",
										"text": "`@thirdweb-dev/sdk`"
									},
									{
										"kind": "text",
										"text": ". The default value is "
									},
									{
										"kind": "code",
										"text": "`NATIVE_TOKEN_ADDRESS`"
									},
									{
										"kind": "text",
										"text": ".\n\n##### price\n\nThe price per token in the currency specified above. The default value is "
									},
									{
										"kind": "code",
										"text": "`0`"
									},
									{
										"kind": "text",
										"text": ".\n\n##### maxClaimablePerWallet\n\nThe maximum number of tokens a wallet can claim. The default value is "
									},
									{
										"kind": "code",
										"text": "`\"unlimited\"`"
									},
									{
										"kind": "text",
										"text": "\n\n##### maxClaimableSupply\n\nThe total number of tokens that can be claimed in this phase.\n\nFor example, if you lazy mint 1000 tokens and set the "
									},
									{
										"kind": "code",
										"text": "`maxClaimableSupply`"
									},
									{
										"kind": "text",
										"text": " to 100, then only 100 tokens will be claimable in this phase, leaving 900 tokens to be claimed in the next phases (if you have any).\n\nThis is useful for \"early bird\" use cases, where you allow users to claim a limited number of tokens at a discounted price during the first X amount of time.\n\n##### startTime\n\nWhen the phase starts (i.e. when users can start claiming tokens).\n\nThe default value is "
									},
									{
										"kind": "code",
										"text": "`\"immediately\"`"
									},
									{
										"kind": "text",
										"text": ".\n\n##### waitInSeconds\n\nThe amount of time between claims a wallet must wait before they can claim again.\n\nThe default value is "
									},
									{
										"kind": "code",
										"text": "`0`"
									},
									{
										"kind": "text",
										"text": ", meaning users can claim again immediately after claiming.\n\n##### snapshot\n\nA list of wallets that you want to override the default claim conditions for.\n\nWallet addresses within this list can be set to pay in a different currency, have a different price, and have a different maximum claimable amount.\n\n"
									},
									{
										"kind": "code",
										"text": "```jsx\n{\n  address: string;\n  currencyAddress?: string;\n  maxClaimable?: number;\n  price?: number;\n}\n```"
									},
									{
										"kind": "text",
										"text": "\n\n[Learn more about improving claim conditions](https://blog.thirdweb.com/announcing-improved-claim-conditions/)\n\n##### merkleRootHash\n\nIf you want to provide your own merkle tree for your snapshot, provide the merkle root hash here. This is only recommended for advanced use cases."
									}
								]
							},
							{
								"tag": "@claimConditions",
								"content": []
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "ERC20ClaimPhasesV2 | ERC20ClaimPhasesV1 | ERC20ClaimConditionsV2 | ERC20ClaimConditionsV1 | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1 | ERC1155ClaimPhasesV2 | ERC1155ClaimPhasesV1 | ERC1155ClaimConditionsV2 | ERC1155ClaimConditionsV1"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/claim-conditions.ts",
							"line": 828,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/claim-conditions.ts#L828"
						}
					],
					"parameters": [
						{
							"id": 317,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "DropContract",
										"target": 1162,
										"tsLinkText": ""
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 1162,
										"name": "DropContract",
										"package": "@thirdweb-dev/react-core"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						},
						{
							"id": 318,
							"name": "tokenId",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts",
									"qualifiedName": "BigNumberish"
								},
								"name": "BigNumberish",
								"package": "@ethersproject/bignumber"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseMutationResult"
						},
						"typeArguments": [
							{
								"type": "reflection",
								"declaration": {
									"id": 319,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 320,
											"name": "receipt",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/async/claim-conditions.ts",
													"line": 832,
													"character": 4,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/claim-conditions.ts#L832"
												}
											],
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/.pnpm/@ethersproject+abstract-provider@5.7.0/node_modules/@ethersproject/abstract-provider/src.ts/index.ts",
													"qualifiedName": "TransactionReceipt"
												},
												"name": "providers.TransactionReceipt",
												"package": "@ethersproject/abstract-provider",
												"qualifiedName": "TransactionReceipt"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												320
											]
										}
									],
									"sources": [
										{
											"fileName": "packages/react-core/src/evm/hooks/async/claim-conditions.ts",
											"line": 832,
											"character": 2,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/claim-conditions.ts#L832"
										}
									]
								}
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							},
							{
								"type": "reference",
								"target": 279,
								"name": "SetClaimConditionsParams",
								"package": "@thirdweb-dev/react-core"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseMutationResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 93,
			"name": "useSetConnectedWallet",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/core/hooks/wallet-hooks.ts",
					"line": 470,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/hooks/wallet-hooks.ts#L470"
				}
			],
			"signatures": [
				{
					"id": 94,
					"name": "useSetConnectedWallet",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for setting a wallet instance as \"connected\" - once done, the wallet connection hooks like "
							},
							{
								"kind": "code",
								"text": "`useWallet`"
							},
							{
								"kind": "text",
								"text": ", "
							},
							{
								"kind": "code",
								"text": "`useAddress`"
							},
							{
								"kind": "text",
								"text": ", "
							},
							{
								"kind": "code",
								"text": "`useSigner`"
							},
							{
								"kind": "text",
								"text": ", "
							},
							{
								"kind": "code",
								"text": "`useConnectionStatus`"
							},
							{
								"kind": "text",
								"text": " etc will return the data for that wallet instance\n\nThis is only useful if you are manually connecting a wallet instance as mentioned in [Build your Wallet](https://portal.thirdweb.com/wallet-sdk/v2/build)"
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nimport {\n  useCreateWalletInstance,\n  useSetConnectionStatus,\n  useSetConnectedWallet,\n  metamaskWallet\n} from \"@thirdweb-dev/react\";\n\nconst walletConfig = metamaskWallet();\n\nfunction Example() {\n  const createWalletInstance = useCreateWalletInstance();\n  const setConnectionStatus = useSetConnectionStatus();\n  const setConnectedWallet = useSetConnectedWallet();\n\n  // Call this function to connect your wallet\n  const handleConnect = async () => {\n    // 1. create instance\n    const walletInstance = createWalletInstance(walletConfig);\n    setConnectionStatus(\"connecting\");\n\n    try {\n      // 2. Call `connect` method of your wallet\n      await walletInstance.connect(\n        connectOptions, // if your wallet.connect method accepts any options, specify it here\n      );\n\n      // 3. Set connected wallet\n      setConnectedWallet(walletInstance);\n      props.close();\n    } catch (e) {\n      setConnectionStatus(\"disconnected\");\n      console.error(\"failed to connect\", e);\n    }\n  };\n\n  return <div> ... </div>;\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A function to set a wallet instance as \"connected\"."
									}
								]
							},
							{
								"tag": "@walletConnection",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/core/hooks/wallet-hooks.ts",
							"line": 470,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/hooks/wallet-hooks.ts#L470"
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 95,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/providers/thirdweb-wallet-provider.tsx",
									"line": 109,
									"character": 22,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/providers/thirdweb-wallet-provider.tsx#L109"
								}
							],
							"signatures": [
								{
									"id": 96,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/react-core/src/core/providers/thirdweb-wallet-provider.tsx",
											"line": 109,
											"character": 22,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/providers/thirdweb-wallet-provider.tsx#L109"
										}
									],
									"parameters": [
										{
											"id": 97,
											"name": "wallet",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 232,
												"name": "WalletInstance",
												"package": "@thirdweb-dev/react-core"
											}
										},
										{
											"id": 98,
											"name": "params",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../wallets/src/evm/interfaces/connector.ts",
													"qualifiedName": "ConnectParams"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "Record"
														},
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "any"
															}
														],
														"name": "Record",
														"package": "typescript"
													}
												],
												"name": "ConnectParams",
												"package": "@thirdweb-dev/wallets"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 88,
			"name": "useSetConnectionStatus",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/core/hooks/wallet-hooks.ts",
					"line": 340,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/hooks/wallet-hooks.ts#L340"
				}
			],
			"signatures": [
				{
					"id": 89,
					"name": "useSetConnectionStatus",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for setting the "
							},
							{
								"kind": "code",
								"text": "`connectionStatus`"
							},
							{
								"kind": "text",
								"text": " of the wallet which is returned by the "
							},
							{
								"kind": "code",
								"text": "`useConnectionStatus`"
							},
							{
								"kind": "text",
								"text": " hook\n\nThis is only useful if you are manually connecting a wallet instance as mentioned in [Build your Wallet](https://portal.thirdweb.com/wallet-sdk/v2/build)"
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nimport {\n  useCreateWalletInstance,\n  useSetConnectionStatus,\n  useSetConnectedWallet,\n  metamaskWallet\n} from \"@thirdweb-dev/react\";\n\nconst walletConfig = metamaskWallet();\n\nfunction Example() {\n  const createWalletInstance = useCreateWalletInstance();\n  const setConnectionStatus = useSetConnectionStatus();\n  const setConnectedWallet = useSetConnectedWallet();\n\n  // Call this function to connect your wallet\n  const handleConnect = async () => {\n    // 1. create instance\n    const walletInstance = createWalletInstance(walletConfig);\n    setConnectionStatus(\"connecting\");\n\n    try {\n      // 2. Call `connect` method of your wallet\n      await walletInstance.connect(\n        connectOptions, // if your wallet.connect method accepts any options, specify it here\n      );\n\n      // 3. Set connected wallet\n      setConnectedWallet(walletInstance);\n      props.close();\n    } catch (e) {\n      setConnectionStatus(\"disconnected\");\n      console.error(\"failed to connect\", e);\n    }\n  };\n\n  return <div> ... </div>;\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A function that sets the "
									},
									{
										"kind": "code",
										"text": "`connectionStatus`"
									},
									{
										"kind": "text",
										"text": " of the wallet"
									}
								]
							},
							{
								"tag": "@walletConnection",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/core/hooks/wallet-hooks.ts",
							"line": 340,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/hooks/wallet-hooks.ts#L340"
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 90,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/providers/thirdweb-wallet-provider.tsx",
									"line": 100,
									"character": 23,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/providers/thirdweb-wallet-provider.tsx#L100"
								}
							],
							"signatures": [
								{
									"id": 91,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/react-core/src/core/providers/thirdweb-wallet-provider.tsx",
											"line": 100,
											"character": 23,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/providers/thirdweb-wallet-provider.tsx#L100"
										}
									],
									"parameters": [
										{
											"id": 92,
											"name": "status",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 107,
												"name": "ConnectionStatus",
												"package": "@thirdweb-dev/react-core"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 834,
			"name": "useSharedMetadata",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/nft.ts",
					"line": 469,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/nft.ts#L469"
				}
			],
			"signatures": [
				{
					"id": 835,
					"name": "useSharedMetadata",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Get the shared metadata of an Open Edition NFT contract"
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```javascript\nconst { data: sharedMetadata, isLoading, error } = useSharedMetadata(contract);\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Query result object that includes the shared metadata of the contract"
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "ERC721SharedMetadata"
									}
								]
							},
							{
								"tag": "@nft",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/nft.ts",
							"line": 469,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/nft.ts#L469"
						}
					],
					"parameters": [
						{
							"id": 836,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`NFTContract`"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 1134,
										"name": "NFTContract",
										"package": "@thirdweb-dev/react-core"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "union",
								"types": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/core/schema/nft.ts",
											"qualifiedName": "BasicNFTInput"
										},
										"name": "BasicNFTInput",
										"package": "@thirdweb-dev/sdk"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 1043,
			"name": "useSigner",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/useSigner.ts",
					"line": 25,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/useSigner.ts#L25"
				}
			],
			"signatures": [
				{
					"id": 1044,
					"name": "useSigner",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for getting the [ethers signer](https://docs.ethers.org/v5/api/signer/) of the connected wallet."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useSigner, Web3Button } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const signer = useSigner();\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "code",
										"text": "`Signer`"
									},
									{
										"kind": "text",
										"text": " if wallet is connected, otherwise "
									},
									{
										"kind": "code",
										"text": "`undefined`"
									},
									{
										"kind": "text",
										"text": "."
									}
								]
							},
							{
								"tag": "@walletConnection",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/useSigner.ts",
							"line": 25,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/useSigner.ts#L25"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/@ethersproject+abstract-signer@5.7.0/node_modules/@ethersproject/abstract-signer/src.ts/index.ts",
									"qualifiedName": "Signer"
								},
								"name": "Signer",
								"package": "@ethersproject/abstract-signer"
							},
							{
								"type": "intrinsic",
								"name": "undefined"
							}
						]
					}
				}
			]
		},
		{
			"id": 1029,
			"name": "useStorage",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/storage/useStorage.ts",
					"line": 47,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/storage/useStorage.ts#L47"
				}
			],
			"signatures": [
				{
					"id": 1030,
					"name": "useStorage",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Get the instance of the "
							},
							{
								"kind": "code",
								"text": "`ThirdwebStorage`"
							},
							{
								"kind": "text",
								"text": " class being used by the "
							},
							{
								"kind": "code",
								"text": "`ThirdwebProvider`"
							},
							{
								"kind": "text",
								"text": "\n\nAllows you to use the TypeScript SDK functionality of [Storage](https://portal.thirdweb.com/infrastructure/storage/overview) in your React app."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useStorage } from \"@thirdweb-dev/react\";\n\nexport default function Component() {\n  const storage = useStorage();\n\n  // Now you can use the functionality of the ThirdwebStorage class:\n  storage?.download(); // Download a file from IPFS\n  storage?.upload(); // Upload a file to IPFS\n}\n```"
									}
								]
							},
							{
								"tag": "@remarks",
								"content": [
									{
										"kind": "text",
										"text": "### API Key\n\nYou will require an API key to use thirdweb’s storage services with the SDK. If you haven’t created a key yet you can do so for free from the [**thirdweb dashboard**](https://thirdweb.com/create-api-key).\n\nYou can then obtain a "
									},
									{
										"kind": "code",
										"text": "`clientId`"
									},
									{
										"kind": "text",
										"text": " from the API key which you will need to pass to the "
									},
									{
										"kind": "code",
										"text": "`ThirdwebProvider`"
									},
									{
										"kind": "text",
										"text": " component:\n\n\n"
									},
									{
										"kind": "code",
										"text": "```jsx\nimport { ThirdwebProvider } from \"@thirdweb-dev/react\";\n\nconst App = () => {\n  return (\n    <ThirdwebProvider clientId=\"YOUR_CLIENT_ID\">\n      <YourApp />\n    </ThirdwebProvider>\n  );\n};\n```"
									},
									{
										"kind": "text",
										"text": "\n\nStorage can also be configured using the "
									},
									{
										"kind": "code",
										"text": "`storageInterface`"
									},
									{
										"kind": "text",
										"text": " prop on "
									},
									{
										"kind": "code",
										"text": "`ThirdwebProvider`"
									}
								]
							},
							{
								"tag": "@storage",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/storage/useStorage.ts",
							"line": 47,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/storage/useStorage.ts#L47"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../storage/src/core/storage.ts",
									"qualifiedName": "ThirdwebStorage"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../storage/src/types/upload.ts",
											"qualifiedName": "IpfsUploadBatchOptions"
										},
										"name": "IpfsUploadBatchOptions",
										"package": "@thirdweb-dev/storage"
									}
								],
								"name": "ThirdwebStorage",
								"package": "@thirdweb-dev/storage"
							}
						]
					}
				}
			]
		},
		{
			"id": 1031,
			"name": "useStorageUpload",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/storage/useStorageUpload.ts",
					"line": 119,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/storage/useStorageUpload.ts#L119"
				}
			],
			"signatures": [
				{
					"id": 1032,
					"name": "useStorageUpload",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for uploading files to IPFS and retrieving the IPFS URI."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useStorageUpload } from \"@thirdweb-dev/react\";\n\nexport default function Component() {\n  const { mutateAsync: upload, isLoading } = useStorageUpload();\n\n  async function uploadData() {\n    const filesToUpload = [...];\n    const uris = await upload({ data: files });\n    console.log(uris);\n  }\n\n  return (\n    <button onClick={uploadData}>\n      Upload\n    </button>\n  )\n}\n```"
									}
								]
							},
							{
								"tag": "@remarks",
								"content": [
									{
										"kind": "text",
										"text": "### API key\n\nYou will require an API key to use thirdweb’s storage services with the SDK. If you haven’t created a key yet you can do so for free from the [**thirdweb dashboard**](https://thirdweb.com/create-api-key).\n\nYou can then obtain a "
									},
									{
										"kind": "code",
										"text": "`clientId`"
									},
									{
										"kind": "text",
										"text": " from the API key which you will need to pass to the ["
									},
									{
										"kind": "code",
										"text": "`ThirdwebProvider`"
									},
									{
										"kind": "text",
										"text": "](/react/react.thirdwebprovider) component:\n\n"
									},
									{
										"kind": "code",
										"text": "```jsx\nimport { ThirdwebProvider } from \"@thirdweb/react\";\n\nconst App = () => {\n  return (\n    <ThirdwebProvider clientId=\"YOUR_CLIENT_ID\">\n      <YourApp />\n    </ThirdwebProvider>\n  );\n};\n```"
									}
								]
							},
							{
								"tag": "@storage",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/storage/useStorageUpload.ts",
							"line": 119,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/storage/useStorageUpload.ts#L119"
						}
					],
					"typeParameter": [
						{
							"id": 1033,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../storage/src/types/upload.ts",
									"qualifiedName": "UploadOptions"
								},
								"name": "UploadOptions",
								"package": "@thirdweb-dev/storage"
							},
							"default": {
								"type": "reference",
								"target": {
									"sourceFileName": "../storage/src/types/upload.ts",
									"qualifiedName": "IpfsUploadBatchOptions"
								},
								"name": "IpfsUploadBatchOptions",
								"package": "@thirdweb-dev/storage"
							}
						}
					],
					"parameters": [
						{
							"id": 1034,
							"name": "uploadOptions",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "reference",
								"target": -1,
								"name": "T",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseMutationResult"
						},
						"typeArguments": [
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "src/evm/hooks/storage/useStorageUpload.ts",
									"qualifiedName": "StorageUploadOptions"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": -1,
										"name": "T",
										"refersToTypeParameter": true
									}
								],
								"name": "StorageUploadOptions",
								"package": "@thirdweb-dev/react-core"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseMutationResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 1045,
			"name": "useSupportedChains",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/useSupportedChains.ts",
					"line": 11,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/useSupportedChains.ts#L11"
				}
			],
			"signatures": [
				{
					"id": 1046,
					"name": "useSupportedChains",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook to get the "
							},
							{
								"kind": "code",
								"text": "`supportedChains`"
							},
							{
								"kind": "text",
								"text": " which returns the array passed to the "
							},
							{
								"kind": "code",
								"text": "`supportedChains`"
							},
							{
								"kind": "text",
								"text": " prop of the "
							},
							{
								"kind": "code",
								"text": "`ThirdwebProvider`"
							},
							{
								"kind": "text",
								"text": " or the default supported chains if not specified.\n\nIf "
							},
							{
								"kind": "code",
								"text": "`activeChain`"
							},
							{
								"kind": "text",
								"text": " is set in the "
							},
							{
								"kind": "code",
								"text": "`ThirdwebProvider`"
							},
							{
								"kind": "text",
								"text": " then it is also added to the "
							},
							{
								"kind": "code",
								"text": "`supportedChains`"
							},
							{
								"kind": "text",
								"text": " array"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/useSupportedChains.ts",
							"line": 11,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/useSupportedChains.ts#L11"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": {
								"sourceFileName": "../chains/src/types.ts",
								"qualifiedName": "Chain"
							},
							"name": "Chain",
							"package": "@thirdweb-dev/chains"
						}
					}
				}
			]
		},
		{
			"id": 982,
			"name": "useSwitchAccount",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/auth/useSwitchAccount.ts",
					"line": 22,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/auth/useSwitchAccount.ts#L22"
				}
			],
			"signatures": [
				{
					"id": 983,
					"name": "useSwitchAccount",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook to switch the account of the active wallet"
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nconst { switchAccount, isLoading } = useSwitchAccount();\n\nconst handleSwitchAccount = async (address: string) => {\n await switchAccount(address);\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A function to invoke to switch account and a boolean to indicate if it is in progress"
									}
								]
							},
							{
								"tag": "@auth",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/auth/useSwitchAccount.ts",
							"line": 22,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/auth/useSwitchAccount.ts#L22"
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 984,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"children": [
								{
									"id": 986,
									"name": "isLoading",
									"variant": "declaration",
									"kind": 1024,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/react-core/src/evm/hooks/auth/useSwitchAccount.ts",
											"line": 54,
											"character": 4,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/auth/useSwitchAccount.ts#L54"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "switchAccount.isLoading"
								},
								{
									"id": 985,
									"name": "switchAccount",
									"variant": "declaration",
									"kind": 1024,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/react-core/src/evm/hooks/auth/useSwitchAccount.ts",
											"line": 53,
											"character": 4,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/auth/useSwitchAccount.ts#L53"
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
											"qualifiedName": "UseMutateAsyncFunction"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											},
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "UseMutateAsyncFunction",
										"package": "@tanstack/react-query"
									},
									"defaultValue": "switchAccount.mutateAsync"
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										986,
										985
									]
								}
							],
							"sources": [
								{
									"fileName": "packages/react-core/src/evm/hooks/auth/useSwitchAccount.ts",
									"line": 52,
									"character": 9,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/auth/useSwitchAccount.ts#L52"
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 79,
			"name": "useSwitchChain",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/core/hooks/wallet-hooks.ts",
					"line": 411,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/hooks/wallet-hooks.ts#L411"
				}
			],
			"signatures": [
				{
					"id": 80,
					"name": "useSwitchChain",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for switching to a different network."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useSwitchChain } from \"@thirdweb-dev/react\";\nimport { Goerli } from \"@thirdweb-dev/chains\";\n\nfunction App() {\n  const switchChain = useSwitchChain();\n  return (\n    <button onClick={() => switchChain(Goerli.chainId)}>\n      Switch to Goerli\n    </button>\n  );\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A function to switch the network in the currently connected wallet to network with given "
									},
									{
										"kind": "code",
										"text": "`chainId`"
									}
								]
							},
							{
								"tag": "@networkConnection",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/core/hooks/wallet-hooks.ts",
							"line": 411,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/hooks/wallet-hooks.ts#L411"
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 81,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/react-core/src/core/providers/thirdweb-wallet-provider.tsx",
									"line": 106,
									"character": 15,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/providers/thirdweb-wallet-provider.tsx#L106"
								}
							],
							"signatures": [
								{
									"id": 82,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/react-core/src/core/providers/thirdweb-wallet-provider.tsx",
											"line": 106,
											"character": 15,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/providers/thirdweb-wallet-provider.tsx#L106"
										}
									],
									"parameters": [
										{
											"id": 83,
											"name": "chain",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 889,
			"name": "useTokenBalance",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/token.ts",
					"line": 108,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/token.ts#L108"
				}
			],
			"signatures": [
				{
					"id": 890,
					"name": "useTokenBalance",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for fetching the balance a wallet has for a specific ERC20 token.\n\n__This hook is for _custom_ ERC20 tokens. For native tokens such as Ether, use "
							},
							{
								"kind": "code",
								"text": "`useBalance`"
							},
							{
								"kind": "text",
								"text": " or "
							},
							{
								"kind": "code",
								"text": "`useBalanceForAddress`"
							},
							{
								"kind": "text",
								"text": "__\n\nAvailable to use on contracts that implement the ERC20 interface."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useTokenBalance, useContract } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress, \"token\");\n  const { data, isLoading, error } = useTokenBalance(contract, walletAddress);\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Hook's "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " object includes the token balance for given wallet address"
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "ERC20"
									}
								]
							},
							{
								"tag": "@token",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/token.ts",
							"line": 108,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/token.ts#L108"
						}
					],
					"parameters": [
						{
							"id": 891,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`TokenContract`"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 1135,
										"name": "TokenContract",
										"package": "@thirdweb-dev/react-core"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						},
						{
							"id": 892,
							"name": "walletAddress",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "reflection",
								"declaration": {
									"id": 893,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 897,
											"name": "decimals",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/async/token.ts",
													"line": 116,
													"character": 4,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/token.ts#L116"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 898,
											"name": "displayValue",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/async/token.ts",
													"line": 117,
													"character": 4,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/token.ts#L117"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 896,
											"name": "name",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/async/token.ts",
													"line": 115,
													"character": 4,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/token.ts#L115"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 894,
											"name": "symbol",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/async/token.ts",
													"line": 113,
													"character": 4,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/token.ts#L113"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 895,
											"name": "value",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/async/token.ts",
													"line": 114,
													"character": 4,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/token.ts#L114"
												}
											],
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts",
													"qualifiedName": "BigNumber"
												},
												"name": "BigNumber",
												"package": "@ethersproject/bignumber"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												897,
												898,
												896,
												894,
												895
											]
										}
									],
									"sources": [
										{
											"fileName": "packages/react-core/src/evm/hooks/async/token.ts",
											"line": 112,
											"character": 2,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/token.ts#L112"
										}
									]
								}
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 899,
			"name": "useTokenDecimals",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/token.ts",
					"line": 165,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/token.ts#L165"
				}
			],
			"signatures": [
				{
					"id": 900,
					"name": "useTokenDecimals",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for fetching the [decimals](https://docs.openzeppelin.com/contracts/3.x/erc20#a-note-on-decimals)\nof an [ERC20](https://portal.thirdweb.com/contracts/build/extensions/erc-20/ERC20) token.\n\nTokens usually opt for a value of "
							},
							{
								"kind": "code",
								"text": "`18`"
							},
							{
								"kind": "text",
								"text": ", imitating the relationship between Ether and Wei.\nTherefore, "
							},
							{
								"kind": "code",
								"text": "`18`"
							},
							{
								"kind": "text",
								"text": " is the default value returned by this function, unless your ERC20 contract explicitly overrides it."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useTokenDecimals, useContract } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress, \"token\");\n  const { data, isLoading, error } = useTokenDecimals(contract);\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The hook's "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property, once loaded, contains the "
									},
									{
										"kind": "code",
										"text": "`number`"
									},
									{
										"kind": "text",
										"text": " that represents the number of decimals of the ERC20 token."
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "ERC20"
									}
								]
							},
							{
								"tag": "@token",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/token.ts",
							"line": 165,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/token.ts#L165"
						}
					],
					"parameters": [
						{
							"id": 901,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`TokenContract`"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 1135,
										"name": "TokenContract",
										"package": "@thirdweb-dev/react-core"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 880,
			"name": "useTokenSupply",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/token.ts",
					"line": 55,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/token.ts#L55"
				}
			],
			"signatures": [
				{
					"id": 881,
					"name": "useTokenSupply",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for fetching the total supply of an ERC20 token.\n\nThis takes into account the increase and decrease in supply when tokens are minted and burned."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useTokenSupply } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress);\n  const { data, isLoading, error } = useTokenSupply(contract);\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Hook's "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " object includes the total supply of the token in the "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " property as a "
									},
									{
										"kind": "code",
										"text": "`BigNumber`"
									},
									{
										"kind": "text",
										"text": " object."
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "ERC20"
									}
								]
							},
							{
								"tag": "@token",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/token.ts",
							"line": 55,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/token.ts#L55"
						}
					],
					"parameters": [
						{
							"id": 882,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`TokenContract`"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 1135,
										"name": "TokenContract",
										"package": "@thirdweb-dev/react-core"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "reflection",
								"declaration": {
									"id": 883,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 887,
											"name": "decimals",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/async/token.ts",
													"line": 62,
													"character": 4,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/token.ts#L62"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 888,
											"name": "displayValue",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/async/token.ts",
													"line": 63,
													"character": 4,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/token.ts#L63"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 886,
											"name": "name",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/async/token.ts",
													"line": 61,
													"character": 4,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/token.ts#L61"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 884,
											"name": "symbol",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/async/token.ts",
													"line": 59,
													"character": 4,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/token.ts#L59"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 885,
											"name": "value",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/async/token.ts",
													"line": 60,
													"character": 4,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/token.ts#L60"
												}
											],
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts",
													"qualifiedName": "BigNumber"
												},
												"name": "BigNumber",
												"package": "@ethersproject/bignumber"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												887,
												888,
												886,
												884,
												885
											]
										}
									],
									"sources": [
										{
											"fileName": "packages/react-core/src/evm/hooks/async/token.ts",
											"line": 58,
											"character": 2,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/token.ts#L58"
										}
									]
								}
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 793,
			"name": "useTotalCirculatingSupply",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/nft.ts",
					"line": 279,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/nft.ts#L279"
				}
			],
			"signatures": [
				{
					"id": 794,
					"name": "useTotalCirculatingSupply",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for fetching the total number of NFTs in circulation for a given smart contract.\n\nThis takes into account the increase in supply due to minting and the decrease in supply due to burning.\n\nAvailable to use on contracts that implement either the [ERC721](https://portal.thirdweb.com/contracts/build/extensions/erc-721/ERC721)\nor [ERC1155](https://portal.thirdweb.com/contracts/build/extensions/erc-1155/ERC1155) standard."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useTotalCirculatingSupply, useContract } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress);\n  const { data, isLoading, error } = useTotalCirculatingSupply(contract);\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A "
									},
									{
										"kind": "code",
										"text": "`BigNumber`"
									},
									{
										"kind": "text",
										"text": " representing the total circulating supply."
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "ERC721Supply | ERC1155Enumerable"
									}
								]
							},
							{
								"tag": "@nft",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/nft.ts",
							"line": 279,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/nft.ts#L279"
						}
					],
					"parameters": [
						{
							"id": 795,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`NFTContract`"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 1134,
										"name": "NFTContract",
										"package": "@thirdweb-dev/react-core"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						},
						{
							"id": 796,
							"name": "tokenId",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Required for ERC1155, the tokenId to look up. This will return the total quantity of the given token ID in circulation.\n"
									},
									{
										"kind": "code",
										"text": "```ts\nimport { useTotalCirculatingSupply, useContract } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress);\n  const { data, isLoading, error } = useTotalCirculatingSupply(\n    contract,\n    \"{{token_id}}\",\n  );\n}\n```"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts",
											"qualifiedName": "BigNumberish"
										},
										"name": "BigNumberish",
										"package": "@ethersproject/bignumber"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts",
									"qualifiedName": "BigNumber"
								},
								"name": "BigNumber",
								"package": "@ethersproject/bignumber"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 789,
			"name": "useTotalCount",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/nft.ts",
					"line": 207,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/nft.ts#L207"
				}
			],
			"signatures": [
				{
					"id": 790,
					"name": "useTotalCount",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook to get the total count of **unique** NFTs minted on a smart contract.\n\nAvailable to use on smart contracts that implement the ["
							},
							{
								"kind": "code",
								"text": "`ERC721`"
							},
							{
								"kind": "text",
								"text": "](https://portal.thirdweb.com/contracts/build/extensions/erc-721/ERC721)\nor ["
							},
							{
								"kind": "code",
								"text": "`ERC1155`"
							},
							{
								"kind": "text",
								"text": "](https://portal.thirdweb.com/contracts/build/extensions/erc-1155/ERC1155) standard.\n\nWhen used for ERC1155 contracts, the total count is the number of unique token IDs minted, _not_ the total supply of all tokens in circulation."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useTotalCount, useContract } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress);\n  const { data: totalCount, isLoading, error } = useTotalCount(contract);\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A "
									},
									{
										"kind": "code",
										"text": "`BigNumber`"
									},
									{
										"kind": "text",
										"text": " that includes the total count of NFTs"
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "ERC721Supply | ERC1155Enumerable"
									}
								]
							},
							{
								"tag": "@nft",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/nft.ts",
							"line": 207,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/nft.ts#L207"
						}
					],
					"typeParameter": [
						{
							"id": 791,
							"name": "TContract",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 1134,
								"name": "NFTContract",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"parameters": [
						{
							"id": 792,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`NFTContract`"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": -1,
										"name": "TContract",
										"refersToTypeParameter": true
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts",
									"qualifiedName": "BigNumber"
								},
								"name": "BigNumber",
								"package": "@ethersproject/bignumber"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 918,
			"name": "useTransferBatchToken",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/token.ts",
					"line": 588,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/token.ts#L588"
				}
			],
			"signatures": [
				{
					"id": 919,
					"name": "useTransferBatchToken",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for transferring ERC20 tokens to multiple recipients in a single transaction (i.e. airdrop).\n\nAvailable to use on contracts that implement the [ERC20](https://portal.thirdweb.com/contracts/build/extensions/erc-20/ERC20) interface.\n\nThe wallet that initiates this transaction must have sufficient balance to cover the total amount of tokens being transferred\nand must have transfer permissions on the contract, i.e. tokens are not soulbound."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "Provide your token contract instance from the "
									},
									{
										"kind": "code",
										"text": "`useContract`"
									},
									{
										"kind": "text",
										"text": " hook to the hook.\n\nThen, provide an array of objects with the "
									},
									{
										"kind": "code",
										"text": "`to`"
									},
									{
										"kind": "text",
										"text": " and "
									},
									{
										"kind": "code",
										"text": "`amount`"
									},
									{
										"kind": "text",
										"text": " properties to the function.\n\n"
									},
									{
										"kind": "code",
										"text": "```jsx\nimport {\n  useTransferBatchToken,\n  useContract,\n  Web3Button,\n} from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress, \"token\");\n  const {\n    mutateAsync: transferBatchToken,\n    isLoading,\n    error,\n  } = useTransferBatchToken(contract);\n\n  return (\n    <Web3Button\n      contractAddress={contractAddress}\n      action={() =>\n        transferBatchToken([\n          {\n            to: \"{{wallet_address}}\", // Transfer 10 tokens to a wallet\n            amount: 10,\n          },\n          {\n            to: \"{{wallet_address}}\", // Transfer 20 tokens to another wallet\n            amount: 20,\n          },\n        ])\n      }\n    >\n      Transfer Batch Tokens\n    </Web3Button>\n  );\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A Mutation object to transfer batch tokens\n\n"
									},
									{
										"kind": "code",
										"text": "```ts\nconst { mutateAsync, isLoading, error } = useTransferBatchToken(contract);\n```"
									},
									{
										"kind": "text",
										"text": "\n\n### options\n\nThe mutation function takes an array of objects containing "
									},
									{
										"kind": "code",
										"text": "`to`"
									},
									{
										"kind": "text",
										"text": " and "
									},
									{
										"kind": "code",
										"text": "`amount`"
									},
									{
										"kind": "text",
										"text": " properties.\n\n- "
									},
									{
										"kind": "code",
										"text": "`to`"
									},
									{
										"kind": "text",
										"text": " - The wallet address to transfer tokens to. Must be a "
									},
									{
										"kind": "code",
										"text": "`string`"
									},
									{
										"kind": "text",
										"text": ".\n- "
									},
									{
										"kind": "code",
										"text": "`amount`"
									},
									{
										"kind": "text",
										"text": " - The amount of tokens to transfer. Must be a "
									},
									{
										"kind": "code",
										"text": "`number`"
									},
									{
										"kind": "text",
										"text": "."
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "ERC20"
									}
								]
							},
							{
								"tag": "@token",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/token.ts",
							"line": 588,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/token.ts#L588"
						}
					],
					"parameters": [
						{
							"id": 920,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`TokenContract`"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 1135,
										"name": "TokenContract",
										"package": "@thirdweb-dev/react-core"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseMutationResult"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Omit"
								},
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 921,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/sdk/dist/declarations/src/evm/core/classes/erc-20.d.ts",
													"line": 233,
													"character": 27
												}
											]
										}
									},
									{
										"type": "literal",
										"value": "data"
									}
								],
								"name": "Omit",
								"package": "typescript"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": 1127,
									"name": "TokenParams",
									"package": "@thirdweb-dev/react-core"
								}
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseMutationResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 816,
			"name": "useTransferNFT",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/nft.ts",
					"line": 809,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/nft.ts#L809"
				}
			],
			"signatures": [
				{
					"id": 817,
					"name": "useTransferNFT",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for transferring ERC721 or ERC1155 NFTs to another wallet address.\n\nAvailable to use on contracts that implement either the\n[ERC721](https://portal.thirdweb.com/contracts/build/extensions/erc-721/ERC721)\nand [ERC1155](https://portal.thirdweb.com/contracts/build/extensions/erc-1155/ERC1155)\ninterfaces, such as the [Edition](https://thirdweb.com/thirdweb.eth/TokenERC1155)\nor [NFT Collection](https://thirdweb.com/thirdweb.eth/TokenERC721).\n\nThe wallet address that initiates this transaction must have transfer permissions on the contract (i.e. the tokens are not soulbound).\nIt also must have the required amount of token(s) available to transfer."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useContract, useTransferNFT, Web3Button } from \"@thirdweb-dev/react\";\n\n// Your NFT collection contract address\nconst contractAddress = \"{{contract_address}}\";\nconst walletAddress = \"{{wallet_address}}\";\nconst tokenId = \"{{token_id}}\";\n\nfunction App() {\n  // Contract must be an ERC-721 or ERC-1155 contract\n  const { contract } = useContract(contractAddress);\n  const {\n    mutateAsync: transferNFT,\n    isLoading,\n    error,\n  } = useTransferNFT(contract);\n\n  return (\n    <Web3Button\n      contractAddress={contractAddress}\n      action={() =>\n        transferNFT({\n          to: walletAddress, // Address to transfer the token to\n          tokenId: tokenId, // Token ID to transfer\n        })\n      }\n    >\n      Transfer\n    </Web3Button>\n  );\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Mutation object to transfer NFTs\n\n"
									},
									{
										"kind": "code",
										"text": "```ts\nconst { mutateAsync, isLoading, error } = useTransferNFT(contract);\n```"
									},
									{
										"kind": "text",
										"text": "\n\n### options\nThe mutation function takes an object with the following properties:\n\n#### to\nThe wallet address to transfer the token(s) to.\n\nTo use the connected wallet address, use the "
									},
									{
										"kind": "code",
										"text": "`useAddress`"
									},
									{
										"kind": "text",
										"text": " hook.\n\n\n#### tokenId\nThe token ID of the NFT to transfer.\n\nCan be a "
									},
									{
										"kind": "code",
										"text": "`string`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`number`"
									},
									{
										"kind": "text",
										"text": ".\n\n#### amount (ERC1155 only)\nIf you are using an ERC1155 contract, specify the amount of tokens to transfer."
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "ERC721 | ERC1155"
									}
								]
							},
							{
								"tag": "@nft",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/nft.ts",
							"line": 809,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/nft.ts#L809"
						}
					],
					"typeParameter": [
						{
							"id": 818,
							"name": "TContract",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 1134,
								"name": "NFTContract",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"parameters": [
						{
							"id": 819,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`NFTContract`"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": -1,
										"name": "TContract",
										"refersToTypeParameter": true
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseMutationResult"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Omit"
								},
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 820,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 822,
													"name": "data",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"sources": [
														{
															"fileName": "packages/react-core/src/evm/hooks/async/nft.ts",
															"line": 815,
															"character": 6,
															"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/nft.ts#L815"
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 823,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {},
															"sources": [
																{
																	"fileName": "packages/react-core/src/evm/hooks/async/nft.ts",
																	"line": 815,
																	"character": 12,
																	"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/nft.ts#L815"
																}
															],
															"signatures": [
																{
																	"id": 824,
																	"name": "__type",
																	"variant": "signature",
																	"kind": 4096,
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"target": {
																			"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
																			"qualifiedName": "Promise"
																		},
																		"typeArguments": [
																			{
																				"type": "intrinsic",
																				"name": "unknown"
																			}
																		],
																		"name": "Promise",
																		"package": "typescript"
																	}
																}
															]
														}
													}
												},
												{
													"id": 821,
													"name": "receipt",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"sources": [
														{
															"fileName": "packages/react-core/src/evm/hooks/async/nft.ts",
															"line": 814,
															"character": 6,
															"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/nft.ts#L814"
														}
													],
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/.pnpm/@ethersproject+abstract-provider@5.7.0/node_modules/@ethersproject/abstract-provider/src.ts/index.ts",
															"qualifiedName": "TransactionReceipt"
														},
														"name": "providers.TransactionReceipt",
														"package": "@ethersproject/abstract-provider",
														"qualifiedName": "TransactionReceipt"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														822,
														821
													]
												}
											],
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/async/nft.ts",
													"line": 813,
													"character": 4,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/nft.ts#L813"
												}
											]
										}
									},
									{
										"type": "literal",
										"value": "data"
									}
								],
								"name": "Omit",
								"package": "typescript"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							},
							{
								"type": "reference",
								"target": 1137,
								"name": "TransferNFTParams",
								"package": "@thirdweb-dev/react-core"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseMutationResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 926,
			"name": "useTransferNativeToken",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/token.ts",
					"line": 503,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/token.ts#L503"
				}
			],
			"signatures": [
				{
					"id": 927,
					"name": "useTransferNativeToken",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "A hook to transfer native token (of the active chain) to another wallet"
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nconst Component = () => {\n  const {\n    mutate: transferNativeToken,\n    isLoading,\n    error,\n  } = useTransferNativeToken();\n\n  if (error) {\n    console.error(\"failed to transfer tokens\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => transferNativeToken({ to: \"{{wallet_address}}\", amount: \"0.1\" })}\n    >\n      Transfer\n    </button>\n  );\n};\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A Mutation object to transfer native tokens\n\n"
									},
									{
										"kind": "code",
										"text": "```ts\nconst { mutateAsync, isLoading, error } = useTransferNativeToken();\n```"
									},
									{
										"kind": "text",
										"text": "\n\n### options\nThe mutation function takes an object containing "
									},
									{
										"kind": "code",
										"text": "`to`"
									},
									{
										"kind": "text",
										"text": " and "
									},
									{
										"kind": "code",
										"text": "`amount`"
									},
									{
										"kind": "text",
										"text": " properties.\n\n- "
									},
									{
										"kind": "code",
										"text": "`to`"
									},
									{
										"kind": "text",
										"text": " - The wallet address to transfer tokens to. Must be a "
									},
									{
										"kind": "code",
										"text": "`string`"
									},
									{
										"kind": "text",
										"text": ".\n- "
									},
									{
										"kind": "code",
										"text": "`amount`"
									},
									{
										"kind": "text",
										"text": " - The amount of tokens to transfer. Must be a "
									},
									{
										"kind": "code",
										"text": "`number`"
									},
									{
										"kind": "text",
										"text": "."
									}
								]
							},
							{
								"tag": "@token",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/token.ts",
							"line": 503,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/token.ts#L503"
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseMutationResult"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Omit"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/core/types.ts",
											"qualifiedName": "TransactionResultWithMetadata"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "TransactionResultWithMetadata",
										"package": "@thirdweb-dev/sdk"
									},
									{
										"type": "literal",
										"value": "data"
									}
								],
								"name": "Omit",
								"package": "typescript"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							},
							{
								"type": "reference",
								"target": 1127,
								"name": "TokenParams",
								"package": "@thirdweb-dev/react-core"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseMutationResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 914,
			"name": "useTransferToken",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/token.ts",
					"line": 436,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/token.ts#L436"
				}
			],
			"signatures": [
				{
					"id": 915,
					"name": "useTransferToken",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for transferring tokens on an ERC20 contract.\n\nAvailable to use on contracts that implement the [ERC20](https://portal.thirdweb.com/contracts/build/extensions/erc-20/ERC20)\ninterface, such as the [Token](https://thirdweb.com/thirdweb.eth/TokenERC20) contract.\n\nThe wallet address that initiates this transaction must have a balance of tokens\ngreater than or equal to the amount being transferred."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useContract, useTransferToken, Web3Button } from \"@thirdweb-dev/react\";\n\nconst contractAddress = \"{{contract_address}}\";\nconst toAddress = \"{{to_address}}\";\nconst amount = \"{{amount}}\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress);\n  const {\n    mutate: transferTokens,\n    isLoading,\n    error,\n  } = useTransferToken(contract);\n\n  return (\n    <Web3Button\n      contractAddress={contractAddress}\n      action={() =>\n        transferTokens({\n          to: toAddress, // Address to transfer to\n          amount: amount, // Amount to transfer\n        })\n      }\n    >\n      Transfer\n    </Web3Button>\n  );\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A mutation object to transfer tokens\n\n"
									},
									{
										"kind": "code",
										"text": "```ts\nconst { mutateAsync, isLoading, error } = useTransferToken(contract);\n```"
									},
									{
										"kind": "text",
										"text": "\n\n### options\nThe mutation function takes an object as an argument with the following properties:\n\n#### to\nThe wallet address to transfer tokens to.\n\n#### amount\nThe quantity of tokens to transfer. Can be a "
									},
									{
										"kind": "code",
										"text": "`string`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`number`"
									},
									{
										"kind": "text",
										"text": "."
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "ERC20"
									}
								]
							},
							{
								"tag": "@token",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/token.ts",
							"line": 436,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/token.ts#L436"
						}
					],
					"parameters": [
						{
							"id": 916,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`TokenContract`"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 1135,
										"name": "TokenContract",
										"package": "@thirdweb-dev/react-core"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseMutationResult"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Omit"
								},
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 917,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/sdk/dist/declarations/src/evm/core/classes/erc-20.d.ts",
													"line": 147,
													"character": 60
												}
											]
										}
									},
									{
										"type": "literal",
										"value": "data"
									}
								],
								"name": "Omit",
								"package": "typescript"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							},
							{
								"type": "reference",
								"target": 1127,
								"name": "TokenParams",
								"package": "@thirdweb-dev/react-core"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseMutationResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 481,
			"name": "useUnclaimedNFTSupply",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/drop.ts",
					"line": 203,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/drop.ts#L203"
				}
			],
			"signatures": [
				{
					"id": 482,
					"name": "useUnclaimedNFTSupply",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for fetching the number of unclaimed NFTs from an NFT/Edition Drop contract.\n\nUnclaimed NFTs are tokens that were lazy-minted but have not yet been claimed by a user.\n\nAvailable to use on contracts that implement the ["
							},
							{
								"kind": "code",
								"text": "`LazyMint`"
							},
							{
								"kind": "text",
								"text": "](https://portal.thirdweb.com/contracts/build/extensions/general/LazyMint) extension;\nsuch as the [NFT Drop](https://thirdweb.com/thirdweb.eth/DropERC721) contract."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useUnclaimedNFTSupply, useContract } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress, \"nftDrop\");\n  const { data, isLoading, error } = useUnclaimedNFTSupply(contract);\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The hook's "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property, once loaded, contains a "
									},
									{
										"kind": "code",
										"text": "`BigNumber`"
									},
									{
										"kind": "text",
										"text": " representing the number of unclaimed NFTs."
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "ERC721LazyMintable"
									}
								]
							},
							{
								"tag": "@nftDrop",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/drop.ts",
							"line": 203,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/drop.ts#L203"
						}
					],
					"parameters": [
						{
							"id": 483,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a contract that extends the ERC721 spec (NFT drop, Signature Drop, or any custom contract that extends the ERC721 spec)"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/nft-drop.ts",
													"qualifiedName": "NFTDrop"
												},
												"name": "NFTDrop",
												"package": "@thirdweb-dev/sdk"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/signature-drop.ts",
													"qualifiedName": "SignatureDrop"
												},
												"name": "SignatureDrop",
												"package": "@thirdweb-dev/sdk"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../sdk/src/evm/contracts/smart-contract.ts",
													"qualifiedName": "SmartContract"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/.pnpm/@ethersproject+contracts@5.7.0/node_modules/@ethersproject/contracts/src.ts/index.ts",
															"qualifiedName": "BaseContract"
														},
														"name": "BaseContract",
														"package": "@ethersproject/contracts"
													}
												],
												"name": "SmartContract",
												"package": "@thirdweb-dev/sdk"
											}
										]
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts",
									"qualifiedName": "BigNumber"
								},
								"name": "BigNumber",
								"package": "@ethersproject/bignumber"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 471,
			"name": "useUnclaimedNFTs",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/drop.ts",
					"line": 87,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/drop.ts#L87"
				}
			],
			"signatures": [
				{
					"id": 472,
					"name": "useUnclaimedNFTs",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for fetching information about all NFTs that haven't been claimed yet from an NFT Drop contract.\n\nAvailable to use on contracts that extends the ERC721 spec"
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useUnclaimedNFTs, useContract } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress);\n  const { data, isLoading, error } = useUnclaimedNFTs(contract);\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The hook's "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property, once loaded, contains an array of "
									},
									{
										"kind": "code",
										"text": "`NFT`"
									},
									{
										"kind": "text",
										"text": " objects."
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "ERC721LazyMintable"
									}
								]
							},
							{
								"tag": "@nftDrop",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/drop.ts",
							"line": 87,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/drop.ts#L87"
						}
					],
					"parameters": [
						{
							"id": 473,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a contract that extends the ERC721 spec (NFT drop, Signature Drop, or any custom contract that extends the ERC721 spec)"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/nft-drop.ts",
											"qualifiedName": "NFTDrop"
										},
										"name": "NFTDrop",
										"package": "@thirdweb-dev/sdk"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						},
						{
							"id": 474,
							"name": "queryParams",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "query params to pass to the query for the sake of pagination\nBy default, the hook returns the first 100 unclaimed NFTs from the contract.\n\nPaginate the results by providing a "
									},
									{
										"kind": "code",
										"text": "`queryParams`"
									},
									{
										"kind": "text",
										"text": " object as the second argument.\n\n"
									},
									{
										"kind": "code",
										"text": "```jsx\nimport { useUnclaimedNFTs, useContract } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress);\n  const { data, isLoading, error } = useUnclaimedNFTs(\n    contract,\n    {\n      count: 10, // Limit the number of results\n      start: 0, // Start from the nth result (useful for pagination)\n    },\n  );\n}\n```"
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 475,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/sdk/dist/declarations/src/core/schema/QueryParams.d.ts",
											"line": 12,
											"character": 3
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"sourceFileName": "../sdk/src/core/schema/nft.ts",
										"qualifiedName": "NFTMetadata"
									},
									"name": "NFTMetadata",
									"package": "@thirdweb-dev/sdk"
								}
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 363,
			"name": "useUpdateMetadata",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/contract-settings.ts",
					"line": 580,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contract-settings.ts#L580"
				}
			],
			"signatures": [
				{
					"id": 364,
					"name": "useUpdateMetadata",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for updating the metadata of a smart contract.\n\nAvailable to use on smart contracts that implement the "
							},
							{
								"kind": "code",
								"text": "`ContractMetadata`"
							},
							{
								"kind": "text",
								"text": " interface.\n\nThe wallet initiating this transaction must have the required permissions to update the metadata, ("
							},
							{
								"kind": "code",
								"text": "`admin`"
							},
							{
								"kind": "text",
								"text": " permissions required by default).\n\nProvide your contract instance from the "
							},
							{
								"kind": "code",
								"text": "`useContract`"
							},
							{
								"kind": "text",
								"text": " hook as the first argument, and\nan object fitting the [contract-level metadata standards](https://docs.opensea.io/docs/contract-level-metadata) of\nthe new metadata as the second argument, including:\n\n- "
							},
							{
								"kind": "code",
								"text": "`name`"
							},
							{
								"kind": "text",
								"text": ": A "
							},
							{
								"kind": "code",
								"text": "`string`"
							},
							{
								"kind": "text",
								"text": " for the name of the smart contract (required).\n- "
							},
							{
								"kind": "code",
								"text": "`description`"
							},
							{
								"kind": "text",
								"text": ": A "
							},
							{
								"kind": "code",
								"text": "`string`"
							},
							{
								"kind": "text",
								"text": " to describe the smart contract (optional).\n- "
							},
							{
								"kind": "code",
								"text": "`image`"
							},
							{
								"kind": "text",
								"text": ": A "
							},
							{
								"kind": "code",
								"text": "`string`"
							},
							{
								"kind": "text",
								"text": " or "
							},
							{
								"kind": "code",
								"text": "`File`"
							},
							{
								"kind": "text",
								"text": " object containing the URL or file data of an image to associate with the contract (optional).\n- "
							},
							{
								"kind": "code",
								"text": "`external_link`"
							},
							{
								"kind": "text",
								"text": ": A "
							},
							{
								"kind": "code",
								"text": "`string`"
							},
							{
								"kind": "text",
								"text": " containing a URL to view the smart contract on your website (optional)."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport {\n  useUpdateMetadata,\n  useContract,\n  Web3Button,\n} from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress);\n  const {\n    mutateAsync: updateMetadata,\n    isLoading,\n    error,\n  } = useUpdateMetadata(contract);\n\n  return (\n    <Web3Button\n      contractAddress={contractAddress}\n      action={() =>\n        updateMetadata({\n          name: \"My App\",\n          description: \"My awesome Ethereum App\",\n          image: \"/path/to/image.jpg\", // URL, URI, or File object\n          external_link: \"https://myapp.com\",\n        })\n      }\n    >\n      Update Metadata\n    </Web3Button>\n  );\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Mutation object that to update the metadata"
									}
								]
							},
							{
								"tag": "@metadata",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/contract-settings.ts",
							"line": 580,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contract-settings.ts#L580"
						}
					],
					"parameters": [
						{
							"id": 365,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`SmartContract`"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/contracts/index.ts",
											"qualifiedName": "ValidContractInstance"
										},
										"name": "ValidContractInstance",
										"package": "@thirdweb-dev/sdk"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseMutationResult"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "any"
							},
							{
								"type": "intrinsic",
								"name": "any"
							},
							{
								"type": "intrinsic",
								"name": "any"
							}
						],
						"name": "UseMutationResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 353,
			"name": "useUpdatePlatformFees",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/contract-settings.ts",
					"line": 433,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contract-settings.ts#L433"
				}
			],
			"signatures": [
				{
					"id": 354,
					"name": "useUpdatePlatformFees",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for updating platform fees on a smart contract.\n\nAvailable to use on smart contracts that implement the ["
							},
							{
								"kind": "code",
								"text": "`PlatformFee`"
							},
							{
								"kind": "text",
								"text": "](https://portal.thirdweb.com/contracts/build/extensions/general/PlatformFee) interface.\n\n"
							},
							{
								"kind": "code",
								"text": "```jsx\nimport {\n  useUpdatePlatformFees,\n  useContract,\n  Web3Button,\n} from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress);\n  const {\n    mutateAsync: updatePlatformFees,\n    isLoading,\n    error,\n  } = useUpdatePlatformFees(contract);\n\n  return (\n    <Web3Button\n      contractAddress={contractAddress}\n      action={() =>\n        updatePlatformFees({\n          platform_fee_basis_points: 0,\n          fee_recipient: \"{{wallet_address}}\",\n        })\n      }\n    >\n      Update Platform Fees\n    </Web3Button>\n  );\n}\n```"
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A mutation object to update the platform fees settings\n\n"
									},
									{
										"kind": "code",
										"text": "```ts\nconst { mutateAsync, isLoading, error } = useUpdatePlatformFees(contract);\n```"
									},
									{
										"kind": "text",
										"text": "\n\n### options\n\nThe mutation function takes an object with below properties:\n\n#### platform_fee_basis_points\n\nThe "
									},
									{
										"kind": "code",
										"text": "`platform_fee_basis_points`"
									},
									{
										"kind": "text",
										"text": " property is a "
									},
									{
										"kind": "code",
										"text": "`number`"
									},
									{
										"kind": "text",
										"text": " between "
									},
									{
										"kind": "code",
										"text": "`0`"
									},
									{
										"kind": "text",
										"text": " - "
									},
									{
										"kind": "code",
										"text": "`10000`"
									},
									{
										"kind": "text",
										"text": " that defines the fee rate.\n\nThis number is in percentage points. i.e. "
									},
									{
										"kind": "code",
										"text": "`100`"
									},
									{
										"kind": "text",
										"text": " is a 1% fee and "
									},
									{
										"kind": "code",
										"text": "`10000`"
									},
									{
										"kind": "text",
										"text": " is a 100% fee.\n\n#### fee_recipient\n\nThe "
									},
									{
										"kind": "code",
										"text": "`fee_recipient`"
									},
									{
										"kind": "text",
										"text": " property is the address of the wallet that will receive the fees.\n\nUse the "
									},
									{
										"kind": "code",
										"text": "`useAddress`"
									},
									{
										"kind": "text",
										"text": " hook to get the current wallet address."
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "PlatformFee"
									}
								]
							},
							{
								"tag": "@platformFees",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/contract-settings.ts",
							"line": 433,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contract-settings.ts#L433"
						}
					],
					"parameters": [
						{
							"id": 355,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`SmartContract`"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/contracts/index.ts",
											"qualifiedName": "ValidContractInstance"
										},
										"name": "ValidContractInstance",
										"package": "@thirdweb-dev/sdk"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseMutationResult"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/.pnpm/typescript@5.2.2/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Omit"
								},
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 356,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/sdk/dist/declarations/src/evm/core/classes/contract-platform-fee.d.ts",
													"line": 56,
													"character": 25
												}
											]
										}
									},
									{
										"type": "literal",
										"value": "data"
									}
								],
								"name": "Omit",
								"package": "typescript"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 357,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 359,
											"name": "fee_recipient",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/async/contract-settings.ts",
													"line": 442,
													"character": 6,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contract-settings.ts#L442"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 358,
											"name": "platform_fee_basis_points",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/async/contract-settings.ts",
													"line": 441,
													"character": 6,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contract-settings.ts#L441"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												359,
												358
											]
										}
									],
									"sources": [
										{
											"fileName": "packages/react-core/src/evm/hooks/async/contract-settings.ts",
											"line": 440,
											"character": 20,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contract-settings.ts#L440"
										}
									]
								}
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseMutationResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 329,
			"name": "useUpdatePrimarySaleRecipient",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/contract-settings.ts",
					"line": 119,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contract-settings.ts#L119"
				}
			],
			"signatures": [
				{
					"id": 330,
					"name": "useUpdatePrimarySaleRecipient",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for updating the primary sale recipient on a smart contract.\n\nAvailable to use on smart contracts that implement the ["
							},
							{
								"kind": "code",
								"text": "`PrimarySale`"
							},
							{
								"kind": "text",
								"text": "](https://portal.thirdweb.com/contracts/build/extensions/general/PrimarySale) interface.\n\nThe wallet that initiates this transaction must have the required permissions to change the primary sale recipient (defaults to "
							},
							{
								"kind": "code",
								"text": "`\"admin\"`"
							},
							{
								"kind": "text",
								"text": " level)."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport {\n  useUpdatePrimarySaleRecipient,\n  useContract,\n  Web3Button,\n} from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress);\n  const {\n    mutateAsync: updatePrimarySaleRecipient,\n    isLoading,\n    error,\n  } = useUpdatePrimarySaleRecipient(contract);\n\n  return (\n    <Web3Button\n      contractAddress={contractAddress}\n      action={() => updatePrimarySaleRecipient(\"{{wallet_address}}\")}\n    >\n      Update Primary Sale Recipient\n    </Web3Button>\n  );\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A mutation object to update the primary sales recipient\n\n"
									},
									{
										"kind": "code",
										"text": "```ts\nconst { mutateAsync, isLoading, error } = useUpdatePrimarySaleRecipient(contract);\n```"
									},
									{
										"kind": "text",
										"text": "\n\n### options\n\nThe mutation function takes a "
									},
									{
										"kind": "code",
										"text": "`walletAddress`"
									},
									{
										"kind": "text",
										"text": " as argument:\n\n#### walletAddress\n\nThe wallet address to set as the primary sale recipient."
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "PrimarySale"
									}
								]
							},
							{
								"tag": "@platformFees",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/contract-settings.ts",
							"line": 119,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contract-settings.ts#L119"
						}
					],
					"parameters": [
						{
							"id": 331,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`SmartContract`"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/contracts/index.ts",
											"qualifiedName": "ValidContractInstance"
										},
										"name": "ValidContractInstance",
										"package": "@thirdweb-dev/sdk"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseMutationResult"
						},
						"typeArguments": [
							{
								"type": "reflection",
								"declaration": {
									"id": 332,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 333,
											"name": "receipt",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/async/contract-settings.ts",
													"line": 123,
													"character": 4,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contract-settings.ts#L123"
												}
											],
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/.pnpm/@ethersproject+abstract-provider@5.7.0/node_modules/@ethersproject/abstract-provider/src.ts/index.ts",
													"qualifiedName": "TransactionReceipt"
												},
												"name": "providers.TransactionReceipt",
												"package": "@ethersproject/abstract-provider",
												"qualifiedName": "TransactionReceipt"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												333
											]
										}
									],
									"sources": [
										{
											"fileName": "packages/react-core/src/evm/hooks/async/contract-settings.ts",
											"line": 122,
											"character": 2,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contract-settings.ts#L122"
										}
									]
								}
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							},
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseMutationResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 340,
			"name": "useUpdateRoyaltySettings",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/contract-settings.ts",
					"line": 277,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contract-settings.ts#L277"
				}
			],
			"signatures": [
				{
					"id": 341,
					"name": "useUpdateRoyaltySettings",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for updating royalty settings on a smart contract.\n\nAvailable to use on smart contracts that implement the ["
							},
							{
								"kind": "code",
								"text": "`Royalty`"
							},
							{
								"kind": "text",
								"text": "](https://portal.thirdweb.com/contracts/build/extensions/general/Royalty) interface."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport {\n  useUpdateRoyaltySettings,\n  useContract,\n  Web3Button,\n} from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress);\n  const {\n    mutateAsync: updateRoyaltySettings,\n    isLoading,\n    error,\n  } = useUpdateRoyaltySettings(contract);\n\n  return (\n    <Web3Button\n      contractAddress={contractAddress}\n      action={() =>\n        updateRoyaltySettings({\n          seller_fee_basis_points: 0,\n          fee_recipient: \"{{wallet_address}}\",\n        })\n      }\n    >\n      Update Royalty Settings\n    </Web3Button>\n  );\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A mutation object to update the royalty settings\n\n"
									},
									{
										"kind": "code",
										"text": "```ts\nconst { mutateAsync, isLoading, error } = useUpdateRoyaltySettings(contract);\n```"
									},
									{
										"kind": "text",
										"text": "\n\n### options\n\nThe mutation function takes an object with below properties:\n\n#### seller_fee_basis_points\n\nThe "
									},
									{
										"kind": "code",
										"text": "`seller_fee_basis_points`"
									},
									{
										"kind": "text",
										"text": " property is a "
									},
									{
										"kind": "code",
										"text": "`number`"
									},
									{
										"kind": "text",
										"text": " between "
									},
									{
										"kind": "code",
										"text": "`0`"
									},
									{
										"kind": "text",
										"text": " - "
									},
									{
										"kind": "code",
										"text": "`10000`"
									},
									{
										"kind": "text",
										"text": " that defines the fee rate.\n\nThis number is in percentage points. i.e. "
									},
									{
										"kind": "code",
										"text": "`100`"
									},
									{
										"kind": "text",
										"text": " is a 1% fee and "
									},
									{
										"kind": "code",
										"text": "`10000`"
									},
									{
										"kind": "text",
										"text": " is a 100% fee.\n\n#### fee_recipient\n\nThe "
									},
									{
										"kind": "code",
										"text": "`fee_recipient`"
									},
									{
										"kind": "text",
										"text": " property is the address of the wallet that will receive the fees."
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "Royalty"
									}
								]
							},
							{
								"tag": "@platformFees",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/contract-settings.ts",
							"line": 277,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contract-settings.ts#L277"
						}
					],
					"parameters": [
						{
							"id": 342,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a "
									},
									{
										"kind": "code",
										"text": "`SmartContract`"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/contracts/index.ts",
											"qualifiedName": "ValidContractInstance"
										},
										"name": "ValidContractInstance",
										"package": "@thirdweb-dev/sdk"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseMutationResult"
						},
						"typeArguments": [
							{
								"type": "reflection",
								"declaration": {
									"id": 343,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/sdk/dist/declarations/src/evm/core/classes/contract-royalty.d.ts",
											"line": 75,
											"character": 20
										}
									]
								}
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 344,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 346,
											"name": "fee_recipient",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/async/contract-settings.ts",
													"line": 286,
													"character": 6,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contract-settings.ts#L286"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 345,
											"name": "seller_fee_basis_points",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "packages/react-core/src/evm/hooks/async/contract-settings.ts",
													"line": 285,
													"character": 6,
													"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contract-settings.ts#L285"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												346,
												345
											]
										}
									],
									"sources": [
										{
											"fileName": "packages/react-core/src/evm/hooks/async/contract-settings.ts",
											"line": 284,
											"character": 20,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/contract-settings.ts#L284"
										}
									]
								}
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseMutationResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 974,
			"name": "useUser",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/auth/useUser.ts",
					"line": 34,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/auth/useUser.ts#L34"
				}
			],
			"signatures": [
				{
					"id": 975,
					"name": "useUser",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for retrieving information about the currently signed-in user using [auth](https://portal.thirdweb.com/wallets/auth).\n\nUseful to get the user's address and session data, or "
							},
							{
								"kind": "code",
								"text": "`undefined`"
							},
							{
								"kind": "text",
								"text": " if no user is signed in.\n\n"
							},
							{
								"kind": "code",
								"text": "```jsx\nimport { useUser } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { user, isLoggedIn, isLoading } = useUser();\n}\n```"
							}
						],
						"blockTags": [
							{
								"tag": "@auth",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/auth/useUser.ts",
							"line": 34,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/auth/useUser.ts#L34"
						}
					],
					"typeParameter": [
						{
							"id": 976,
							"name": "TData",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../auth/src/core/schema/common.ts",
									"qualifiedName": "Json"
								},
								"name": "Json",
								"package": "@thirdweb-dev/auth"
							},
							"default": {
								"type": "reference",
								"target": {
									"sourceFileName": "../auth/src/core/schema/common.ts",
									"qualifiedName": "Json"
								},
								"name": "Json",
								"package": "@thirdweb-dev/auth"
							}
						},
						{
							"id": 977,
							"name": "TContext",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../auth/src/core/schema/common.ts",
									"qualifiedName": "Json"
								},
								"name": "Json",
								"package": "@thirdweb-dev/auth"
							},
							"default": {
								"type": "reference",
								"target": {
									"sourceFileName": "../auth/src/core/schema/common.ts",
									"qualifiedName": "Json"
								},
								"name": "Json",
								"package": "@thirdweb-dev/auth"
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 978,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"children": [
								{
									"id": 981,
									"name": "isLoading",
									"variant": "declaration",
									"kind": 1024,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/react-core/src/evm/hooks/auth/useUser.ts",
											"line": 79,
											"character": 37,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/auth/useUser.ts#L79"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 980,
									"name": "isLoggedIn",
									"variant": "declaration",
									"kind": 1024,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/react-core/src/evm/hooks/auth/useUser.ts",
											"line": 79,
											"character": 17,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/auth/useUser.ts#L79"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "!!user"
								},
								{
									"id": 979,
									"name": "user",
									"variant": "declaration",
									"kind": 1024,
									"flags": {},
									"sources": [
										{
											"fileName": "packages/react-core/src/evm/hooks/auth/useUser.ts",
											"line": 79,
											"character": 11,
											"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/auth/useUser.ts#L79"
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "reference",
												"target": 987,
												"typeArguments": [
													{
														"type": "reference",
														"target": -1,
														"name": "TData",
														"refersToTypeParameter": true
													},
													{
														"type": "reference",
														"target": -1,
														"name": "TContext",
														"refersToTypeParameter": true
													}
												],
												"name": "UserWithData",
												"package": "@thirdweb-dev/react-core"
											}
										]
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										981,
										980,
										979
									]
								}
							],
							"sources": [
								{
									"fileName": "packages/react-core/src/evm/hooks/auth/useUser.ts",
									"line": 79,
									"character": 9,
									"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/auth/useUser.ts#L79"
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 540,
			"name": "useValidDirectListings",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
					"line": 758,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L758"
				}
			],
			"signatures": [
				{
					"id": 541,
					"name": "useValidDirectListings",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook to get a list of valid direct listings from a [Marketplace V3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) contract.\n\nA listing is considered valid if the:\n\n- Seller still owns the NFT\n- Listing has not expired (time is before "
							},
							{
								"kind": "code",
								"text": "`endTimeInSeconds`"
							},
							{
								"kind": "text",
								"text": ")\n- Listing has not been canceled\n- Listing has not been bought out (all "
							},
							{
								"kind": "code",
								"text": "`quantity`"
							},
							{
								"kind": "text",
								"text": " of the NFTs have not been purchased)\n\n\n**Note: This hook is only for [Marketplace V3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) contracts.**\n\nFor "
							},
							{
								"kind": "code",
								"text": "`Marketplace`"
							},
							{
								"kind": "text",
								"text": " contracts, use "
							},
							{
								"kind": "code",
								"text": "`useActiveListings`"
							},
							{
								"kind": "text",
								"text": " instead."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useValidDirectListings, useContract } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress, \"marketplace-v3\");\n  const {\n    data: directListings,\n    isLoading,\n    error,\n  } = useValidDirectListings(contract);\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The hook's "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property, once loaded, is an array of "
									},
									{
										"kind": "code",
										"text": "`DirectListingV3`"
									},
									{
										"kind": "text",
										"text": " objects, each containing the following properties:\n\n"
									},
									{
										"kind": "code",
										"text": "```ts\nArray<{\n  // The id of the listing.\n  id: string;\n\n  // The address of the creator of listing.\n  creatorAddress: string;\n\n  // The address of the asset being listed.\n  assetContractAddress: string;\n\n  // The ID of the token to list.\n  tokenId: string;\n\n  // The quantity of tokens to include in the listing.\n  // For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here).\n  quantity: string;\n\n  // The address of the currency to accept for the listing.\n  currencyContractAddress: string;\n\n  // The `CurrencyValue` of the listing. Useful for displaying the price information.\n  currencyValuePerToken: CurrencyValue;\n\n  // The price to pay per unit of NFTs listed.\n  pricePerToken: string;\n\n  // The asset being listed.\n  asset: NFTMetadata;\n\n  // The start time of the listing.\n  startTimeInSeconds: number;\n\n  // The end time of the listing.\n  endTimeInSeconds: number;\n\n  // Whether the listing is reserved to be bought from a specific set of buyers.\n  isReservedListing: boolean;\n\n  // Whether the listing is CREATED, COMPLETED, or CANCELLED.\n  status: Status;\n}>;\n```"
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "DirectListings"
									}
								]
							},
							{
								"tag": "@marketplace",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
							"line": 758,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L758"
						}
					],
					"parameters": [
						{
							"id": 542,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a marketplace v3 contract"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/marketplacev3.ts",
											"qualifiedName": "MarketplaceV3"
										},
										"name": "MarketplaceV3",
										"package": "@thirdweb-dev/sdk"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						},
						{
							"id": 543,
							"name": "filter",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "filter to pass to the query for the sake of pagination & filtering\n"
									},
									{
										"kind": "code",
										"text": "```jsx\nimport { useValidDirectListings, useContract } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress, \"marketplace-v3\");\n  const {\n    data: directListings,\n    isLoading,\n    error,\n  } = useValidDirectListings(\n    contract,\n    {\n      count: 100, // Number of listings to fetch\n      offeror: \"{{offeror_address}}\", // Has offers from this address\n      seller: \"{{seller_address}}\", // Being sold by this address\n      start: 0, // Start from this index (pagination)\n      tokenContract: \"{{token_contract_address}}\", // Only show NFTs from this collection\n      tokenId: \"{{token_id}}\", // Only show NFTs with this token ID\n    },\n  );\n}\n```"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../sdk/src/evm/types/marketplace/MarketPlaceFilter.ts",
									"qualifiedName": "MarketplaceFilter"
								},
								"name": "MarketplaceFilter",
								"package": "@thirdweb-dev/sdk"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"sourceFileName": "../sdk/src/evm/types/marketplacev3/DirectListingV3.ts",
										"qualifiedName": "DirectListingV3"
									},
									"name": "DirectListingV3",
									"package": "@thirdweb-dev/sdk"
								}
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 548,
			"name": "useValidEnglishAuctions",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
					"line": 1045,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L1045"
				}
			],
			"signatures": [
				{
					"id": 549,
					"name": "useValidEnglishAuctions",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook to get all valid English auctions from a [Marketplace V3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) contract.\n\nA listing is considered valid if the:\n\n- Auction has not expired (i.e. current time is before the end time of the auction)\n- Auction has not been canceled\n- Auction has not been bought out (all quantity has been sold)\n\n__This hook is only for [Marketplace V3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) contracts.__\n\nFor [Marketplace](https://thirdweb.com/thirdweb.eth/Marketplace)\ncontracts, use [useActiveListings](/react/react.useactivelistings) instead."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useValidEnglishAuctions, useContract } from \"@thirdweb-dev/react\";\n\n// Your smart contract address\nconst contractAddress = \"{{contract_address}}\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress, \"marketplace-v3\");\n  const {\n    data: englishAuctions,\n    isLoading,\n    error,\n  } = useValidEnglishAuctions(contract);\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A Query Result object that includes an array of english auctions\nThe hook's "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property, once loaded, is an\narray of "
									},
									{
										"kind": "code",
										"text": "`EnglishAuction`"
									},
									{
										"kind": "text",
										"text": " objects, each containing the following properties:\n\n"
									},
									{
										"kind": "code",
										"text": "```ts\nArray<{\n  // The id of the auction\n  id: string;\n\n  // The address of the creator of auction.\n  creatorAddress: string;\n\n  // The address of the asset being auctioned.\n  assetContractAddress: string;\n\n  // The ID of the token to auction.\n  tokenId: string;\n\n  // The quantity of tokens to include in the auction.\n  // For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here).\n  quantity: string;\n\n  // The address of the currency to accept for the auction.\n  currencyContractAddress: string;\n\n  // The minimum price that a bid must be in order to be accepted.\n  minimumBidAmount: string;\n\n  // The `CurrencyValue` of the minimum bid amount.\n  // Useful for displaying the price information.\n  minimumBidCurrencyValue: CurrencyValue;\n\n  // The buyout price of the auction.\n  buyoutBidAmount: string;\n\n  // The `CurrencyValue` of the buyout price.\n  // Useful for displaying the price information.\n  buyoutCurrencyValue: CurrencyValue;\n\n  // This is a buffer e.g. x seconds.\n  // If a new winning bid is made less than x seconds before expirationTimestamp, the\n  // expirationTimestamp is increased by x seconds.\n  timeBufferInSeconds: number;\n\n  // This is a buffer in basis points e.g. x%.\n  // To be considered as a new winning bid, a bid must be at least x% greater than\n  // the current winning bid.\n  bidBufferBps: number;\n\n  // The start time of the auction.\n  startTimeInSeconds: number;\n\n  // The end time of the auction.\n  endTimeInSeconds: number;\n\n  // The asset being auctioned.\n  asset: NFTMetadata;\n\n  // Whether the listing is CREATED, COMPLETED, or CANCELLED.\n  status: Status;\n}>;\n```"
									}
								]
							},
							{
								"tag": "@twfeature",
								"content": [
									{
										"kind": "text",
										"text": "EnglishAuctions"
									}
								]
							},
							{
								"tag": "@marketplace",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
							"line": 1045,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L1045"
						}
					],
					"parameters": [
						{
							"id": 550,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a marketplace v3 contract"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/marketplacev3.ts",
											"qualifiedName": "MarketplaceV3"
										},
										"name": "MarketplaceV3",
										"package": "@thirdweb-dev/sdk"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						},
						{
							"id": 551,
							"name": "filter",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The "
									},
									{
										"kind": "code",
										"text": "`filter`"
									},
									{
										"kind": "text",
										"text": " object allows you to filter the auctions returned by the hook.\n\n"
									},
									{
										"kind": "code",
										"text": "```jsx\nimport { useEnglishAuctions, useContract } from \"@thirdweb-dev/react\";\n\n// Your smart contract address\nconst contractAddress = \"{{contract_address}}\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress, \"marketplace-v3\");\n  const {\n    data: englishAuctions,\n    isLoading,\n    error,\n  } = useEnglishAuctions(\n    contract,\n    // highlight-start\n    {\n      count: 100, // Number of auctions to fetch\n      offeror: \"{{offeror_address}}\", // Has offers from this address\n      seller: \"{{seller_address}}\", // Being sold by this address\n      start: 0, // Start from this index (pagination)\n      tokenContract: \"{{token_contract_address}}\", // Only show NFTs from this collection\n      tokenId: \"{{token_id}}\", // Only show NFTs with this ID\n    },\n    // highlight-end\n  );\n}\n```"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../sdk/src/evm/types/marketplace/MarketPlaceFilter.ts",
									"qualifiedName": "MarketplaceFilter"
								},
								"name": "MarketplaceFilter",
								"package": "@thirdweb-dev/sdk"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"sourceFileName": "../sdk/src/evm/types/marketplacev3/EnglishAuction.ts",
										"qualifiedName": "EnglishAuction"
									},
									"name": "EnglishAuction",
									"package": "@thirdweb-dev/sdk"
								}
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		},
		{
			"id": 56,
			"name": "useWallet",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/core/hooks/wallet-hooks.ts",
					"line": 75,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/hooks/wallet-hooks.ts#L75"
				},
				{
					"fileName": "packages/react-core/src/core/hooks/wallet-hooks.ts",
					"line": 92,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/hooks/wallet-hooks.ts#L92"
				},
				{
					"fileName": "packages/react-core/src/core/hooks/wallet-hooks.ts",
					"line": 96,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/hooks/wallet-hooks.ts#L96"
				}
			],
			"signatures": [
				{
					"id": 57,
					"name": "useWallet",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook to get the instance of the currently connected wallet."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useWallet } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const walletInstance = useWallet();\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Currently connected "
									},
									{
										"kind": "code",
										"text": "`WalletInstance`"
									},
									{
										"kind": "text",
										"text": " , or "
									},
									{
										"kind": "code",
										"text": "`undefined`"
									},
									{
										"kind": "text",
										"text": " if no wallet is connected."
									}
								]
							},
							{
								"tag": "@walletConnection",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/core/hooks/wallet-hooks.ts",
							"line": 75,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/hooks/wallet-hooks.ts#L75"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"target": 232,
								"name": "WalletInstance",
								"package": "@thirdweb-dev/react-core"
							},
							{
								"type": "intrinsic",
								"name": "undefined"
							}
						]
					}
				},
				{
					"id": 58,
					"name": "useWallet",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook to get the instance of the currently connected wallet if it matches the given "
							},
							{
								"kind": "code",
								"text": "`walletId`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useWallet } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const metamaskWalletInstance = useWallet('metamask');\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Currently connected "
									},
									{
										"kind": "code",
										"text": "`WalletInstance`"
									},
									{
										"kind": "text",
										"text": " with given "
									},
									{
										"kind": "code",
										"text": "`walletId`"
									},
									{
										"kind": "text",
										"text": " , or "
									},
									{
										"kind": "code",
										"text": "`undefined`"
									},
									{
										"kind": "text",
										"text": " if no wallet is connected or if the connected wallet does not match the given "
									},
									{
										"kind": "code",
										"text": "`walletId`"
									},
									{
										"kind": "text",
										"text": "."
									}
								]
							},
							{
								"tag": "@walletConnection",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/core/hooks/wallet-hooks.ts",
							"line": 92,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/hooks/wallet-hooks.ts#L92"
						}
					],
					"typeParameter": [
						{
							"id": 59,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/hooks/wallet-hooks.ts",
									"qualifiedName": "WalletId"
								},
								"name": "WalletId",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"parameters": [
						{
							"id": 60,
							"name": "walletId",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "reference",
								"target": -1,
								"name": "T",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "indexedAccess",
								"indexType": {
									"type": "reference",
									"target": -1,
									"name": "T",
									"refersToTypeParameter": true
								},
								"objectType": {
									"type": "reference",
									"target": 31,
									"name": "WalletIdToWalletTypeMap",
									"package": "@thirdweb-dev/react-core"
								}
							},
							{
								"type": "intrinsic",
								"name": "undefined"
							}
						]
					}
				}
			]
		},
		{
			"id": 86,
			"name": "useWalletConfig",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/core/hooks/wallet-hooks.ts",
					"line": 144,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/hooks/wallet-hooks.ts#L144"
				}
			],
			"signatures": [
				{
					"id": 87,
					"name": "useWalletConfig",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook to get the "
							},
							{
								"kind": "code",
								"text": "`WalletConfig`"
							},
							{
								"kind": "text",
								"text": " object of the currently connected wallet.\n\nThis is useful to get metadata about the connected wallet, such as the wallet name, logo, etc"
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useWalletConfig } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const walletConfig = useWalletConfig();\n\n  const walletName = walletConfig?.meta.name;\n  const walletLogo = walletConfig?.meta.iconURL;\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The current connected wallet's configuration object or "
									},
									{
										"kind": "code",
										"text": "`undefined`"
									},
									{
										"kind": "text",
										"text": " if no wallet is connected."
									}
								]
							},
							{
								"tag": "@walletConnection",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/core/hooks/wallet-hooks.ts",
							"line": 144,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/hooks/wallet-hooks.ts#L144"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "reference",
								"target": 142,
								"name": "WalletConfig",
								"package": "@thirdweb-dev/react-core"
							}
						]
					}
				}
			]
		},
		{
			"id": 105,
			"name": "useWalletConnectHandler",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/core/providers/thirdweb-wallet-provider.tsx",
					"line": 765,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/providers/thirdweb-wallet-provider.tsx#L765"
				}
			],
			"signatures": [
				{
					"id": 106,
					"name": "useWalletConnectHandler",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Get WalletConnect handler instance"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/core/providers/thirdweb-wallet-provider.tsx",
							"line": 765,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/core/providers/thirdweb-wallet-provider.tsx#L765"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../wallets/src/core/types/walletConnect.ts",
									"qualifiedName": "WalletConnectHandler"
								},
								"name": "WalletConnectHandler",
								"package": "@thirdweb-dev/wallets"
							}
						]
					}
				}
			]
		},
		{
			"id": 1227,
			"name": "useWatchTransactions",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/useTransactions.ts",
					"line": 40,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/useTransactions.ts#L40"
				}
			],
			"signatures": [
				{
					"id": 1228,
					"name": "useWatchTransactions",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook that listens to transactions on a given chain for a given address.\n\n"
							},
							{
								"kind": "code",
								"text": "```javascript\nimport { useWatchTransactions } from \"@thirdweb-dev/react\"\n```"
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```js\nconst transactions = useWatchTransactions({\n address: \"0x1234\",\n network: \"ethereum\",\n});\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "An array of "
									},
									{
										"kind": "code",
										"text": "`Transaction`"
									},
									{
										"kind": "text",
										"text": " objects"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/useTransactions.ts",
							"line": 40,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/useTransactions.ts#L40"
						}
					],
					"parameters": [
						{
							"id": 1229,
							"name": "watchTransactionParams",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Options for watching transactions\n\n#### address\nThe address to watch transactions for\n\n#### network\nThe network to watch transactions on\n\n#### sdkOptions\nOptions to pass to the thirdweb SDK"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 1230,
								"name": "UseWatchTransactionsParams",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": {
								"sourceFileName": "../../node_modules/.pnpm/@ethersproject+transactions@5.7.0/node_modules/@ethersproject/transactions/src.ts/index.ts",
								"qualifiedName": "Transaction"
							},
							"name": "Transaction",
							"package": "@ethersproject/transactions"
						}
					}
				}
			]
		},
		{
			"id": 565,
			"name": "useWinningBid",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
					"line": 1407,
					"character": 16,
					"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L1407"
				}
			],
			"signatures": [
				{
					"id": 566,
					"name": "useWinningBid",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hook for getting the winning bid of an auction listing on a "
							},
							{
								"kind": "code",
								"text": "`Marketplace`"
							},
							{
								"kind": "text",
								"text": " contract."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```jsx\nimport { useContract, useWinningBid } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress, \"marketplace\");\n  const { data, isLoading, error } = useWinningBid(contract, listingId);\n}\n```"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Query result object that includes the "
									},
									{
										"kind": "code",
										"text": "`Offer`"
									},
									{
										"kind": "text",
										"text": " that is winning the auction\nThe hook's "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property, once loaded, is an object of type "
									},
									{
										"kind": "code",
										"text": "`Offer`"
									},
									{
										"kind": "text",
										"text": ", or "
									},
									{
										"kind": "code",
										"text": "`undefined`"
									},
									{
										"kind": "text",
										"text": " if no winning bid exists.\n\n"
									},
									{
										"kind": "code",
										"text": "```ts\n{\n   // The id of the listing.\n  listingId: BigNumberish;\n\n   // The address of the buyer who made the offer.\n  buyerAddress: string;\n\n   // The quantity of tokens to be bought.\n  quantityDesired: BigNumberish;\n\n   // The amount of coins offered per token.\n  pricePerToken: BigNumber;\n\n   // The `CurrencyValue` of the listing. Useful for displaying the price information.\n  currencyValue: CurrencyValue;\n\n   // The currency contract address of the offer token.\n  currencyContractAddress: string;\n} | undefined;\n```"
									}
								]
							},
							{
								"tag": "@marketplace",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/react-core/src/evm/hooks/async/marketplace.ts",
							"line": 1407,
							"character": 16,
							"url": "https://github.com/thirdweb-dev/js/blob/33df0424a/packages/react-core/src/evm/hooks/async/marketplace.ts#L1407"
						}
					],
					"parameters": [
						{
							"id": 567,
							"name": "contract",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Instance of a marketplace contract"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts",
											"qualifiedName": "Marketplace"
										},
										"name": "Marketplace",
										"package": "@thirdweb-dev/sdk"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						},
						{
							"id": 568,
							"name": "listingId",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The ID of the listing to get the winning bid for.\nIf the listing cannot be found, is not an auction listing, or is not active, the "
									},
									{
										"kind": "code",
										"text": "`error`"
									},
									{
										"kind": "text",
										"text": " property will be set."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/core/query-utils/required-param.ts",
									"qualifiedName": "RequiredParam"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts",
											"qualifiedName": "BigNumberish"
										},
										"name": "BigNumberish",
										"package": "@ethersproject/bignumber"
									}
								],
								"name": "RequiredParam",
								"package": "@thirdweb-dev/react-core"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/.pnpm/@tanstack+react-query@4.33.0_react-native@0.71.11_react@18.2.0/node_modules/@tanstack/react-query/src/types.ts",
							"qualifiedName": "UseQueryResult"
						},
						"typeArguments": [
							{
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../sdk/src/evm/types/marketplace/Offer.ts",
											"qualifiedName": "Offer"
										},
										"name": "Offer",
										"package": "@thirdweb-dev/sdk"
									}
								]
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "UseQueryResult",
						"package": "@tanstack/react-query"
					}
				}
			]
		}
	],
	"groups": [
		{
			"title": "Interfaces",
			"children": [
				248,
				244,
				9,
				1077,
				987
			]
		},
		{
			"title": "Type Aliases",
			"children": [
				1189,
				1142,
				1158,
				1196,
				275,
				1173,
				1179,
				1206,
				160,
				107,
				1164,
				1162,
				1193,
				1180,
				1184,
				1151,
				1156,
				1146,
				1134,
				1169,
				1163,
				877,
				203,
				279,
				1131,
				1135,
				1127,
				1137,
				467,
				1230,
				1126,
				142,
				31,
				232,
				233
			]
		},
		{
			"title": "Functions",
			"children": [
				1069,
				1103,
				625,
				954,
				957,
				943,
				933,
				939,
				283,
				310,
				561,
				946,
				119,
				825,
				843,
				1050,
				573,
				960,
				108,
				127,
				487,
				577,
				829,
				922,
				769,
				765,
				609,
				613,
				601,
				125,
				121,
				300,
				305,
				491,
				910,
				484,
				476,
				288,
				385,
				61,
				67,
				404,
				435,
				417,
				421,
				443,
				366,
				455,
				936,
				596,
				591,
				773,
				950,
				69,
				503,
				524,
				536,
				555,
				75,
				528,
				569,
				544,
				558,
				629,
				862,
				928,
				852,
				495,
				520,
				532,
				552,
				962,
				969,
				617,
				621,
				360,
				581,
				809,
				813,
				902,
				778,
				804,
				783,
				1035,
				633,
				797,
				103,
				347,
				326,
				948,
				321,
				511,
				869,
				952,
				847,
				334,
				1073,
				858,
				1054,
				315,
				93,
				88,
				834,
				1043,
				1029,
				1031,
				1045,
				982,
				79,
				889,
				899,
				880,
				793,
				789,
				918,
				816,
				926,
				914,
				481,
				471,
				363,
				353,
				329,
				340,
				974,
				540,
				548,
				56,
				86,
				105,
				1227,
				565
			]
		}
	],
	"packageName": "@thirdweb-dev/react-core",
	"readme": [
		{
			"kind": "text",
			"text": "<p align=\"center\">\n<br />\n<a href=\"https://thirdweb.com\"><img src=\"https://github.com/thirdweb-dev/js/blob/main/packages/sdk/logo.svg?raw=true\" width=\"200\" alt=\"\"/></a>\n<br />\n</p>\n<h1 align=\"center\">thirdweb React Core SDK</h1>\n<p align=\"center\">\n<a href=\"https://www.npmjs.com/package/@thirdweb-dev/react-core\"><img src=\"https://img.shields.io/npm/v/@thirdweb-dev/react-core?color=red&label=npm&logo=npm\" alt=\"npm version\"/></a>\n<a href=\"https://github.com/thirdweb-dev/js/actions/workflows/build-test-lint.yml\"><img alt=\"Build Status\" src=\"https://github.com/thirdweb-dev/js/actions/workflows/build-test-lint.yml/badge.svg\"/></a>\n<a href=\"https://discord.gg/thirdweb\"><img alt=\"Join our Discord!\" src=\"https://img.shields.io/discord/834227967404146718.svg?color=7289da&label=discord&logo=discord&style=flat\"/></a>\n\n</p>\n<p align=\"center\"><strong>Proudly powering react and react-native.</strong></p>\n<br />\n\n<br />\n\nYou are likely looking for [@thirdweb-dev/react](https://www.npmjs.com/package/@thirdweb-dev/react)."
		}
	],
	"symbolIdMap": {
		"0": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": ""
		},
		"9": {
			"sourceFileName": "src/core/providers/thirdweb-provider.tsx",
			"qualifiedName": "ThirdwebProviderCoreProps"
		},
		"10": {
			"sourceFileName": "src/core/providers/thirdweb-provider.tsx",
			"qualifiedName": "ThirdwebProviderCoreProps.supportedWallets"
		},
		"11": {
			"sourceFileName": "src/core/providers/thirdweb-provider.tsx",
			"qualifiedName": "ThirdwebProviderCoreProps.dAppMeta"
		},
		"12": {
			"sourceFileName": "src/core/providers/thirdweb-provider.tsx",
			"qualifiedName": "ThirdwebProviderCoreProps.autoConnect"
		},
		"13": {
			"sourceFileName": "src/core/providers/thirdweb-provider.tsx",
			"qualifiedName": "ThirdwebProviderCoreProps.theme"
		},
		"15": {
			"sourceFileName": "src/core/providers/thirdweb-provider.tsx",
			"qualifiedName": "ThirdwebProviderCoreProps.autoSwitch"
		},
		"16": {
			"sourceFileName": "src/core/providers/thirdweb-provider.tsx",
			"qualifiedName": "ThirdwebProviderCoreProps.autoConnectTimeout"
		},
		"18": {
			"sourceFileName": "src/evm/providers/types.ts",
			"qualifiedName": "clientId"
		},
		"19": {
			"sourceFileName": "src/evm/providers/types.ts",
			"qualifiedName": "activeChain"
		},
		"20": {
			"sourceFileName": "\u0000",
			"qualifiedName": "__type"
		},
		"21": {
			"sourceFileName": "\u0000",
			"qualifiedName": "__type"
		},
		"22": {
			"sourceFileName": "src/core/providers/query-client.tsx",
			"qualifiedName": "queryClient"
		},
		"23": {
			"sourceFileName": "src/evm/providers/types.ts",
			"qualifiedName": "supportedChains"
		},
		"24": {
			"sourceFileName": "src/evm/providers/types.ts",
			"qualifiedName": "sdkOptions"
		},
		"25": {
			"sourceFileName": "../sdk/src/evm/schema/sdk-options.ts",
			"qualifiedName": "__type"
		},
		"26": {
			"sourceFileName": "src/evm/providers/types.ts",
			"qualifiedName": "storageInterface"
		},
		"27": {
			"sourceFileName": "src/evm/providers/types.ts",
			"qualifiedName": "authConfig"
		},
		"28": {
			"sourceFileName": "src/evm/providers/types.ts",
			"qualifiedName": "secretKey"
		},
		"29": {
			"sourceFileName": "src/core/providers/thirdweb-provider.tsx",
			"qualifiedName": "ThirdwebProviderCoreProps.TChains"
		},
		"31": {
			"sourceFileName": "src/core/hooks/wallet-hooks.ts",
			"qualifiedName": "WalletIdToWalletTypeMap"
		},
		"32": {
			"sourceFileName": "src/core/hooks/wallet-hooks.ts",
			"qualifiedName": "__type"
		},
		"33": {
			"sourceFileName": "src/core/hooks/wallet-hooks.ts",
			"qualifiedName": "__type.metamask"
		},
		"34": {
			"sourceFileName": "src/core/hooks/wallet-hooks.ts",
			"qualifiedName": "__type.coin98"
		},
		"35": {
			"sourceFileName": "src/core/hooks/wallet-hooks.ts",
			"qualifiedName": "__type.coinbase"
		},
		"36": {
			"sourceFileName": "src/core/hooks/wallet-hooks.ts",
			"qualifiedName": "__type.coreWallet"
		},
		"37": {
			"sourceFileName": "src/core/hooks/wallet-hooks.ts",
			"qualifiedName": "__type.rainbowWallet"
		},
		"38": {
			"sourceFileName": "src/core/hooks/wallet-hooks.ts",
			"qualifiedName": "__type.blocto"
		},
		"39": {
			"sourceFileName": "src/core/hooks/wallet-hooks.ts",
			"qualifiedName": "__type.frame"
		},
		"40": {
			"sourceFileName": "src/core/hooks/wallet-hooks.ts",
			"qualifiedName": "__type.localWallet"
		},
		"41": {
			"sourceFileName": "src/core/hooks/wallet-hooks.ts",
			"qualifiedName": "__type.magicLink"
		},
		"42": {
			"sourceFileName": "src/core/hooks/wallet-hooks.ts",
			"qualifiedName": "__type.paper"
		},
		"43": {
			"sourceFileName": "src/core/hooks/wallet-hooks.ts",
			"qualifiedName": "__type.smartWallet"
		},
		"44": {
			"sourceFileName": "src/core/hooks/wallet-hooks.ts",
			"qualifiedName": "__type.tokenBoundSmartWallet"
		},
		"45": {
			"sourceFileName": "src/core/hooks/wallet-hooks.ts",
			"qualifiedName": "__type.safe"
		},
		"46": {
			"sourceFileName": "src/core/hooks/wallet-hooks.ts",
			"qualifiedName": "__type.trust"
		},
		"47": {
			"sourceFileName": "src/core/hooks/wallet-hooks.ts",
			"qualifiedName": "__type.embeddedWallet"
		},
		"48": {
			"sourceFileName": "src/core/hooks/wallet-hooks.ts",
			"qualifiedName": "__type.walletConnect"
		},
		"49": {
			"sourceFileName": "src/core/hooks/wallet-hooks.ts",
			"qualifiedName": "__type.phantom"
		},
		"50": {
			"sourceFileName": "src/core/hooks/wallet-hooks.ts",
			"qualifiedName": "__type.walletConnectV1"
		},
		"51": {
			"sourceFileName": "src/core/hooks/wallet-hooks.ts",
			"qualifiedName": "__type.okx"
		},
		"52": {
			"sourceFileName": "src/core/hooks/wallet-hooks.ts",
			"qualifiedName": "__type.oneKey"
		},
		"53": {
			"sourceFileName": "src/core/hooks/wallet-hooks.ts",
			"qualifiedName": "__type.cryptoDefiWallet"
		},
		"54": {
			"sourceFileName": "src/core/hooks/wallet-hooks.ts",
			"qualifiedName": "__type.rabby"
		},
		"55": {
			"sourceFileName": "src/core/hooks/wallet-hooks.ts",
			"qualifiedName": "__type.xdefi"
		},
		"56": {
			"sourceFileName": "src/core/hooks/wallet-hooks.ts",
			"qualifiedName": "useWallet"
		},
		"57": {
			"sourceFileName": "src/core/hooks/wallet-hooks.ts",
			"qualifiedName": "useWallet"
		},
		"58": {
			"sourceFileName": "src/core/hooks/wallet-hooks.ts",
			"qualifiedName": "useWallet"
		},
		"59": {
			"sourceFileName": "src/core/hooks/wallet-hooks.ts",
			"qualifiedName": "T"
		},
		"60": {
			"sourceFileName": "src/core/hooks/wallet-hooks.ts",
			"qualifiedName": "walletId"
		},
		"61": {
			"sourceFileName": "src/core/hooks/wallet-hooks.ts",
			"qualifiedName": "useConnect"
		},
		"62": {
			"sourceFileName": "src/core/hooks/wallet-hooks.ts",
			"qualifiedName": "useConnect"
		},
		"63": {
			"sourceFileName": "src/core/providers/thirdweb-wallet-provider.tsx",
			"qualifiedName": "__type"
		},
		"64": {
			"sourceFileName": "src/core/providers/thirdweb-wallet-provider.tsx",
			"qualifiedName": "__type"
		},
		"65": {
			"sourceFileName": "src/core/providers/thirdweb-wallet-provider.tsx",
			"qualifiedName": "I"
		},
		"66": {
			"sourceFileName": "src/core/providers/thirdweb-wallet-provider.tsx",
			"qualifiedName": "args"
		},
		"67": {
			"sourceFileName": "src/core/hooks/wallet-hooks.ts",
			"qualifiedName": "useConnectionStatus"
		},
		"68": {
			"sourceFileName": "src/core/hooks/wallet-hooks.ts",
			"qualifiedName": "useConnectionStatus"
		},
		"69": {
			"sourceFileName": "src/core/hooks/wallet-hooks.ts",
			"qualifiedName": "useCreateWalletInstance"
		},
		"70": {
			"sourceFileName": "src/core/hooks/wallet-hooks.ts",
			"qualifiedName": "useCreateWalletInstance"
		},
		"71": {
			"sourceFileName": "src/core/providers/thirdweb-wallet-provider.tsx",
			"qualifiedName": "__type"
		},
		"72": {
			"sourceFileName": "src/core/providers/thirdweb-wallet-provider.tsx",
			"qualifiedName": "__type"
		},
		"73": {
			"sourceFileName": "src/core/providers/thirdweb-wallet-provider.tsx",
			"qualifiedName": "I"
		},
		"74": {
			"sourceFileName": "src/core/providers/thirdweb-wallet-provider.tsx",
			"qualifiedName": "Wallet"
		},
		"75": {
			"sourceFileName": "src/core/hooks/wallet-hooks.ts",
			"qualifiedName": "useDisconnect"
		},
		"76": {
			"sourceFileName": "src/core/hooks/wallet-hooks.ts",
			"qualifiedName": "useDisconnect"
		},
		"77": {
			"sourceFileName": "src/core/providers/thirdweb-wallet-provider.tsx",
			"qualifiedName": "__type"
		},
		"78": {
			"sourceFileName": "src/core/providers/thirdweb-wallet-provider.tsx",
			"qualifiedName": "__type"
		},
		"79": {
			"sourceFileName": "src/core/hooks/wallet-hooks.ts",
			"qualifiedName": "useSwitchChain"
		},
		"80": {
			"sourceFileName": "src/core/hooks/wallet-hooks.ts",
			"qualifiedName": "useSwitchChain"
		},
		"81": {
			"sourceFileName": "src/core/providers/thirdweb-wallet-provider.tsx",
			"qualifiedName": "__type"
		},
		"82": {
			"sourceFileName": "src/core/providers/thirdweb-wallet-provider.tsx",
			"qualifiedName": "__type"
		},
		"83": {
			"sourceFileName": "src/core/providers/thirdweb-wallet-provider.tsx",
			"qualifiedName": "chain"
		},
		"86": {
			"sourceFileName": "src/core/hooks/wallet-hooks.ts",
			"qualifiedName": "useWalletConfig"
		},
		"87": {
			"sourceFileName": "src/core/hooks/wallet-hooks.ts",
			"qualifiedName": "useWalletConfig"
		},
		"88": {
			"sourceFileName": "src/core/hooks/wallet-hooks.ts",
			"qualifiedName": "useSetConnectionStatus"
		},
		"89": {
			"sourceFileName": "src/core/hooks/wallet-hooks.ts",
			"qualifiedName": "useSetConnectionStatus"
		},
		"90": {
			"sourceFileName": "src/core/providers/thirdweb-wallet-provider.tsx",
			"qualifiedName": "__type"
		},
		"91": {
			"sourceFileName": "src/core/providers/thirdweb-wallet-provider.tsx",
			"qualifiedName": "__type"
		},
		"92": {
			"sourceFileName": "src/core/providers/thirdweb-wallet-provider.tsx",
			"qualifiedName": "status"
		},
		"93": {
			"sourceFileName": "src/core/hooks/wallet-hooks.ts",
			"qualifiedName": "useSetConnectedWallet"
		},
		"94": {
			"sourceFileName": "src/core/hooks/wallet-hooks.ts",
			"qualifiedName": "useSetConnectedWallet"
		},
		"95": {
			"sourceFileName": "src/core/providers/thirdweb-wallet-provider.tsx",
			"qualifiedName": "__type"
		},
		"96": {
			"sourceFileName": "src/core/providers/thirdweb-wallet-provider.tsx",
			"qualifiedName": "__type"
		},
		"97": {
			"sourceFileName": "src/core/providers/thirdweb-wallet-provider.tsx",
			"qualifiedName": "wallet"
		},
		"98": {
			"sourceFileName": "src/core/providers/thirdweb-wallet-provider.tsx",
			"qualifiedName": "params"
		},
		"103": {
			"sourceFileName": "src/evm/hooks/usePersonalWalletAddress.ts",
			"qualifiedName": "usePersonalWalletAddress"
		},
		"104": {
			"sourceFileName": "src/evm/hooks/usePersonalWalletAddress.ts",
			"qualifiedName": "usePersonalWalletAddress"
		},
		"105": {
			"sourceFileName": "src/core/providers/thirdweb-wallet-provider.tsx",
			"qualifiedName": "useWalletConnectHandler"
		},
		"106": {
			"sourceFileName": "src/core/providers/thirdweb-wallet-provider.tsx",
			"qualifiedName": "useWalletConnectHandler"
		},
		"107": {
			"sourceFileName": "src/core/providers/thirdweb-wallet-provider.tsx",
			"qualifiedName": "ConnectionStatus"
		},
		"108": {
			"sourceFileName": "src/evm/hooks/wallet.ts",
			"qualifiedName": "useBalance"
		},
		"109": {
			"sourceFileName": "src/evm/hooks/wallet.ts",
			"qualifiedName": "useBalance"
		},
		"110": {
			"sourceFileName": "src/evm/hooks/wallet.ts",
			"qualifiedName": "tokenAddress"
		},
		"111": {
			"sourceFileName": "src/evm/hooks/wallet.ts",
			"qualifiedName": "__type"
		},
		"112": {
			"sourceFileName": "src/evm/hooks/wallet.ts",
			"qualifiedName": "__type.symbol"
		},
		"113": {
			"sourceFileName": "src/evm/hooks/wallet.ts",
			"qualifiedName": "__type.value"
		},
		"114": {
			"sourceFileName": "src/evm/hooks/wallet.ts",
			"qualifiedName": "__type.name"
		},
		"115": {
			"sourceFileName": "src/evm/hooks/wallet.ts",
			"qualifiedName": "__type.decimals"
		},
		"116": {
			"sourceFileName": "src/evm/hooks/wallet.ts",
			"qualifiedName": "__type.displayValue"
		},
		"119": {
			"sourceFileName": "src/evm/hooks/wallet.ts",
			"qualifiedName": "useAddress"
		},
		"120": {
			"sourceFileName": "src/evm/hooks/wallet.ts",
			"qualifiedName": "useAddress"
		},
		"121": {
			"sourceFileName": "src/evm/hooks/wallet.ts",
			"qualifiedName": "useChainId"
		},
		"122": {
			"sourceFileName": "src/evm/hooks/wallet.ts",
			"qualifiedName": "useChainId"
		},
		"125": {
			"sourceFileName": "src/evm/hooks/wallet.ts",
			"qualifiedName": "useChain"
		},
		"126": {
			"sourceFileName": "src/evm/hooks/wallet.ts",
			"qualifiedName": "useChain"
		},
		"127": {
			"sourceFileName": "src/evm/hooks/wallet.ts",
			"qualifiedName": "useBalanceForAddress"
		},
		"128": {
			"sourceFileName": "src/evm/hooks/wallet.ts",
			"qualifiedName": "useBalanceForAddress"
		},
		"129": {
			"sourceFileName": "src/evm/hooks/wallet.ts",
			"qualifiedName": "walletAddress"
		},
		"130": {
			"sourceFileName": "src/evm/hooks/wallet.ts",
			"qualifiedName": "__type"
		},
		"131": {
			"sourceFileName": "src/evm/hooks/wallet.ts",
			"qualifiedName": "__type.symbol"
		},
		"132": {
			"sourceFileName": "src/evm/hooks/wallet.ts",
			"qualifiedName": "__type.value"
		},
		"133": {
			"sourceFileName": "src/evm/hooks/wallet.ts",
			"qualifiedName": "__type.name"
		},
		"134": {
			"sourceFileName": "src/evm/hooks/wallet.ts",
			"qualifiedName": "__type.decimals"
		},
		"135": {
			"sourceFileName": "src/evm/hooks/wallet.ts",
			"qualifiedName": "__type.displayValue"
		},
		"142": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "WalletConfig"
		},
		"143": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type"
		},
		"144": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type.category"
		},
		"145": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type.id"
		},
		"146": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type.meta"
		},
		"147": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type.create"
		},
		"148": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type"
		},
		"149": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type"
		},
		"150": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "options"
		},
		"151": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type.connectUI"
		},
		"152": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type.selectUI"
		},
		"153": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type.isInstalled"
		},
		"154": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type"
		},
		"155": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type"
		},
		"156": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type.personalWallets"
		},
		"157": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type.recommended"
		},
		"158": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type.isHeadless"
		},
		"159": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "I"
		},
		"160": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "ConnectUIProps"
		},
		"161": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type"
		},
		"162": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type.hide"
		},
		"163": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type"
		},
		"164": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type"
		},
		"165": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type.connected"
		},
		"166": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type"
		},
		"167": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type"
		},
		"168": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type.isOpen"
		},
		"169": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type.show"
		},
		"170": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type"
		},
		"171": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type"
		},
		"172": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type.goBack"
		},
		"173": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type"
		},
		"174": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type"
		},
		"175": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type.theme"
		},
		"176": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type.walletConfig"
		},
		"177": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type.selectionData"
		},
		"178": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type.setSelectionData"
		},
		"179": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type"
		},
		"180": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type"
		},
		"181": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "data"
		},
		"182": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type.supportedWallets"
		},
		"183": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type.modalSize"
		},
		"184": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type.connect"
		},
		"185": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type"
		},
		"186": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type"
		},
		"187": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "args"
		},
		"188": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type.setConnectionStatus"
		},
		"189": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type"
		},
		"190": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type"
		},
		"191": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "status"
		},
		"192": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type.connectionStatus"
		},
		"193": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type.setConnectedWallet"
		},
		"194": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type"
		},
		"195": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type"
		},
		"196": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "walletInstance"
		},
		"197": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type.createWalletInstance"
		},
		"198": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type"
		},
		"199": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type"
		},
		"200": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type.connectedWallet"
		},
		"201": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type.connectedWalletAddress"
		},
		"202": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "I"
		},
		"203": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "SelectUIProps"
		},
		"204": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type"
		},
		"205": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type.onSelect"
		},
		"206": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type"
		},
		"207": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type"
		},
		"208": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "selectionData"
		},
		"209": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type.walletConfig"
		},
		"210": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type.supportedWallets"
		},
		"211": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type.theme"
		},
		"212": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type.modalSize"
		},
		"213": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type.connect"
		},
		"214": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type"
		},
		"215": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type"
		},
		"216": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "args"
		},
		"217": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type.setConnectionStatus"
		},
		"218": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type"
		},
		"219": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type"
		},
		"220": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "status"
		},
		"221": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type.connectionStatus"
		},
		"222": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type.setConnectedWallet"
		},
		"223": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type"
		},
		"224": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type"
		},
		"225": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "walletInstance"
		},
		"226": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type.createWalletInstance"
		},
		"227": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type"
		},
		"228": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type"
		},
		"229": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type.connectedWallet"
		},
		"230": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type.connectedWalletAddress"
		},
		"231": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "I"
		},
		"232": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "WalletInstance"
		},
		"233": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "WalletOptions"
		},
		"234": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type"
		},
		"235": {
			"sourceFileName": "src/core/types/wallet.ts",
			"qualifiedName": "__type.chain"
		},
		"244": {
			"sourceFileName": "src/evm/contexts/thirdweb-auth.tsx",
			"qualifiedName": "ThirdwebAuthConfig"
		},
		"245": {
			"sourceFileName": "src/evm/contexts/thirdweb-auth.tsx",
			"qualifiedName": "ThirdwebAuthConfig.authUrl"
		},
		"246": {
			"sourceFileName": "src/evm/contexts/thirdweb-auth.tsx",
			"qualifiedName": "ThirdwebAuthConfig.domain"
		},
		"247": {
			"sourceFileName": "src/evm/contexts/thirdweb-auth.tsx",
			"qualifiedName": "ThirdwebAuthConfig.secureStorage"
		},
		"248": {
			"sourceFileName": "src/evm/contexts/thirdweb-auth.tsx",
			"qualifiedName": "ISecureStorage"
		},
		"249": {
			"sourceFileName": "src/evm/contexts/thirdweb-auth.tsx",
			"qualifiedName": "ISecureStorage.getItem"
		},
		"250": {
			"sourceFileName": "src/evm/contexts/thirdweb-auth.tsx",
			"qualifiedName": "ISecureStorage.getItem"
		},
		"251": {
			"sourceFileName": "src/evm/contexts/thirdweb-auth.tsx",
			"qualifiedName": "key"
		},
		"252": {
			"sourceFileName": "src/evm/contexts/thirdweb-auth.tsx",
			"qualifiedName": "ISecureStorage.setItem"
		},
		"253": {
			"sourceFileName": "src/evm/contexts/thirdweb-auth.tsx",
			"qualifiedName": "ISecureStorage.setItem"
		},
		"254": {
			"sourceFileName": "src/evm/contexts/thirdweb-auth.tsx",
			"qualifiedName": "key"
		},
		"255": {
			"sourceFileName": "src/evm/contexts/thirdweb-auth.tsx",
			"qualifiedName": "value"
		},
		"256": {
			"sourceFileName": "src/evm/contexts/thirdweb-auth.tsx",
			"qualifiedName": "ISecureStorage.removeItem"
		},
		"257": {
			"sourceFileName": "src/evm/contexts/thirdweb-auth.tsx",
			"qualifiedName": "ISecureStorage.removeItem"
		},
		"258": {
			"sourceFileName": "src/evm/contexts/thirdweb-auth.tsx",
			"qualifiedName": "key"
		},
		"275": {
			"sourceFileName": "src/evm/hooks/async/claim-conditions.ts",
			"qualifiedName": "ClaimIneligibilityParams"
		},
		"276": {
			"sourceFileName": "src/evm/hooks/async/claim-conditions.ts",
			"qualifiedName": "__type"
		},
		"277": {
			"sourceFileName": "src/evm/hooks/async/claim-conditions.ts",
			"qualifiedName": "__type.walletAddress"
		},
		"278": {
			"sourceFileName": "src/evm/hooks/async/claim-conditions.ts",
			"qualifiedName": "__type.quantity"
		},
		"279": {
			"sourceFileName": "src/evm/hooks/async/claim-conditions.ts",
			"qualifiedName": "SetClaimConditionsParams"
		},
		"280": {
			"sourceFileName": "src/evm/hooks/async/claim-conditions.ts",
			"qualifiedName": "__type"
		},
		"281": {
			"sourceFileName": "src/evm/hooks/async/claim-conditions.ts",
			"qualifiedName": "__type.phases"
		},
		"282": {
			"sourceFileName": "src/evm/hooks/async/claim-conditions.ts",
			"qualifiedName": "__type.reset"
		},
		"283": {
			"sourceFileName": "src/evm/hooks/async/claim-conditions.ts",
			"qualifiedName": "useActiveClaimCondition"
		},
		"284": {
			"sourceFileName": "src/evm/hooks/async/claim-conditions.ts",
			"qualifiedName": "useActiveClaimCondition"
		},
		"285": {
			"sourceFileName": "src/evm/hooks/async/claim-conditions.ts",
			"qualifiedName": "contract"
		},
		"286": {
			"sourceFileName": "src/evm/hooks/async/claim-conditions.ts",
			"qualifiedName": "tokenId"
		},
		"287": {
			"sourceFileName": "src/evm/hooks/async/claim-conditions.ts",
			"qualifiedName": "options"
		},
		"288": {
			"sourceFileName": "src/evm/hooks/async/claim-conditions.ts",
			"qualifiedName": "useClaimerProofs"
		},
		"289": {
			"sourceFileName": "src/evm/hooks/async/claim-conditions.ts",
			"qualifiedName": "useClaimerProofs"
		},
		"290": {
			"sourceFileName": "src/evm/hooks/async/claim-conditions.ts",
			"qualifiedName": "contract"
		},
		"291": {
			"sourceFileName": "src/evm/hooks/async/claim-conditions.ts",
			"qualifiedName": "claimerAddress"
		},
		"292": {
			"sourceFileName": "src/evm/hooks/async/claim-conditions.ts",
			"qualifiedName": "tokenId"
		},
		"293": {
			"sourceFileName": "src/evm/hooks/async/claim-conditions.ts",
			"qualifiedName": "claimConditionId"
		},
		"294": {
			"sourceFileName": "src/evm/hooks/async/claim-conditions.ts",
			"qualifiedName": "__type"
		},
		"295": {
			"sourceFileName": "src/evm/hooks/async/claim-conditions.ts",
			"qualifiedName": "__type.address"
		},
		"296": {
			"sourceFileName": "src/evm/hooks/async/claim-conditions.ts",
			"qualifiedName": "__type.proof"
		},
		"297": {
			"sourceFileName": "src/evm/hooks/async/claim-conditions.ts",
			"qualifiedName": "__type.maxClaimable"
		},
		"298": {
			"sourceFileName": "src/evm/hooks/async/claim-conditions.ts",
			"qualifiedName": "__type.price"
		},
		"299": {
			"sourceFileName": "src/evm/hooks/async/claim-conditions.ts",
			"qualifiedName": "__type.currencyAddress"
		},
		"300": {
			"sourceFileName": "src/evm/hooks/async/claim-conditions.ts",
			"qualifiedName": "useClaimConditions"
		},
		"301": {
			"sourceFileName": "src/evm/hooks/async/claim-conditions.ts",
			"qualifiedName": "useClaimConditions"
		},
		"302": {
			"sourceFileName": "src/evm/hooks/async/claim-conditions.ts",
			"qualifiedName": "contract"
		},
		"303": {
			"sourceFileName": "src/evm/hooks/async/claim-conditions.ts",
			"qualifiedName": "tokenId"
		},
		"304": {
			"sourceFileName": "src/evm/hooks/async/claim-conditions.ts",
			"qualifiedName": "options"
		},
		"305": {
			"sourceFileName": "src/evm/hooks/async/claim-conditions.ts",
			"qualifiedName": "useClaimIneligibilityReasons"
		},
		"306": {
			"sourceFileName": "src/evm/hooks/async/claim-conditions.ts",
			"qualifiedName": "useClaimIneligibilityReasons"
		},
		"307": {
			"sourceFileName": "src/evm/hooks/async/claim-conditions.ts",
			"qualifiedName": "contract"
		},
		"308": {
			"sourceFileName": "src/evm/hooks/async/claim-conditions.ts",
			"qualifiedName": "params"
		},
		"309": {
			"sourceFileName": "src/evm/hooks/async/claim-conditions.ts",
			"qualifiedName": "tokenId"
		},
		"310": {
			"sourceFileName": "src/evm/hooks/async/claim-conditions.ts",
			"qualifiedName": "useActiveClaimConditionForWallet"
		},
		"311": {
			"sourceFileName": "src/evm/hooks/async/claim-conditions.ts",
			"qualifiedName": "useActiveClaimConditionForWallet"
		},
		"312": {
			"sourceFileName": "src/evm/hooks/async/claim-conditions.ts",
			"qualifiedName": "contract"
		},
		"313": {
			"sourceFileName": "src/evm/hooks/async/claim-conditions.ts",
			"qualifiedName": "walletAddress"
		},
		"314": {
			"sourceFileName": "src/evm/hooks/async/claim-conditions.ts",
			"qualifiedName": "tokenId"
		},
		"315": {
			"sourceFileName": "src/evm/hooks/async/claim-conditions.ts",
			"qualifiedName": "useSetClaimConditions"
		},
		"316": {
			"sourceFileName": "src/evm/hooks/async/claim-conditions.ts",
			"qualifiedName": "useSetClaimConditions"
		},
		"317": {
			"sourceFileName": "src/evm/hooks/async/claim-conditions.ts",
			"qualifiedName": "contract"
		},
		"318": {
			"sourceFileName": "src/evm/hooks/async/claim-conditions.ts",
			"qualifiedName": "tokenId"
		},
		"319": {
			"sourceFileName": "src/evm/hooks/async/claim-conditions.ts",
			"qualifiedName": "__type"
		},
		"320": {
			"sourceFileName": "src/evm/hooks/async/claim-conditions.ts",
			"qualifiedName": "__type.receipt"
		},
		"321": {
			"sourceFileName": "src/evm/hooks/async/claim-conditions.ts",
			"qualifiedName": "useResetClaimConditions"
		},
		"322": {
			"sourceFileName": "src/evm/hooks/async/claim-conditions.ts",
			"qualifiedName": "useResetClaimConditions"
		},
		"323": {
			"sourceFileName": "src/evm/hooks/async/claim-conditions.ts",
			"qualifiedName": "contract"
		},
		"324": {
			"sourceFileName": "src/evm/hooks/async/claim-conditions.ts",
			"qualifiedName": "tokenId"
		},
		"325": {
			"sourceFileName": "../sdk/src/evm/core/classes/drop-erc1155-claim-conditions.ts",
			"qualifiedName": "__type"
		},
		"326": {
			"sourceFileName": "src/evm/hooks/async/contract-settings.ts",
			"qualifiedName": "usePrimarySaleRecipient"
		},
		"327": {
			"sourceFileName": "src/evm/hooks/async/contract-settings.ts",
			"qualifiedName": "usePrimarySaleRecipient"
		},
		"328": {
			"sourceFileName": "src/evm/hooks/async/contract-settings.ts",
			"qualifiedName": "contract"
		},
		"329": {
			"sourceFileName": "src/evm/hooks/async/contract-settings.ts",
			"qualifiedName": "useUpdatePrimarySaleRecipient"
		},
		"330": {
			"sourceFileName": "src/evm/hooks/async/contract-settings.ts",
			"qualifiedName": "useUpdatePrimarySaleRecipient"
		},
		"331": {
			"sourceFileName": "src/evm/hooks/async/contract-settings.ts",
			"qualifiedName": "contract"
		},
		"332": {
			"sourceFileName": "src/evm/hooks/async/contract-settings.ts",
			"qualifiedName": "__type"
		},
		"333": {
			"sourceFileName": "src/evm/hooks/async/contract-settings.ts",
			"qualifiedName": "__type.receipt"
		},
		"334": {
			"sourceFileName": "src/evm/hooks/async/contract-settings.ts",
			"qualifiedName": "useRoyaltySettings"
		},
		"335": {
			"sourceFileName": "src/evm/hooks/async/contract-settings.ts",
			"qualifiedName": "useRoyaltySettings"
		},
		"336": {
			"sourceFileName": "src/evm/hooks/async/contract-settings.ts",
			"qualifiedName": "contract"
		},
		"337": {
			"sourceFileName": "src/evm/hooks/async/contract-settings.ts",
			"qualifiedName": "__type"
		},
		"338": {
			"sourceFileName": "src/evm/hooks/async/contract-settings.ts",
			"qualifiedName": "__type.seller_fee_basis_points"
		},
		"339": {
			"sourceFileName": "src/evm/hooks/async/contract-settings.ts",
			"qualifiedName": "__type.fee_recipient"
		},
		"340": {
			"sourceFileName": "src/evm/hooks/async/contract-settings.ts",
			"qualifiedName": "useUpdateRoyaltySettings"
		},
		"341": {
			"sourceFileName": "src/evm/hooks/async/contract-settings.ts",
			"qualifiedName": "useUpdateRoyaltySettings"
		},
		"342": {
			"sourceFileName": "src/evm/hooks/async/contract-settings.ts",
			"qualifiedName": "contract"
		},
		"343": {
			"sourceFileName": "../sdk/src/evm/core/classes/contract-royalty.ts",
			"qualifiedName": "__type"
		},
		"344": {
			"sourceFileName": "src/evm/hooks/async/contract-settings.ts",
			"qualifiedName": "__type"
		},
		"345": {
			"sourceFileName": "src/evm/hooks/async/contract-settings.ts",
			"qualifiedName": "__type.seller_fee_basis_points"
		},
		"346": {
			"sourceFileName": "src/evm/hooks/async/contract-settings.ts",
			"qualifiedName": "__type.fee_recipient"
		},
		"347": {
			"sourceFileName": "src/evm/hooks/async/contract-settings.ts",
			"qualifiedName": "usePlatformFees"
		},
		"348": {
			"sourceFileName": "src/evm/hooks/async/contract-settings.ts",
			"qualifiedName": "usePlatformFees"
		},
		"349": {
			"sourceFileName": "src/evm/hooks/async/contract-settings.ts",
			"qualifiedName": "contract"
		},
		"350": {
			"sourceFileName": "src/evm/hooks/async/contract-settings.ts",
			"qualifiedName": "__type"
		},
		"351": {
			"sourceFileName": "src/evm/hooks/async/contract-settings.ts",
			"qualifiedName": "__type.platform_fee_basis_points"
		},
		"352": {
			"sourceFileName": "src/evm/hooks/async/contract-settings.ts",
			"qualifiedName": "__type.platform_fee_recipient"
		},
		"353": {
			"sourceFileName": "src/evm/hooks/async/contract-settings.ts",
			"qualifiedName": "useUpdatePlatformFees"
		},
		"354": {
			"sourceFileName": "src/evm/hooks/async/contract-settings.ts",
			"qualifiedName": "useUpdatePlatformFees"
		},
		"355": {
			"sourceFileName": "src/evm/hooks/async/contract-settings.ts",
			"qualifiedName": "contract"
		},
		"356": {
			"sourceFileName": "../sdk/src/evm/core/classes/contract-platform-fee.ts",
			"qualifiedName": "__type"
		},
		"357": {
			"sourceFileName": "src/evm/hooks/async/contract-settings.ts",
			"qualifiedName": "__type"
		},
		"358": {
			"sourceFileName": "src/evm/hooks/async/contract-settings.ts",
			"qualifiedName": "__type.platform_fee_basis_points"
		},
		"359": {
			"sourceFileName": "src/evm/hooks/async/contract-settings.ts",
			"qualifiedName": "__type.fee_recipient"
		},
		"360": {
			"sourceFileName": "src/evm/hooks/async/contract-settings.ts",
			"qualifiedName": "useMetadata"
		},
		"361": {
			"sourceFileName": "src/evm/hooks/async/contract-settings.ts",
			"qualifiedName": "useMetadata"
		},
		"362": {
			"sourceFileName": "src/evm/hooks/async/contract-settings.ts",
			"qualifiedName": "contract"
		},
		"363": {
			"sourceFileName": "src/evm/hooks/async/contract-settings.ts",
			"qualifiedName": "useUpdateMetadata"
		},
		"364": {
			"sourceFileName": "src/evm/hooks/async/contract-settings.ts",
			"qualifiedName": "useUpdateMetadata"
		},
		"365": {
			"sourceFileName": "src/evm/hooks/async/contract-settings.ts",
			"qualifiedName": "contract"
		},
		"366": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "useContractType"
		},
		"367": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "useContractType"
		},
		"368": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "contractAddress"
		},
		"385": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "useCompilerMetadata"
		},
		"386": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "useCompilerMetadata"
		},
		"387": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "contractAddress"
		},
		"404": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "useContract"
		},
		"405": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "useContract"
		},
		"406": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "contractAddress"
		},
		"407": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "useContract"
		},
		"408": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "TContractType"
		},
		"409": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "contractAddress"
		},
		"410": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "_contractType"
		},
		"411": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "useContract"
		},
		"412": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "contractAddress"
		},
		"413": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "_abi"
		},
		"414": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "useContract"
		},
		"415": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "TContractAddress"
		},
		"416": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "contractAddress"
		},
		"417": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "useContractMetadata"
		},
		"418": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "useContractMetadata"
		},
		"419": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "TContract"
		},
		"420": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "contract"
		},
		"421": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "useContractMetadataUpdate"
		},
		"422": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "useContractMetadataUpdate"
		},
		"423": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "contract"
		},
		"424": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "__type"
		},
		"425": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "__type.receipt"
		},
		"426": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "__type.data"
		},
		"427": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "__type"
		},
		"428": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "__type"
		},
		"429": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "__type"
		},
		"430": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "__type.name"
		},
		"431": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "__type.description"
		},
		"432": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "__type.image"
		},
		"433": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "__type.external_link"
		},
		"434": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "__type.app_uri"
		},
		"435": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "useContractEvents"
		},
		"436": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "useContractEvents"
		},
		"437": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "contract"
		},
		"438": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "eventName"
		},
		"439": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "options"
		},
		"440": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "__type"
		},
		"441": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "__type.queryFilter"
		},
		"442": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "__type.subscribe"
		},
		"443": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "useContractRead"
		},
		"444": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "useContractRead"
		},
		"445": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "TContractAddress"
		},
		"446": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "TContract"
		},
		"447": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "TContractInstance"
		},
		"448": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "TFunctionName"
		},
		"449": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "TArgs"
		},
		"450": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "TReturnType"
		},
		"451": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "contract"
		},
		"452": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "functionName"
		},
		"453": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "args"
		},
		"454": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "overrides"
		},
		"455": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "useContractWrite"
		},
		"456": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "useContractWrite"
		},
		"457": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "TContractAddress"
		},
		"458": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "TContract"
		},
		"459": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "TContractInstance"
		},
		"460": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "TFunctionName"
		},
		"461": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "TArgs"
		},
		"462": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "contract"
		},
		"463": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "functionName"
		},
		"464": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "__type"
		},
		"465": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "__type.args"
		},
		"466": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "__type.overrides"
		},
		"467": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "UseContractResult"
		},
		"468": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "__type"
		},
		"469": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "__type.contract"
		},
		"470": {
			"sourceFileName": "src/evm/hooks/async/contracts.ts",
			"qualifiedName": "TContract"
		},
		"471": {
			"sourceFileName": "src/evm/hooks/async/drop.ts",
			"qualifiedName": "useUnclaimedNFTs"
		},
		"472": {
			"sourceFileName": "src/evm/hooks/async/drop.ts",
			"qualifiedName": "useUnclaimedNFTs"
		},
		"473": {
			"sourceFileName": "src/evm/hooks/async/drop.ts",
			"qualifiedName": "contract"
		},
		"474": {
			"sourceFileName": "src/evm/hooks/async/drop.ts",
			"qualifiedName": "queryParams"
		},
		"475": {
			"sourceFileName": "../sdk/src/core/schema/QueryParams.ts",
			"qualifiedName": "__type"
		},
		"476": {
			"sourceFileName": "src/evm/hooks/async/drop.ts",
			"qualifiedName": "useClaimedNFTs"
		},
		"477": {
			"sourceFileName": "src/evm/hooks/async/drop.ts",
			"qualifiedName": "useClaimedNFTs"
		},
		"478": {
			"sourceFileName": "src/evm/hooks/async/drop.ts",
			"qualifiedName": "contract"
		},
		"479": {
			"sourceFileName": "src/evm/hooks/async/drop.ts",
			"qualifiedName": "queryParams"
		},
		"480": {
			"sourceFileName": "../sdk/src/core/schema/QueryParams.ts",
			"qualifiedName": "__type"
		},
		"481": {
			"sourceFileName": "src/evm/hooks/async/drop.ts",
			"qualifiedName": "useUnclaimedNFTSupply"
		},
		"482": {
			"sourceFileName": "src/evm/hooks/async/drop.ts",
			"qualifiedName": "useUnclaimedNFTSupply"
		},
		"483": {
			"sourceFileName": "src/evm/hooks/async/drop.ts",
			"qualifiedName": "contract"
		},
		"484": {
			"sourceFileName": "src/evm/hooks/async/drop.ts",
			"qualifiedName": "useClaimedNFTSupply"
		},
		"485": {
			"sourceFileName": "src/evm/hooks/async/drop.ts",
			"qualifiedName": "useClaimedNFTSupply"
		},
		"486": {
			"sourceFileName": "src/evm/hooks/async/drop.ts",
			"qualifiedName": "contract"
		},
		"487": {
			"sourceFileName": "src/evm/hooks/async/drop.ts",
			"qualifiedName": "useBatchesToReveal"
		},
		"488": {
			"sourceFileName": "src/evm/hooks/async/drop.ts",
			"qualifiedName": "useBatchesToReveal"
		},
		"489": {
			"sourceFileName": "src/evm/hooks/async/drop.ts",
			"qualifiedName": "TContract"
		},
		"490": {
			"sourceFileName": "src/evm/hooks/async/drop.ts",
			"qualifiedName": "contract"
		},
		"491": {
			"sourceFileName": "src/evm/hooks/async/drop.ts",
			"qualifiedName": "useClaimNFT"
		},
		"492": {
			"sourceFileName": "src/evm/hooks/async/drop.ts",
			"qualifiedName": "useClaimNFT"
		},
		"493": {
			"sourceFileName": "src/evm/hooks/async/drop.ts",
			"qualifiedName": "TContract"
		},
		"494": {
			"sourceFileName": "src/evm/hooks/async/drop.ts",
			"qualifiedName": "contract"
		},
		"495": {
			"sourceFileName": "src/evm/hooks/async/drop.ts",
			"qualifiedName": "useLazyMint"
		},
		"496": {
			"sourceFileName": "src/evm/hooks/async/drop.ts",
			"qualifiedName": "useLazyMint"
		},
		"497": {
			"sourceFileName": "src/evm/hooks/async/drop.ts",
			"qualifiedName": "TContract"
		},
		"498": {
			"sourceFileName": "src/evm/hooks/async/drop.ts",
			"qualifiedName": "contract"
		},
		"499": {
			"sourceFileName": "src/evm/hooks/async/drop.ts",
			"qualifiedName": "onProgress"
		},
		"500": {
			"sourceFileName": "src/evm/hooks/async/drop.ts",
			"qualifiedName": "__type"
		},
		"501": {
			"sourceFileName": "src/evm/hooks/async/drop.ts",
			"qualifiedName": "__type"
		},
		"502": {
			"sourceFileName": "src/evm/hooks/async/drop.ts",
			"qualifiedName": "progress"
		},
		"503": {
			"sourceFileName": "src/evm/hooks/async/drop.ts",
			"qualifiedName": "useDelayedRevealLazyMint"
		},
		"504": {
			"sourceFileName": "src/evm/hooks/async/drop.ts",
			"qualifiedName": "useDelayedRevealLazyMint"
		},
		"505": {
			"sourceFileName": "src/evm/hooks/async/drop.ts",
			"qualifiedName": "TContract"
		},
		"506": {
			"sourceFileName": "src/evm/hooks/async/drop.ts",
			"qualifiedName": "contract"
		},
		"507": {
			"sourceFileName": "src/evm/hooks/async/drop.ts",
			"qualifiedName": "onProgress"
		},
		"508": {
			"sourceFileName": "src/evm/hooks/async/drop.ts",
			"qualifiedName": "__type"
		},
		"509": {
			"sourceFileName": "src/evm/hooks/async/drop.ts",
			"qualifiedName": "__type"
		},
		"510": {
			"sourceFileName": "src/evm/hooks/async/drop.ts",
			"qualifiedName": "progress"
		},
		"511": {
			"sourceFileName": "src/evm/hooks/async/drop.ts",
			"qualifiedName": "useRevealLazyMint"
		},
		"512": {
			"sourceFileName": "src/evm/hooks/async/drop.ts",
			"qualifiedName": "useRevealLazyMint"
		},
		"513": {
			"sourceFileName": "src/evm/hooks/async/drop.ts",
			"qualifiedName": "TContract"
		},
		"514": {
			"sourceFileName": "src/evm/hooks/async/drop.ts",
			"qualifiedName": "contract"
		},
		"515": {
			"sourceFileName": "src/evm/hooks/async/drop.ts",
			"qualifiedName": "__type"
		},
		"516": {
			"sourceFileName": "src/evm/hooks/async/drop.ts",
			"qualifiedName": "__type.receipt"
		},
		"517": {
			"sourceFileName": "src/evm/hooks/async/drop.ts",
			"qualifiedName": "__type.data"
		},
		"518": {
			"sourceFileName": "src/evm/hooks/async/drop.ts",
			"qualifiedName": "__type"
		},
		"519": {
			"sourceFileName": "src/evm/hooks/async/drop.ts",
			"qualifiedName": "__type"
		},
		"520": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useListing"
		},
		"521": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useListing"
		},
		"522": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "contract"
		},
		"523": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "listingId"
		},
		"524": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useDirectListing"
		},
		"525": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useDirectListing"
		},
		"526": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "contract"
		},
		"527": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "listingId"
		},
		"528": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useEnglishAuction"
		},
		"529": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useEnglishAuction"
		},
		"530": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "contract"
		},
		"531": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "auctionId"
		},
		"532": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useListings"
		},
		"533": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useListings"
		},
		"534": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "contract"
		},
		"535": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "filter"
		},
		"536": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useDirectListings"
		},
		"537": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useDirectListings"
		},
		"538": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "contract"
		},
		"539": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "filter"
		},
		"540": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useValidDirectListings"
		},
		"541": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useValidDirectListings"
		},
		"542": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "contract"
		},
		"543": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "filter"
		},
		"544": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useEnglishAuctions"
		},
		"545": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useEnglishAuctions"
		},
		"546": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "contract"
		},
		"547": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "filter"
		},
		"548": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useValidEnglishAuctions"
		},
		"549": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useValidEnglishAuctions"
		},
		"550": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "contract"
		},
		"551": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "filter"
		},
		"552": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useListingsCount"
		},
		"553": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useListingsCount"
		},
		"554": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "contract"
		},
		"555": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useDirectListingsCount"
		},
		"556": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useDirectListingsCount"
		},
		"557": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "contract"
		},
		"558": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useEnglishAuctionsCount"
		},
		"559": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useEnglishAuctionsCount"
		},
		"560": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "contract"
		},
		"561": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useActiveListings"
		},
		"562": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useActiveListings"
		},
		"563": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "contract"
		},
		"564": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "filter"
		},
		"565": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useWinningBid"
		},
		"566": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useWinningBid"
		},
		"567": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "contract"
		},
		"568": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "listingId"
		},
		"569": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useEnglishAuctionWinningBid"
		},
		"570": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useEnglishAuctionWinningBid"
		},
		"571": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "contract"
		},
		"572": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "auctionId"
		},
		"573": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useAuctionWinner"
		},
		"574": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useAuctionWinner"
		},
		"575": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "contract"
		},
		"576": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "listingId"
		},
		"577": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useBidBuffer"
		},
		"578": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useBidBuffer"
		},
		"579": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "contract"
		},
		"580": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "listingId"
		},
		"581": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useMinimumNextBid"
		},
		"582": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useMinimumNextBid"
		},
		"583": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "contract"
		},
		"584": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "listingId"
		},
		"585": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "__type"
		},
		"586": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "__type.symbol"
		},
		"587": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "__type.value"
		},
		"588": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "__type.name"
		},
		"589": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "__type.decimals"
		},
		"590": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "__type.displayValue"
		},
		"591": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useCreateDirectListing"
		},
		"592": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useCreateDirectListing"
		},
		"593": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "TMarketplace"
		},
		"594": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "contract"
		},
		"595": {
			"sourceFileName": "../sdk/src/evm/schema/marketplacev3/direct-listings.ts",
			"qualifiedName": "__type"
		},
		"596": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useCreateAuctionListing"
		},
		"597": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useCreateAuctionListing"
		},
		"598": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "TMarketplace"
		},
		"599": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "contract"
		},
		"600": {
			"sourceFileName": "../sdk/src/evm/schema/marketplacev3/english-auctions.ts",
			"qualifiedName": "__type"
		},
		"601": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useCancelListing"
		},
		"602": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useCancelListing"
		},
		"603": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "contract"
		},
		"604": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "__type"
		},
		"605": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "__type.receipt"
		},
		"606": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "__type.data"
		},
		"607": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "__type"
		},
		"608": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "__type"
		},
		"609": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useCancelDirectListing"
		},
		"610": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useCancelDirectListing"
		},
		"611": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "contract"
		},
		"612": {
			"sourceFileName": "../sdk/src/evm/core/classes/marketplacev3-direct-listings.ts",
			"qualifiedName": "__type"
		},
		"613": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useCancelEnglishAuction"
		},
		"614": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useCancelEnglishAuction"
		},
		"615": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "contract"
		},
		"616": {
			"sourceFileName": "../sdk/src/evm/core/classes/marketplacev3-english-auction.ts",
			"qualifiedName": "__type"
		},
		"617": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useMakeBid"
		},
		"618": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useMakeBid"
		},
		"619": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "contract"
		},
		"620": {
			"sourceFileName": "../sdk/src/evm/core/classes/internal/marketplace/marketplace-auction.ts",
			"qualifiedName": "__type"
		},
		"621": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useMakeOffer"
		},
		"622": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useMakeOffer"
		},
		"623": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "contract"
		},
		"624": {
			"sourceFileName": "../sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts",
			"qualifiedName": "__type"
		},
		"625": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useAcceptDirectListingOffer"
		},
		"626": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useAcceptDirectListingOffer"
		},
		"627": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "contract"
		},
		"628": {
			"sourceFileName": "../sdk/src/evm/core/classes/internal/marketplace/marketplace-direct.ts",
			"qualifiedName": "__type"
		},
		"629": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useExecuteAuctionSale"
		},
		"630": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useExecuteAuctionSale"
		},
		"631": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "contract"
		},
		"632": {
			"sourceFileName": "../sdk/src/evm/core/classes/internal/marketplace/marketplace-auction.ts",
			"qualifiedName": "__type"
		},
		"633": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useOffers"
		},
		"634": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useOffers"
		},
		"635": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "contract"
		},
		"636": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "listingId"
		},
		"637": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "__object"
		},
		"638": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "__object.data"
		},
		"639": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverRefetchErrorResult.error"
		},
		"640": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverRefetchErrorResult.isError"
		},
		"641": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverRefetchErrorResult.isLoading"
		},
		"642": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverRefetchErrorResult.isLoadingError"
		},
		"643": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverRefetchErrorResult.isRefetchError"
		},
		"644": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverRefetchErrorResult.isSuccess"
		},
		"645": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverRefetchErrorResult.status"
		},
		"646": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.dataUpdatedAt"
		},
		"647": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.errorUpdatedAt"
		},
		"648": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.failureCount"
		},
		"649": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.failureReason"
		},
		"650": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.errorUpdateCount"
		},
		"651": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.isFetched"
		},
		"652": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.isFetchedAfterMount"
		},
		"653": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.isFetching"
		},
		"654": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.isInitialLoading"
		},
		"655": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.isPaused"
		},
		"656": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.isPlaceholderData"
		},
		"657": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.isPreviousData"
		},
		"658": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.isRefetching"
		},
		"659": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.isStale"
		},
		"660": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.refetch"
		},
		"661": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "__type"
		},
		"662": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "__type"
		},
		"663": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "TPageData"
		},
		"664": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "options"
		},
		"665": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.remove"
		},
		"666": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "__type"
		},
		"667": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "__type"
		},
		"668": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.fetchStatus"
		},
		"669": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "__object"
		},
		"670": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "__object.data"
		},
		"671": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverSuccessResult.error"
		},
		"672": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverSuccessResult.isError"
		},
		"673": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverSuccessResult.isLoading"
		},
		"674": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverSuccessResult.isLoadingError"
		},
		"675": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverSuccessResult.isRefetchError"
		},
		"676": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverSuccessResult.isSuccess"
		},
		"677": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverSuccessResult.status"
		},
		"678": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.dataUpdatedAt"
		},
		"679": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.errorUpdatedAt"
		},
		"680": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.failureCount"
		},
		"681": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.failureReason"
		},
		"682": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.errorUpdateCount"
		},
		"683": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.isFetched"
		},
		"684": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.isFetchedAfterMount"
		},
		"685": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.isFetching"
		},
		"686": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.isInitialLoading"
		},
		"687": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.isPaused"
		},
		"688": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.isPlaceholderData"
		},
		"689": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.isPreviousData"
		},
		"690": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.isRefetching"
		},
		"691": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.isStale"
		},
		"692": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.refetch"
		},
		"693": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "__type"
		},
		"694": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "__type"
		},
		"695": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "TPageData"
		},
		"696": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "options"
		},
		"697": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.remove"
		},
		"698": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "__type"
		},
		"699": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "__type"
		},
		"700": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.fetchStatus"
		},
		"701": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "__object"
		},
		"702": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "__object.data"
		},
		"703": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverLoadingErrorResult.error"
		},
		"704": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverLoadingErrorResult.isError"
		},
		"705": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverLoadingErrorResult.isLoading"
		},
		"706": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverLoadingErrorResult.isLoadingError"
		},
		"707": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverLoadingErrorResult.isRefetchError"
		},
		"708": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverLoadingErrorResult.isSuccess"
		},
		"709": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverLoadingErrorResult.status"
		},
		"710": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.dataUpdatedAt"
		},
		"711": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.errorUpdatedAt"
		},
		"712": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.failureCount"
		},
		"713": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.failureReason"
		},
		"714": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.errorUpdateCount"
		},
		"715": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.isFetched"
		},
		"716": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.isFetchedAfterMount"
		},
		"717": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.isFetching"
		},
		"718": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.isInitialLoading"
		},
		"719": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.isPaused"
		},
		"720": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.isPlaceholderData"
		},
		"721": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.isPreviousData"
		},
		"722": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.isRefetching"
		},
		"723": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.isStale"
		},
		"724": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.refetch"
		},
		"725": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "__type"
		},
		"726": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "__type"
		},
		"727": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "TPageData"
		},
		"728": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "options"
		},
		"729": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.remove"
		},
		"730": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "__type"
		},
		"731": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "__type"
		},
		"732": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.fetchStatus"
		},
		"733": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "__object"
		},
		"734": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "__object.data"
		},
		"735": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverLoadingResult.error"
		},
		"736": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverLoadingResult.isError"
		},
		"737": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverLoadingResult.isLoading"
		},
		"738": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverLoadingResult.isLoadingError"
		},
		"739": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverLoadingResult.isRefetchError"
		},
		"740": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverLoadingResult.isSuccess"
		},
		"741": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverLoadingResult.status"
		},
		"742": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.dataUpdatedAt"
		},
		"743": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.errorUpdatedAt"
		},
		"744": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.failureCount"
		},
		"745": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.failureReason"
		},
		"746": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.errorUpdateCount"
		},
		"747": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.isFetched"
		},
		"748": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.isFetchedAfterMount"
		},
		"749": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.isFetching"
		},
		"750": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.isInitialLoading"
		},
		"751": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.isPaused"
		},
		"752": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.isPlaceholderData"
		},
		"753": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.isPreviousData"
		},
		"754": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.isRefetching"
		},
		"755": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.isStale"
		},
		"756": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.refetch"
		},
		"757": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "__type"
		},
		"758": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "__type"
		},
		"759": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "TPageData"
		},
		"760": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "options"
		},
		"761": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.remove"
		},
		"762": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "__type"
		},
		"763": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "__type"
		},
		"764": {
			"sourceFileName": "../../node_modules/.pnpm/@tanstack+query-core@4.33.0/node_modules/@tanstack/query-core/src/types.ts",
			"qualifiedName": "QueryObserverBaseResult.fetchStatus"
		},
		"765": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useBuyNow"
		},
		"766": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useBuyNow"
		},
		"767": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "contract"
		},
		"768": {
			"sourceFileName": "../sdk/src/evm/core/classes/internal/marketplace/marketplace-direct.ts",
			"qualifiedName": "__type"
		},
		"769": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useBuyDirectListing"
		},
		"770": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useBuyDirectListing"
		},
		"771": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "contract"
		},
		"772": {
			"sourceFileName": "../sdk/src/evm/core/classes/marketplacev3-direct-listings.ts",
			"qualifiedName": "__type"
		},
		"773": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useCreateDirectListingBatch"
		},
		"774": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "useCreateDirectListingBatch"
		},
		"775": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "TMarketplaceV3"
		},
		"776": {
			"sourceFileName": "src/evm/hooks/async/marketplace.ts",
			"qualifiedName": "contract"
		},
		"777": {
			"sourceFileName": "../sdk/src/evm/schema/marketplacev3/direct-listings.ts",
			"qualifiedName": "__type"
		},
		"778": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "useNFT"
		},
		"779": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "useNFT"
		},
		"780": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "TContract"
		},
		"781": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "contract"
		},
		"782": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "tokenId"
		},
		"783": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "useNFTs"
		},
		"784": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "useNFTs"
		},
		"785": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "TContract"
		},
		"786": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "contract"
		},
		"787": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "queryParams"
		},
		"788": {
			"sourceFileName": "../sdk/src/core/schema/QueryParams.ts",
			"qualifiedName": "__type"
		},
		"789": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "useTotalCount"
		},
		"790": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "useTotalCount"
		},
		"791": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "TContract"
		},
		"792": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "contract"
		},
		"793": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "useTotalCirculatingSupply"
		},
		"794": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "useTotalCirculatingSupply"
		},
		"795": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "contract"
		},
		"796": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "tokenId"
		},
		"797": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "useOwnedNFTs"
		},
		"798": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "useOwnedNFTs"
		},
		"799": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "TContract"
		},
		"800": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "contract"
		},
		"801": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "ownerWalletAddress"
		},
		"802": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "queryParams"
		},
		"803": {
			"sourceFileName": "../sdk/src/core/schema/QueryParams.ts",
			"qualifiedName": "__type"
		},
		"804": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "useNFTBalance"
		},
		"805": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "useNFTBalance"
		},
		"806": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "contract"
		},
		"807": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "ownerWalletAddress"
		},
		"808": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "tokenId"
		},
		"809": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "useMintNFT"
		},
		"810": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "useMintNFT"
		},
		"811": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "TContract"
		},
		"812": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "contract"
		},
		"813": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "useMintNFTSupply"
		},
		"814": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "useMintNFTSupply"
		},
		"815": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "contract"
		},
		"816": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "useTransferNFT"
		},
		"817": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "useTransferNFT"
		},
		"818": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "TContract"
		},
		"819": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "contract"
		},
		"820": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "__type"
		},
		"821": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "__type.receipt"
		},
		"822": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "__type.data"
		},
		"823": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "__type"
		},
		"824": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "__type"
		},
		"825": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "useAirdropNFT"
		},
		"826": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "useAirdropNFT"
		},
		"827": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "contract"
		},
		"828": {
			"sourceFileName": "../sdk/src/evm/core/classes/erc-1155.ts",
			"qualifiedName": "__type"
		},
		"829": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "useBurnNFT"
		},
		"830": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "useBurnNFT"
		},
		"831": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "TContract"
		},
		"832": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "contract"
		},
		"833": {
			"sourceFileName": "../sdk/src/evm/core/classes/erc-1155.ts",
			"qualifiedName": "__type"
		},
		"834": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "useSharedMetadata"
		},
		"835": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "useSharedMetadata"
		},
		"836": {
			"sourceFileName": "src/evm/hooks/async/nft.ts",
			"qualifiedName": "contract"
		},
		"843": {
			"sourceFileName": "src/evm/hooks/async/roles.ts",
			"qualifiedName": "useAllRoleMembers"
		},
		"844": {
			"sourceFileName": "src/evm/hooks/async/roles.ts",
			"qualifiedName": "useAllRoleMembers"
		},
		"845": {
			"sourceFileName": "src/evm/hooks/async/roles.ts",
			"qualifiedName": "TContract"
		},
		"846": {
			"sourceFileName": "src/evm/hooks/async/roles.ts",
			"qualifiedName": "contract"
		},
		"847": {
			"sourceFileName": "src/evm/hooks/async/roles.ts",
			"qualifiedName": "useRoleMembers"
		},
		"848": {
			"sourceFileName": "src/evm/hooks/async/roles.ts",
			"qualifiedName": "useRoleMembers"
		},
		"849": {
			"sourceFileName": "src/evm/hooks/async/roles.ts",
			"qualifiedName": "TContract"
		},
		"850": {
			"sourceFileName": "src/evm/hooks/async/roles.ts",
			"qualifiedName": "contract"
		},
		"851": {
			"sourceFileName": "src/evm/hooks/async/roles.ts",
			"qualifiedName": "role"
		},
		"852": {
			"sourceFileName": "src/evm/hooks/async/roles.ts",
			"qualifiedName": "useIsAddressRole"
		},
		"853": {
			"sourceFileName": "src/evm/hooks/async/roles.ts",
			"qualifiedName": "useIsAddressRole"
		},
		"854": {
			"sourceFileName": "src/evm/hooks/async/roles.ts",
			"qualifiedName": "TContract"
		},
		"855": {
			"sourceFileName": "src/evm/hooks/async/roles.ts",
			"qualifiedName": "contract"
		},
		"856": {
			"sourceFileName": "src/evm/hooks/async/roles.ts",
			"qualifiedName": "role"
		},
		"857": {
			"sourceFileName": "src/evm/hooks/async/roles.ts",
			"qualifiedName": "walletAddress"
		},
		"858": {
			"sourceFileName": "src/evm/hooks/async/roles.ts",
			"qualifiedName": "useSetAllRoleMembers"
		},
		"859": {
			"sourceFileName": "src/evm/hooks/async/roles.ts",
			"qualifiedName": "useSetAllRoleMembers"
		},
		"860": {
			"sourceFileName": "src/evm/hooks/async/roles.ts",
			"qualifiedName": "TContract"
		},
		"861": {
			"sourceFileName": "src/evm/hooks/async/roles.ts",
			"qualifiedName": "contract"
		},
		"862": {
			"sourceFileName": "src/evm/hooks/async/roles.ts",
			"qualifiedName": "useGrantRole"
		},
		"863": {
			"sourceFileName": "src/evm/hooks/async/roles.ts",
			"qualifiedName": "useGrantRole"
		},
		"864": {
			"sourceFileName": "src/evm/hooks/async/roles.ts",
			"qualifiedName": "TContract"
		},
		"865": {
			"sourceFileName": "src/evm/hooks/async/roles.ts",
			"qualifiedName": "contract"
		},
		"866": {
			"sourceFileName": "src/evm/hooks/async/roles.ts",
			"qualifiedName": "__type"
		},
		"867": {
			"sourceFileName": "src/evm/hooks/async/roles.ts",
			"qualifiedName": "__type.role"
		},
		"868": {
			"sourceFileName": "src/evm/hooks/async/roles.ts",
			"qualifiedName": "__type.address"
		},
		"869": {
			"sourceFileName": "src/evm/hooks/async/roles.ts",
			"qualifiedName": "useRevokeRole"
		},
		"870": {
			"sourceFileName": "src/evm/hooks/async/roles.ts",
			"qualifiedName": "useRevokeRole"
		},
		"871": {
			"sourceFileName": "src/evm/hooks/async/roles.ts",
			"qualifiedName": "TContract"
		},
		"872": {
			"sourceFileName": "src/evm/hooks/async/roles.ts",
			"qualifiedName": "contract"
		},
		"873": {
			"sourceFileName": "src/evm/hooks/async/roles.ts",
			"qualifiedName": "__type"
		},
		"874": {
			"sourceFileName": "src/evm/hooks/async/roles.ts",
			"qualifiedName": "__type.role"
		},
		"875": {
			"sourceFileName": "src/evm/hooks/async/roles.ts",
			"qualifiedName": "__type.address"
		},
		"877": {
			"sourceFileName": "src/evm/hooks/async/roles.ts",
			"qualifiedName": "RolesForContract"
		},
		"878": {
			"sourceFileName": "src/evm/hooks/async/roles.ts",
			"qualifiedName": "__type"
		},
		"879": {
			"sourceFileName": "src/evm/hooks/async/roles.ts",
			"qualifiedName": "TContract"
		},
		"880": {
			"sourceFileName": "src/evm/hooks/async/token.ts",
			"qualifiedName": "useTokenSupply"
		},
		"881": {
			"sourceFileName": "src/evm/hooks/async/token.ts",
			"qualifiedName": "useTokenSupply"
		},
		"882": {
			"sourceFileName": "src/evm/hooks/async/token.ts",
			"qualifiedName": "contract"
		},
		"883": {
			"sourceFileName": "src/evm/hooks/async/token.ts",
			"qualifiedName": "__type"
		},
		"884": {
			"sourceFileName": "src/evm/hooks/async/token.ts",
			"qualifiedName": "__type.symbol"
		},
		"885": {
			"sourceFileName": "src/evm/hooks/async/token.ts",
			"qualifiedName": "__type.value"
		},
		"886": {
			"sourceFileName": "src/evm/hooks/async/token.ts",
			"qualifiedName": "__type.name"
		},
		"887": {
			"sourceFileName": "src/evm/hooks/async/token.ts",
			"qualifiedName": "__type.decimals"
		},
		"888": {
			"sourceFileName": "src/evm/hooks/async/token.ts",
			"qualifiedName": "__type.displayValue"
		},
		"889": {
			"sourceFileName": "src/evm/hooks/async/token.ts",
			"qualifiedName": "useTokenBalance"
		},
		"890": {
			"sourceFileName": "src/evm/hooks/async/token.ts",
			"qualifiedName": "useTokenBalance"
		},
		"891": {
			"sourceFileName": "src/evm/hooks/async/token.ts",
			"qualifiedName": "contract"
		},
		"892": {
			"sourceFileName": "src/evm/hooks/async/token.ts",
			"qualifiedName": "walletAddress"
		},
		"893": {
			"sourceFileName": "src/evm/hooks/async/token.ts",
			"qualifiedName": "__type"
		},
		"894": {
			"sourceFileName": "src/evm/hooks/async/token.ts",
			"qualifiedName": "__type.symbol"
		},
		"895": {
			"sourceFileName": "src/evm/hooks/async/token.ts",
			"qualifiedName": "__type.value"
		},
		"896": {
			"sourceFileName": "src/evm/hooks/async/token.ts",
			"qualifiedName": "__type.name"
		},
		"897": {
			"sourceFileName": "src/evm/hooks/async/token.ts",
			"qualifiedName": "__type.decimals"
		},
		"898": {
			"sourceFileName": "src/evm/hooks/async/token.ts",
			"qualifiedName": "__type.displayValue"
		},
		"899": {
			"sourceFileName": "src/evm/hooks/async/token.ts",
			"qualifiedName": "useTokenDecimals"
		},
		"900": {
			"sourceFileName": "src/evm/hooks/async/token.ts",
			"qualifiedName": "useTokenDecimals"
		},
		"901": {
			"sourceFileName": "src/evm/hooks/async/token.ts",
			"qualifiedName": "contract"
		},
		"902": {
			"sourceFileName": "src/evm/hooks/async/token.ts",
			"qualifiedName": "useMintToken"
		},
		"903": {
			"sourceFileName": "src/evm/hooks/async/token.ts",
			"qualifiedName": "useMintToken"
		},
		"904": {
			"sourceFileName": "src/evm/hooks/async/token.ts",
			"qualifiedName": "contract"
		},
		"905": {
			"sourceFileName": "src/evm/hooks/async/token.ts",
			"qualifiedName": "__type"
		},
		"906": {
			"sourceFileName": "src/evm/hooks/async/token.ts",
			"qualifiedName": "__type.receipt"
		},
		"907": {
			"sourceFileName": "src/evm/hooks/async/token.ts",
			"qualifiedName": "__type.data"
		},
		"908": {
			"sourceFileName": "src/evm/hooks/async/token.ts",
			"qualifiedName": "__type"
		},
		"909": {
			"sourceFileName": "src/evm/hooks/async/token.ts",
			"qualifiedName": "__type"
		},
		"910": {
			"sourceFileName": "src/evm/hooks/async/token.ts",
			"qualifiedName": "useClaimToken"
		},
		"911": {
			"sourceFileName": "src/evm/hooks/async/token.ts",
			"qualifiedName": "useClaimToken"
		},
		"912": {
			"sourceFileName": "src/evm/hooks/async/token.ts",
			"qualifiedName": "contract"
		},
		"913": {
			"sourceFileName": "../sdk/src/evm/core/classes/erc-20.ts",
			"qualifiedName": "__type"
		},
		"914": {
			"sourceFileName": "src/evm/hooks/async/token.ts",
			"qualifiedName": "useTransferToken"
		},
		"915": {
			"sourceFileName": "src/evm/hooks/async/token.ts",
			"qualifiedName": "useTransferToken"
		},
		"916": {
			"sourceFileName": "src/evm/hooks/async/token.ts",
			"qualifiedName": "contract"
		},
		"917": {
			"sourceFileName": "../sdk/src/evm/core/classes/erc-20.ts",
			"qualifiedName": "__type"
		},
		"918": {
			"sourceFileName": "src/evm/hooks/async/token.ts",
			"qualifiedName": "useTransferBatchToken"
		},
		"919": {
			"sourceFileName": "src/evm/hooks/async/token.ts",
			"qualifiedName": "useTransferBatchToken"
		},
		"920": {
			"sourceFileName": "src/evm/hooks/async/token.ts",
			"qualifiedName": "contract"
		},
		"921": {
			"sourceFileName": "../sdk/src/evm/core/classes/erc-20.ts",
			"qualifiedName": "__type"
		},
		"922": {
			"sourceFileName": "src/evm/hooks/async/token.ts",
			"qualifiedName": "useBurnToken"
		},
		"923": {
			"sourceFileName": "src/evm/hooks/async/token.ts",
			"qualifiedName": "useBurnToken"
		},
		"924": {
			"sourceFileName": "src/evm/hooks/async/token.ts",
			"qualifiedName": "contract"
		},
		"925": {
			"sourceFileName": "../sdk/src/evm/core/classes/erc-20.ts",
			"qualifiedName": "__type"
		},
		"926": {
			"sourceFileName": "src/evm/hooks/async/token.ts",
			"qualifiedName": "useTransferNativeToken"
		},
		"927": {
			"sourceFileName": "src/evm/hooks/async/token.ts",
			"qualifiedName": "useTransferNativeToken"
		},
		"928": {
			"sourceFileName": "src/evm/hooks/async/account-factory.ts",
			"qualifiedName": "useIsAccountDeployed"
		},
		"929": {
			"sourceFileName": "src/evm/hooks/async/account-factory.ts",
			"qualifiedName": "useIsAccountDeployed"
		},
		"930": {
			"sourceFileName": "src/evm/hooks/async/account-factory.ts",
			"qualifiedName": "contract"
		},
		"931": {
			"sourceFileName": "src/evm/hooks/async/account-factory.ts",
			"qualifiedName": "admin"
		},
		"932": {
			"sourceFileName": "src/evm/hooks/async/account-factory.ts",
			"qualifiedName": "extraData"
		},
		"933": {
			"sourceFileName": "src/evm/hooks/async/account-factory.ts",
			"qualifiedName": "useAccounts"
		},
		"934": {
			"sourceFileName": "src/evm/hooks/async/account-factory.ts",
			"qualifiedName": "useAccounts"
		},
		"935": {
			"sourceFileName": "src/evm/hooks/async/account-factory.ts",
			"qualifiedName": "contract"
		},
		"936": {
			"sourceFileName": "src/evm/hooks/async/account-factory.ts",
			"qualifiedName": "useCreateAccount"
		},
		"937": {
			"sourceFileName": "src/evm/hooks/async/account-factory.ts",
			"qualifiedName": "useCreateAccount"
		},
		"938": {
			"sourceFileName": "src/evm/hooks/async/account-factory.ts",
			"qualifiedName": "contract"
		},
		"939": {
			"sourceFileName": "src/evm/hooks/async/account-factory.ts",
			"qualifiedName": "useAccountsForAddress"
		},
		"940": {
			"sourceFileName": "src/evm/hooks/async/account-factory.ts",
			"qualifiedName": "useAccountsForAddress"
		},
		"941": {
			"sourceFileName": "src/evm/hooks/async/account-factory.ts",
			"qualifiedName": "contract"
		},
		"942": {
			"sourceFileName": "src/evm/hooks/async/account-factory.ts",
			"qualifiedName": "address"
		},
		"943": {
			"sourceFileName": "src/evm/hooks/async/account.ts",
			"qualifiedName": "useAccountSigners"
		},
		"944": {
			"sourceFileName": "src/evm/hooks/async/account.ts",
			"qualifiedName": "useAccountSigners"
		},
		"945": {
			"sourceFileName": "src/evm/hooks/async/account.ts",
			"qualifiedName": "contract"
		},
		"946": {
			"sourceFileName": "src/evm/hooks/async/account.ts",
			"qualifiedName": "useAddAdmin"
		},
		"947": {
			"sourceFileName": "src/evm/hooks/async/account.ts",
			"qualifiedName": "useAddAdmin"
		},
		"948": {
			"sourceFileName": "src/evm/hooks/async/account.ts",
			"qualifiedName": "useRemoveAdmin"
		},
		"949": {
			"sourceFileName": "src/evm/hooks/async/account.ts",
			"qualifiedName": "useRemoveAdmin"
		},
		"950": {
			"sourceFileName": "src/evm/hooks/async/account.ts",
			"qualifiedName": "useCreateSessionKey"
		},
		"951": {
			"sourceFileName": "src/evm/hooks/async/account.ts",
			"qualifiedName": "useCreateSessionKey"
		},
		"952": {
			"sourceFileName": "src/evm/hooks/async/account.ts",
			"qualifiedName": "useRevokeSessionKey"
		},
		"953": {
			"sourceFileName": "src/evm/hooks/async/account.ts",
			"qualifiedName": "useRevokeSessionKey"
		},
		"954": {
			"sourceFileName": "src/evm/hooks/async/account.ts",
			"qualifiedName": "useAccountAdmins"
		},
		"955": {
			"sourceFileName": "src/evm/hooks/async/account.ts",
			"qualifiedName": "useAccountAdmins"
		},
		"956": {
			"sourceFileName": "src/evm/hooks/async/account.ts",
			"qualifiedName": "contract"
		},
		"957": {
			"sourceFileName": "src/evm/hooks/async/account.ts",
			"qualifiedName": "useAccountAdminsAndSigners"
		},
		"958": {
			"sourceFileName": "src/evm/hooks/async/account.ts",
			"qualifiedName": "useAccountAdminsAndSigners"
		},
		"959": {
			"sourceFileName": "src/evm/hooks/async/account.ts",
			"qualifiedName": "contract"
		},
		"960": {
			"sourceFileName": "src/evm/hooks/auth/useAuth.ts",
			"qualifiedName": "useAuth"
		},
		"961": {
			"sourceFileName": "src/evm/hooks/auth/useAuth.ts",
			"qualifiedName": "useAuth"
		},
		"962": {
			"sourceFileName": "src/evm/hooks/auth/useLogin.ts",
			"qualifiedName": "useLogin"
		},
		"963": {
			"sourceFileName": "src/evm/hooks/auth/useLogin.ts",
			"qualifiedName": "useLogin"
		},
		"964": {
			"sourceFileName": "src/evm/hooks/auth/useLogin.ts",
			"qualifiedName": "__object"
		},
		"965": {
			"sourceFileName": "src/evm/hooks/auth/useLogin.ts",
			"qualifiedName": "__object.login"
		},
		"966": {
			"sourceFileName": "src/evm/hooks/auth/useLogin.ts",
			"qualifiedName": "__function"
		},
		"967": {
			"sourceFileName": "src/evm/hooks/auth/useLogin.ts",
			"qualifiedName": "__function"
		},
		"968": {
			"sourceFileName": "src/evm/hooks/auth/useLogin.ts",
			"qualifiedName": "__object.isLoading"
		},
		"969": {
			"sourceFileName": "src/evm/hooks/auth/useLogout.ts",
			"qualifiedName": "useLogout"
		},
		"970": {
			"sourceFileName": "src/evm/hooks/auth/useLogout.ts",
			"qualifiedName": "useLogout"
		},
		"971": {
			"sourceFileName": "src/evm/hooks/auth/useLogout.ts",
			"qualifiedName": "__object"
		},
		"972": {
			"sourceFileName": "src/evm/hooks/auth/useLogout.ts",
			"qualifiedName": "__object.logout"
		},
		"973": {
			"sourceFileName": "src/evm/hooks/auth/useLogout.ts",
			"qualifiedName": "__object.isLoading"
		},
		"974": {
			"sourceFileName": "src/evm/hooks/auth/useUser.ts",
			"qualifiedName": "useUser"
		},
		"975": {
			"sourceFileName": "src/evm/hooks/auth/useUser.ts",
			"qualifiedName": "useUser"
		},
		"976": {
			"sourceFileName": "src/evm/hooks/auth/useUser.ts",
			"qualifiedName": "TData"
		},
		"977": {
			"sourceFileName": "src/evm/hooks/auth/useUser.ts",
			"qualifiedName": "TContext"
		},
		"978": {
			"sourceFileName": "src/evm/hooks/auth/useUser.ts",
			"qualifiedName": "__object"
		},
		"979": {
			"sourceFileName": "src/evm/hooks/auth/useUser.ts",
			"qualifiedName": "__object.user"
		},
		"980": {
			"sourceFileName": "src/evm/hooks/auth/useUser.ts",
			"qualifiedName": "__object.isLoggedIn"
		},
		"981": {
			"sourceFileName": "src/evm/hooks/auth/useUser.ts",
			"qualifiedName": "__object.isLoading"
		},
		"982": {
			"sourceFileName": "src/evm/hooks/auth/useSwitchAccount.ts",
			"qualifiedName": "useSwitchAccount"
		},
		"983": {
			"sourceFileName": "src/evm/hooks/auth/useSwitchAccount.ts",
			"qualifiedName": "useSwitchAccount"
		},
		"984": {
			"sourceFileName": "src/evm/hooks/auth/useSwitchAccount.ts",
			"qualifiedName": "__object"
		},
		"985": {
			"sourceFileName": "src/evm/hooks/auth/useSwitchAccount.ts",
			"qualifiedName": "__object.switchAccount"
		},
		"986": {
			"sourceFileName": "src/evm/hooks/auth/useSwitchAccount.ts",
			"qualifiedName": "__object.isLoading"
		},
		"987": {
			"sourceFileName": "src/evm/hooks/auth/useUser.ts",
			"qualifiedName": "UserWithData"
		},
		"988": {
			"sourceFileName": "src/evm/hooks/auth/useUser.ts",
			"qualifiedName": "UserWithData.data"
		},
		"989": {
			"sourceFileName": "../auth/src/core/schema/common.ts",
			"qualifiedName": "__type.address"
		},
		"990": {
			"sourceFileName": "../auth/src/core/schema/common.ts",
			"qualifiedName": "__type.session"
		},
		"991": {
			"sourceFileName": "src/evm/hooks/auth/useUser.ts",
			"qualifiedName": "UserWithData.TData"
		},
		"992": {
			"sourceFileName": "src/evm/hooks/auth/useUser.ts",
			"qualifiedName": "UserWithData.TContext"
		},
		"1029": {
			"sourceFileName": "src/evm/hooks/storage/useStorage.ts",
			"qualifiedName": "useStorage"
		},
		"1030": {
			"sourceFileName": "src/evm/hooks/storage/useStorage.ts",
			"qualifiedName": "useStorage"
		},
		"1031": {
			"sourceFileName": "src/evm/hooks/storage/useStorageUpload.ts",
			"qualifiedName": "useStorageUpload"
		},
		"1032": {
			"sourceFileName": "src/evm/hooks/storage/useStorageUpload.ts",
			"qualifiedName": "useStorageUpload"
		},
		"1033": {
			"sourceFileName": "src/evm/hooks/storage/useStorageUpload.ts",
			"qualifiedName": "T"
		},
		"1034": {
			"sourceFileName": "src/evm/hooks/storage/useStorageUpload.ts",
			"qualifiedName": "uploadOptions"
		},
		"1035": {
			"sourceFileName": "src/evm/hooks/useNetworkMismatch.ts",
			"qualifiedName": "useNetworkMismatch"
		},
		"1036": {
			"sourceFileName": "src/evm/hooks/useNetworkMismatch.ts",
			"qualifiedName": "useNetworkMismatch"
		},
		"1043": {
			"sourceFileName": "src/evm/hooks/useSigner.ts",
			"qualifiedName": "useSigner"
		},
		"1044": {
			"sourceFileName": "src/evm/hooks/useSigner.ts",
			"qualifiedName": "useSigner"
		},
		"1045": {
			"sourceFileName": "src/evm/hooks/useSupportedChains.ts",
			"qualifiedName": "useSupportedChains"
		},
		"1046": {
			"sourceFileName": "src/evm/hooks/useSupportedChains.ts",
			"qualifiedName": "useSupportedChains"
		},
		"1050": {
			"sourceFileName": "src/evm/hooks/async/app.ts",
			"qualifiedName": "useAppURI"
		},
		"1051": {
			"sourceFileName": "src/evm/hooks/async/app.ts",
			"qualifiedName": "useAppURI"
		},
		"1052": {
			"sourceFileName": "src/evm/hooks/async/app.ts",
			"qualifiedName": "TContract"
		},
		"1053": {
			"sourceFileName": "src/evm/hooks/async/app.ts",
			"qualifiedName": "contract"
		},
		"1054": {
			"sourceFileName": "src/evm/hooks/async/app.ts",
			"qualifiedName": "useSetAppURI"
		},
		"1055": {
			"sourceFileName": "src/evm/hooks/async/app.ts",
			"qualifiedName": "useSetAppURI"
		},
		"1056": {
			"sourceFileName": "src/evm/hooks/async/app.ts",
			"qualifiedName": "contract"
		},
		"1057": {
			"sourceFileName": "src/evm/hooks/async/app.ts",
			"qualifiedName": "__type"
		},
		"1058": {
			"sourceFileName": "src/evm/hooks/async/app.ts",
			"qualifiedName": "__type.receipt"
		},
		"1059": {
			"sourceFileName": "src/evm/hooks/async/app.ts",
			"qualifiedName": "__type.data"
		},
		"1060": {
			"sourceFileName": "src/evm/hooks/async/app.ts",
			"qualifiedName": "__type"
		},
		"1061": {
			"sourceFileName": "src/evm/hooks/async/app.ts",
			"qualifiedName": "__type"
		},
		"1062": {
			"sourceFileName": "src/evm/hooks/async/app.ts",
			"qualifiedName": "__type"
		},
		"1063": {
			"sourceFileName": "src/evm/hooks/async/app.ts",
			"qualifiedName": "__type.uri"
		},
		"1069": {
			"sourceFileName": "src/evm/providers/thirdweb-sdk-provider.tsx",
			"qualifiedName": "ThirdwebSDKProvider"
		},
		"1070": {
			"sourceFileName": "src/evm/providers/thirdweb-sdk-provider.tsx",
			"qualifiedName": "ThirdwebSDKProvider"
		},
		"1071": {
			"sourceFileName": "src/evm/providers/thirdweb-sdk-provider.tsx",
			"qualifiedName": "TChains"
		},
		"1072": {
			"sourceFileName": "src/evm/providers/thirdweb-sdk-provider.tsx",
			"qualifiedName": "props"
		},
		"1073": {
			"sourceFileName": "src/evm/hooks/useSDK.ts",
			"qualifiedName": "useSDK"
		},
		"1074": {
			"sourceFileName": "src/evm/hooks/useSDK.ts",
			"qualifiedName": "useSDK"
		},
		"1077": {
			"sourceFileName": "src/evm/providers/types.ts",
			"qualifiedName": "ThirdwebSDKProviderProps"
		},
		"1078": {
			"sourceFileName": "src/evm/providers/types.ts",
			"qualifiedName": "ThirdwebSDKProviderProps.supportedChains"
		},
		"1079": {
			"sourceFileName": "src/evm/providers/types.ts",
			"qualifiedName": "ThirdwebSDKProviderProps.signer"
		},
		"1080": {
			"sourceFileName": "src/evm/providers/types.ts",
			"qualifiedName": "ThirdwebSDKProviderProps.sdkOptions"
		},
		"1081": {
			"sourceFileName": "../sdk/src/evm/schema/sdk-options.ts",
			"qualifiedName": "__type"
		},
		"1082": {
			"sourceFileName": "src/evm/providers/types.ts",
			"qualifiedName": "ThirdwebSDKProviderProps.storageInterface"
		},
		"1083": {
			"sourceFileName": "src/evm/providers/types.ts",
			"qualifiedName": "ThirdwebSDKProviderProps.authConfig"
		},
		"1084": {
			"sourceFileName": "src/evm/providers/types.ts",
			"qualifiedName": "ThirdwebSDKProviderProps.activeChain"
		},
		"1085": {
			"sourceFileName": "\u0000",
			"qualifiedName": "__type"
		},
		"1086": {
			"sourceFileName": "\u0000",
			"qualifiedName": "__type"
		},
		"1087": {
			"sourceFileName": "src/evm/providers/types.ts",
			"qualifiedName": "ThirdwebSDKProviderProps.clientId"
		},
		"1088": {
			"sourceFileName": "src/evm/providers/types.ts",
			"qualifiedName": "ThirdwebSDKProviderProps.secretKey"
		},
		"1089": {
			"sourceFileName": "src/core/providers/query-client.tsx",
			"qualifiedName": "QueryClientProviderProps.queryClient"
		},
		"1090": {
			"sourceFileName": "src/evm/providers/types.ts",
			"qualifiedName": "ThirdwebSDKProviderProps.TChains"
		},
		"1103": {
			"sourceFileName": "src/evm/utils/addresses.ts",
			"qualifiedName": "shortenAddress"
		},
		"1104": {
			"sourceFileName": "src/evm/utils/addresses.ts",
			"qualifiedName": "shortenAddress"
		},
		"1105": {
			"sourceFileName": "src/evm/utils/addresses.ts",
			"qualifiedName": "address"
		},
		"1106": {
			"sourceFileName": "src/evm/utils/addresses.ts",
			"qualifiedName": "extraShort"
		},
		"1126": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "WalletAddress"
		},
		"1127": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "TokenParams"
		},
		"1128": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type"
		},
		"1129": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type.to"
		},
		"1130": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type.amount"
		},
		"1131": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "TokenBurnParams"
		},
		"1132": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type"
		},
		"1133": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type.amount"
		},
		"1134": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "NFTContract"
		},
		"1135": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "TokenContract"
		},
		"1137": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "TransferNFTParams"
		},
		"1138": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type"
		},
		"1139": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type.to"
		},
		"1140": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type.tokenId"
		},
		"1141": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type.amount"
		},
		"1142": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "AirdropNFTParams"
		},
		"1143": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type"
		},
		"1144": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type.tokenId"
		},
		"1145": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type.addresses"
		},
		"1146": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "MintNFTSupplyParams"
		},
		"1147": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type"
		},
		"1148": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type.tokenId"
		},
		"1149": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type.additionalSupply"
		},
		"1150": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type.to"
		},
		"1151": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "MintNFTParams"
		},
		"1152": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type"
		},
		"1153": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type.metadata"
		},
		"1154": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type.to"
		},
		"1155": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type.supply"
		},
		"1156": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "MintNFTReturnType"
		},
		"1157": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "TContract"
		},
		"1158": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "BurnNFTParams"
		},
		"1159": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type"
		},
		"1160": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type.tokenId"
		},
		"1161": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type.amount"
		},
		"1162": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "DropContract"
		},
		"1163": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "RevealableContract"
		},
		"1164": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "DelayedRevealLazyMintInput"
		},
		"1165": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type"
		},
		"1166": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type.placeholder"
		},
		"1167": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type.metadatas"
		},
		"1168": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type.password"
		},
		"1169": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "RevealLazyMintInput"
		},
		"1170": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type"
		},
		"1171": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type.batchId"
		},
		"1172": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type.password"
		},
		"1173": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "ClaimNFTParams"
		},
		"1174": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type"
		},
		"1175": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type.to"
		},
		"1176": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type.quantity"
		},
		"1177": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type.options"
		},
		"1178": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type.tokenId"
		},
		"1179": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "ClaimNFTReturnType"
		},
		"1180": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "MakeBidParams"
		},
		"1181": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type"
		},
		"1182": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type.listingId"
		},
		"1183": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type.bid"
		},
		"1184": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "MakeOfferParams"
		},
		"1185": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type"
		},
		"1186": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type.listingId"
		},
		"1187": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type.pricePerToken"
		},
		"1188": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type.quantity"
		},
		"1189": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "AcceptDirectOffer"
		},
		"1190": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type"
		},
		"1191": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type.listingId"
		},
		"1192": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type.addressOfOfferor"
		},
		"1193": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "ExecuteAuctionSale"
		},
		"1194": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type"
		},
		"1195": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type.listingId"
		},
		"1196": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "BuyNowParams"
		},
		"1197": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type"
		},
		"1198": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type.id"
		},
		"1199": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type.type"
		},
		"1200": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type.buyAmount"
		},
		"1201": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type.buyForWallet"
		},
		"1202": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type"
		},
		"1203": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type.id"
		},
		"1204": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type.type"
		},
		"1205": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "TListingType"
		},
		"1206": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "ClaimTokenParams"
		},
		"1207": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type"
		},
		"1208": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type.to"
		},
		"1209": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type.amount"
		},
		"1210": {
			"sourceFileName": "src/evm/types.ts",
			"qualifiedName": "__type.checkERC20Allowance"
		},
		"1227": {
			"sourceFileName": "src/evm/hooks/useTransactions.ts",
			"qualifiedName": "useWatchTransactions"
		},
		"1228": {
			"sourceFileName": "src/evm/hooks/useTransactions.ts",
			"qualifiedName": "useWatchTransactions"
		},
		"1229": {
			"sourceFileName": "src/evm/hooks/useTransactions.ts",
			"qualifiedName": "watchTransactionParams"
		},
		"1230": {
			"sourceFileName": "src/evm/hooks/useTransactions.ts",
			"qualifiedName": "UseWatchTransactionsParams"
		},
		"1231": {
			"sourceFileName": "src/evm/hooks/useTransactions.ts",
			"qualifiedName": "__type"
		},
		"1232": {
			"sourceFileName": "src/evm/hooks/useTransactions.ts",
			"qualifiedName": "__type.limit"
		}
	}
}