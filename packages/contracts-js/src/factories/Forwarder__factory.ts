/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { Forwarder, ForwarderInterface } from "../Forwarder";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "from",
            type: "address",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct Forwarder.ForwardRequest",
        name: "req",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
    ],
    name: "getNonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "from",
            type: "address",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct Forwarder.ForwardRequest",
        name: "req",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "verify",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x61014060405234801561001157600080fd5b50604080518082018252600f81526e23a9a73b19102337b93bb0b93232b960891b602080830191825283518085019094526005845264302e302e3160d81b908401528151902060e08190527fae209a0b48f21c054280f2455d32cf309387644879d9acbd8ffc1991638118856101008190524660a0529192917f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6100fa8184846040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b6080523060c052610120525061010f92505050565b60805160a05160c05160e0516101005161012051610cf761015e6000396000610586015260006105d5015260006105b001526000610509015260006105330152600061055d0152610cf76000f3fe6080604052600436106100345760003560e01c80632d0335ab1461003957806347153f8214610082578063bf5d3bdb146100a3575b600080fd5b34801561004557600080fd5b5061006f610054366004610990565b6001600160a01b031660009081526020819052604090205490565b6040519081526020015b60405180910390f35b6100956100903660046109c0565b6100d3565b604051610079929190610abb565b3480156100af57600080fd5b506100c36100be3660046109c0565b610306565b6040519015158152602001610079565b600060606100e2858585610306565b6101595760405162461bcd60e51b815260206004820152603260248201527f4d696e696d616c466f727761726465723a207369676e617475726520646f657360448201527f206e6f74206d617463682072657175657374000000000000000000000000000060648201526084015b60405180910390fd5b61016860808601356001610ade565b6000806101786020890189610990565b6001600160a01b03166001600160a01b03168152602001908152602001600020819055506000808660200160208101906101b29190610990565b6001600160a01b0316606088013560408901356101d260a08b018b610b04565b6101df60208d018d610990565b6040516020016101f193929190610b4b565b60408051601f198184030181529082905261020b91610b71565b600060405180830381858888f193505050503d8060008114610249576040519150601f19603f3d011682016040523d82523d6000602084013e61024e565b606091505b5091509150816102dd576044815110156102aa5760405162461bcd60e51b815260206004820152601d60248201527f5472616e73616374696f6e2072657665727465642073696c656e746c790000006044820152606401610150565b600481019050808060200190518101906102c49190610ba3565b60405162461bcd60e51b81526004016101509190610c50565b6102ec603f6060890135610c63565b5a116102fa576102fa610c85565b90969095509350505050565b60008061041984848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061041392507fdd8f4b70b0f4393e889bd39128a30628a78b61816a9eb8199759e7a349657e489150610376905060208a018a610990565b61038660408b0160208c01610990565b60408b013560608c013560808d01356103a260a08f018f610b04565b6040516103b0929190610c9b565b6040805191829003822060208301989098526001600160a01b0396871690820152949093166060850152608084019190915260a083015260c082015260e08101919091526101000160405160208183030381529060405280519060200120610484565b906104d8565b905060808501356000806104306020890189610990565b6001600160a01b03166001600160a01b031681526020019081526020016000205414801561047b57506104666020860186610990565b6001600160a01b0316816001600160a01b0316145b95945050505050565b60006104d26104916104fc565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b92915050565b60008060006104e78585610623565b915091506104f481610693565b509392505050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561055557507f000000000000000000000000000000000000000000000000000000000000000046145b1561057f57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b60008082516041141561065a5760208301516040840151606085015160001a61064e87828585610851565b9450945050505061068c565b825160401415610684576020830151604084015161067986838361093e565b93509350505061068c565b506000905060025b9250929050565b60008160048111156106a7576106a7610cab565b14156106b05750565b60018160048111156106c4576106c4610cab565b14156107125760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610150565b600281600481111561072657610726610cab565b14156107745760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610150565b600381600481111561078857610788610cab565b14156107e15760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610150565b60048160048111156107f5576107f5610cab565b141561084e5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610150565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156108885750600090506003610935565b8460ff16601b141580156108a057508460ff16601c14155b156108b15750600090506004610935565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610905573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661092e57600060019250925050610935565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83168161097460ff86901c601b610ade565b905061098287828885610851565b935093505050935093915050565b6000602082840312156109a257600080fd5b81356001600160a01b03811681146109b957600080fd5b9392505050565b6000806000604084860312156109d557600080fd5b833567ffffffffffffffff808211156109ed57600080fd5b9085019060c08288031215610a0157600080fd5b90935060208501359080821115610a1757600080fd5b818601915086601f830112610a2b57600080fd5b813581811115610a3a57600080fd5b876020828501011115610a4c57600080fd5b6020830194508093505050509250925092565b60005b83811015610a7a578181015183820152602001610a62565b83811115610a89576000848401525b50505050565b60008151808452610aa7816020860160208601610a5f565b601f01601f19169290920160200192915050565b8215158152604060208201526000610ad66040830184610a8f565b949350505050565b60008219821115610aff57634e487b7160e01b600052601160045260246000fd5b500190565b6000808335601e19843603018112610b1b57600080fd5b83018035915067ffffffffffffffff821115610b3657600080fd5b60200191503681900382131561068c57600080fd5b8284823760609190911b6bffffffffffffffffffffffff19169101908152601401919050565b60008251610b83818460208701610a5f565b9190910192915050565b634e487b7160e01b600052604160045260246000fd5b600060208284031215610bb557600080fd5b815167ffffffffffffffff80821115610bcd57600080fd5b818401915084601f830112610be157600080fd5b815181811115610bf357610bf3610b8d565b604051601f8201601f19908116603f01168101908382118183101715610c1b57610c1b610b8d565b81604052828152876020848701011115610c3457600080fd5b610c45836020830160208801610a5f565b979650505050505050565b6020815260006109b96020830184610a8f565b600082610c8057634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052600160045260246000fd5b8183823760009101908152919050565b634e487b7160e01b600052602160045260246000fdfea2646970667358221220de815c5cff2ce32a397dba4768a07459160d67cb088cb9f3d2c05c105315fbe964736f6c634300080c0033";

type ForwarderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ForwarderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Forwarder__factory extends ContractFactory {
  constructor(...args: ForwarderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Forwarder> {
    return super.deploy(overrides || {}) as Promise<Forwarder>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Forwarder {
    return super.attach(address) as Forwarder;
  }
  override connect(signer: Signer): Forwarder__factory {
    return super.connect(signer) as Forwarder__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ForwarderInterface {
    return new utils.Interface(_abi) as ForwarderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Forwarder {
    return new Contract(address, _abi, signerOrProvider) as Forwarder;
  }
}
