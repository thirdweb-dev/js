// This file is auto-generated by @hey-api/openapi-ts

import type {
	Client,
	Options as ClientOptions,
	TDataShape,
} from "./client/index.js";
import { client as _heyApiClient } from "./client.gen.js";
import type {
	CancelTransactionData,
	CancelTransactionResponses,
	CreateAccountData,
	CreateAccountResponses,
	CreateSolanaAccountData,
	CreateSolanaAccountResponses,
	EncodeContractData,
	EncodeContractResponses,
	GetActivityLogsData,
	GetActivityLogsErrors,
	GetActivityLogsResponses,
	GetSolanaActivityLogsData,
	GetSolanaActivityLogsErrors,
	GetSolanaActivityLogsResponses,
	GetSolanaTransactionsData,
	GetSolanaTransactionsResponses,
	GetTransactionAnalyticsData,
	GetTransactionAnalyticsResponses,
	GetTransactionAnalyticsSummaryData,
	GetTransactionAnalyticsSummaryErrors,
	GetTransactionAnalyticsSummaryResponses,
	GetTransactionsData,
	GetTransactionsResponses,
	ListAccountsData,
	ListAccountsResponses,
	ListSolanaAccountsData,
	ListSolanaAccountsResponses,
	ReadContractData,
	ReadContractResponses,
	SearchActivityLogsData,
	SearchActivityLogsErrors,
	SearchActivityLogsResponses,
	SearchSolanaActivityLogsData,
	SearchSolanaActivityLogsErrors,
	SearchSolanaActivityLogsResponses,
	SearchSolanaTransactionsData,
	SearchSolanaTransactionsResponses,
	SearchTransactionsData,
	SearchTransactionsResponses,
	SendSolanaTransactionData,
	SendSolanaTransactionResponses,
	SendTransactionData,
	SendTransactionResponses,
	SignMessageData,
	SignMessageResponses,
	SignSolanaMessageData,
	SignSolanaMessageResponses,
	SignSolanaTransactionData,
	SignSolanaTransactionResponses,
	SignTypedDataData,
	SignTypedDataResponses,
	WriteContractData,
	WriteContractResponses,
} from "./types.gen.js";

export type Options<
	TData extends TDataShape = TDataShape,
	ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
	/**
	 * You can provide a client instance returned by `createClient()` instead of
	 * individual options. This might be also useful if you want to implement a
	 * custom client.
	 */
	client?: Client;
	/**
	 * You can pass arbitrary values through the `meta` object. This can be
	 * used to access values that aren't defined as part of the SDK function.
	 */
	meta?: Record<string, unknown>;
};

/**
 * Write Contract
 * Call a contract function with a transaction
 */
export const writeContract = <ThrowOnError extends boolean = false>(
	options: Options<WriteContractData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<
		WriteContractResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				name: "x-secret-key",
				type: "apiKey",
			},
		],
		url: "/v1/write/contract",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options.headers,
		},
	});
};

/**
 * Write Transaction
 * Execute raw transactions
 */
export const sendTransaction = <ThrowOnError extends boolean = false>(
	options: Options<SendTransactionData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<
		SendTransactionResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				name: "x-secret-key",
				type: "apiKey",
			},
		],
		url: "/v1/write/transaction",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options.headers,
		},
	});
};

/**
 * Sign Message
 * Sign messages using either EOA or Smart Account
 */
export const signMessage = <ThrowOnError extends boolean = false>(
	options: Options<SignMessageData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<
		SignMessageResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				name: "x-secret-key",
				type: "apiKey",
			},
		],
		url: "/v1/sign/message",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options.headers,
		},
	});
};

/**
 * Sign Typed Data
 * Sign EIP-712 typed data using either EOA or Smart Account
 */
export const signTypedData = <ThrowOnError extends boolean = false>(
	options: Options<SignTypedDataData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<
		SignTypedDataResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				name: "x-secret-key",
				type: "apiKey",
			},
		],
		url: "/v1/sign/typed-data",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options.headers,
		},
	});
};

/**
 * Read Contract
 * Read from smart contracts with intelligent execution strategy:
 * - Single calls: Always executed directly for efficiency
 * - Multiple calls: Uses multicall by default, or direct calls if disabled
 * - Failed preparations: Returns preparation errors directly
 *
 * If multicall is not specified, it will be used by default. In case of multicall related errors, engine will fallback to direct calls.
 * Only in the case where multicall is explicitly enabled, engine will not fallback to direct calls.
 */
export const readContract = <ThrowOnError extends boolean = false>(
	options: Options<ReadContractData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<
		ReadContractResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				name: "x-secret-key",
				type: "apiKey",
			},
		],
		url: "/v1/read/contract",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options.headers,
		},
	});
};

/**
 * Encode Contract
 * Encode contract function calls without execution
 */
export const encodeContract = <ThrowOnError extends boolean = false>(
	options: Options<EncodeContractData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<
		EncodeContractResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				name: "x-secret-key",
				type: "apiKey",
			},
		],
		url: "/v1/encode/contract",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options.headers,
		},
	});
};

/**
 * Send Solana Transaction
 * Execute a Solana transaction with custom instructions
 */
export const sendSolanaTransaction = <ThrowOnError extends boolean = false>(
	options: Options<SendSolanaTransactionData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<
		SendSolanaTransactionResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				name: "x-secret-key",
				type: "apiKey",
			},
		],
		url: "/v1/solana/transaction",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options.headers,
		},
	});
};

/**
 * Cancel Transaction
 * Attempt to cancel a queued transaction. Transactions that have been sent and are waiting for mine cannot be cancelled.
 */
export const cancelTransaction = <ThrowOnError extends boolean = false>(
	options: Options<CancelTransactionData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<
		CancelTransactionResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				name: "x-secret-key",
				type: "apiKey",
			},
		],
		url: "/v1/transactions/{id}/cancel",
		...options,
	});
};

/**
 * List Server Wallets
 * List all engine server wallets for the current project. Returns an array of EOA addresses with their corresponding predicted smart account addresses.
 */
export const listAccounts = <ThrowOnError extends boolean = false>(
	options?: Options<ListAccountsData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<
		ListAccountsResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				name: "x-secret-key",
				type: "apiKey",
			},
		],
		url: "/v1/accounts",
		...options,
	});
};

/**
 * Get or Create Server Wallet
 * Create a new engine server wallet or retrieve an existing one. If the EOA already exists for the given label, it will be returned without creating a new one.
 */
export const createAccount = <ThrowOnError extends boolean = false>(
	options?: Options<CreateAccountData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<
		CreateAccountResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				name: "x-secret-key",
				type: "apiKey",
			},
		],
		url: "/v1/accounts",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};

/**
 * List Solana Accounts
 * List all Solana wallets provisioned for the project.
 */
export const listSolanaAccounts = <ThrowOnError extends boolean = false>(
	options?: Options<ListSolanaAccountsData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<
		ListSolanaAccountsResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				name: "x-secret-key",
				type: "apiKey",
			},
		],
		url: "/v1/solana/accounts",
		...options,
	});
};

/**
 * Get or Create Solana Account
 * Create a new solana wallet in the vault or return the existing wallet for a given label.
 */
export const createSolanaAccount = <ThrowOnError extends boolean = false>(
	options?: Options<CreateSolanaAccountData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<
		CreateSolanaAccountResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				name: "x-secret-key",
				type: "apiKey",
			},
		],
		url: "/v1/solana/accounts",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};

/**
 * Sign Solana Message
 * Sign an arbitrary message with a Solana wallet.
 */
export const signSolanaMessage = <ThrowOnError extends boolean = false>(
	options?: Options<SignSolanaMessageData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<
		SignSolanaMessageResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				name: "x-secret-key",
				type: "apiKey",
			},
		],
		url: "/v1/solana/sign-message",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};

/**
 * Sign Solana Transaction
 * Sign a serialized Solana transaction.
 */
export const signSolanaTransaction = <ThrowOnError extends boolean = false>(
	options?: Options<SignSolanaTransactionData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<
		SignSolanaTransactionResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				name: "x-secret-key",
				type: "apiKey",
			},
		],
		url: "/v1/solana/sign-transaction",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};

/**
 * Get Transactions
 * Search transactions with various filters and pagination
 */
export const getTransactions = <ThrowOnError extends boolean = false>(
	options?: Options<GetTransactionsData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<
		GetTransactionsResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				name: "x-secret-key",
				type: "apiKey",
			},
		],
		url: "/v1/transactions",
		...options,
	});
};

/**
 * Transaction Analytics
 * Get transaction count analytics over time with filtering
 */
export const getTransactionAnalytics = <ThrowOnError extends boolean = false>(
	options?: Options<GetTransactionAnalyticsData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<
		GetTransactionAnalyticsResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				name: "x-secret-key",
				type: "apiKey",
			},
		],
		url: "/v1/transactions/analytics",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};

/**
 * Transaction Analytics Summary
 * Get a summary (total count and total gas calculation) for transactions within a time range, supporting complex nested filters.
 */
export const getTransactionAnalyticsSummary = <
	ThrowOnError extends boolean = false,
>(
	options?: Options<GetTransactionAnalyticsSummaryData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<
		GetTransactionAnalyticsSummaryResponses,
		GetTransactionAnalyticsSummaryErrors,
		ThrowOnError
	>({
		security: [
			{
				name: "x-secret-key",
				type: "apiKey",
			},
		],
		url: "/v1/transactions/analytics-summary",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};

/**
 * Search Transactions
 * Advanced search for transactions with complex nested filters
 */
export const searchTransactions = <ThrowOnError extends boolean = false>(
	options?: Options<SearchTransactionsData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<
		SearchTransactionsResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				name: "x-secret-key",
				type: "apiKey",
			},
		],
		url: "/v1/transactions/search",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};

/**
 * Get Activity Logs
 * Get paginated activity logs for a specific transaction with tenancy enforcement
 */
export const getActivityLogs = <ThrowOnError extends boolean = false>(
	options: Options<GetActivityLogsData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		GetActivityLogsResponses,
		GetActivityLogsErrors,
		ThrowOnError
	>({
		security: [
			{
				name: "x-secret-key",
				type: "apiKey",
			},
		],
		url: "/v1/transactions/activity-logs",
		...options,
	});
};

/**
 * Search Activity Logs
 * Search activity logs across transactions with advanced filtering and tenancy enforcement
 */
export const searchActivityLogs = <ThrowOnError extends boolean = false>(
	options?: Options<SearchActivityLogsData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<
		SearchActivityLogsResponses,
		SearchActivityLogsErrors,
		ThrowOnError
	>({
		security: [
			{
				name: "x-secret-key",
				type: "apiKey",
			},
		],
		url: "/v1/transactions/activity-logs/search",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};

/**
 * Get Solana Transactions
 * Search Solana transactions with various filters and pagination
 */
export const getSolanaTransactions = <ThrowOnError extends boolean = false>(
	options?: Options<GetSolanaTransactionsData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<
		GetSolanaTransactionsResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				name: "x-secret-key",
				type: "apiKey",
			},
		],
		url: "/v1/solana/transactions",
		...options,
	});
};

/**
 * Search Solana Transactions
 * Advanced search for Solana transactions with complex nested filters
 */
export const searchSolanaTransactions = <ThrowOnError extends boolean = false>(
	options?: Options<SearchSolanaTransactionsData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<
		SearchSolanaTransactionsResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				name: "x-secret-key",
				type: "apiKey",
			},
		],
		url: "/v1/solana/transactions/search",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};

/**
 * Get Solana Activity Logs
 * Get paginated activity logs for a specific Solana transaction with tenancy enforcement
 */
export const getSolanaActivityLogs = <ThrowOnError extends boolean = false>(
	options: Options<GetSolanaActivityLogsData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		GetSolanaActivityLogsResponses,
		GetSolanaActivityLogsErrors,
		ThrowOnError
	>({
		security: [
			{
				name: "x-secret-key",
				type: "apiKey",
			},
		],
		url: "/v1/solana/transactions/activity-logs",
		...options,
	});
};

/**
 * Search Solana Activity Logs
 * Search Solana activity logs across transactions with advanced filtering and tenancy enforcement
 */
export const searchSolanaActivityLogs = <ThrowOnError extends boolean = false>(
	options?: Options<SearchSolanaActivityLogsData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<
		SearchSolanaActivityLogsResponses,
		SearchSolanaActivityLogsErrors,
		ThrowOnError
	>({
		security: [
			{
				name: "x-secret-key",
				type: "apiKey",
			},
		],
		url: "/v1/solana/transactions/activity-logs/search",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};
