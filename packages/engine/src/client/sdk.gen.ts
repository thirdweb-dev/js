// This file is auto-generated by @hey-api/openapi-ts

import type {
  Client,
  Options as ClientOptions,
  TDataShape,
} from "@hey-api/client-fetch";
import { client as _heyApiClient } from "./client.gen.js";
import type {
  GetTransactionAnalyticsData,
  GetTransactionAnalyticsResponse,
  GetTransactionAnalyticsSummaryData,
  GetTransactionAnalyticsSummaryResponse,
  PostEncodeContractData,
  PostEncodeContractResponse,
  PostReadBalanceData,
  PostReadBalanceResponse,
  PostReadContractData,
  PostReadContractResponse,
  PostSignMessageData,
  PostSignMessageResponse,
  PostSignTransactionData,
  PostSignTransactionResponse,
  PostSignTypedDataData,
  PostSignTypedDataResponse,
  PostWriteContractData,
  PostWriteContractResponse,
  PostWriteTransactionData,
  PostWriteTransactionResponse,
  SearchTransactionsData,
  SearchTransactionsResponse,
} from "./types.gen.js";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Write to a Contract with a Function Call
 * Call a write function on a contract.
 */
export const postWriteContract = <ThrowOnError extends boolean = false>(
  options?: Options<PostWriteContractData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostWriteContractResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/write/contract",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Send an Encoded Transaction
 * Send a transaction or a batch of transactions
 */
export const postWriteTransaction = <ThrowOnError extends boolean = false>(
  options?: Options<PostWriteTransactionData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostWriteTransactionResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/write/transaction",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Sign Transaction
 * Sign transactions without sending them.
 */
export const postSignTransaction = <ThrowOnError extends boolean = false>(
  options?: Options<PostSignTransactionData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostSignTransactionResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/sign/transaction",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Sign Message
 * Sign arbitrary messages.
 */
export const postSignMessage = <ThrowOnError extends boolean = false>(
  options?: Options<PostSignMessageData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostSignMessageResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/sign/message",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Sign Typed Data
 * Sign EIP-712 typed data.
 */
export const postSignTypedData = <ThrowOnError extends boolean = false>(
  options?: Options<PostSignTypedDataData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostSignTypedDataResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/sign/typed-data",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Read from a Contract
 * Call read-only functions using multicall.
 */
export const postReadContract = <ThrowOnError extends boolean = false>(
  options?: Options<PostReadContractData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostReadContractResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/read/contract",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Read the Native Balance for an Address
 * Fetches the native cryptocurrency balance (e.g., ETH, MATIC) for a given address on a specific chain.
 */
export const postReadBalance = <ThrowOnError extends boolean = false>(
  options?: Options<PostReadBalanceData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostReadBalanceResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/read/balance",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Encode A Contract Function Call
 * Get transaction parameters (to, data, value) for contract calls.
 */
export const postEncodeContract = <ThrowOnError extends boolean = false>(
  options?: Options<PostEncodeContractData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostEncodeContractResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/encode/contract",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Search Transactions
 * Advanced search for transactions with complex nested filters
 */
export const searchTransactions = <ThrowOnError extends boolean = false>(
  options?: Options<SearchTransactionsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    SearchTransactionsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/project/transactions/search",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Transaction Analytics
 * Get transaction count analytics over time with filtering
 */
export const getTransactionAnalytics = <ThrowOnError extends boolean = false>(
  options?: Options<GetTransactionAnalyticsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    GetTransactionAnalyticsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/project/transactions/analytics",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Transaction Analytics Summary
 * Get a summary (total count and total gas calculation) for transactions within a time range, supporting complex nested filters.
 */
export const getTransactionAnalyticsSummary = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetTransactionAnalyticsSummaryData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    GetTransactionAnalyticsSummaryResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "x-secret-key",
        type: "apiKey",
      },
    ],
    url: "/project/transactions/analytics-summary",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};
