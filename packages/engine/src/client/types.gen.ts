// This file is auto-generated by @hey-api/openapi-ts

export type TransactionsFilterValue = {
  field:
    | "id"
    | "batchIndex"
    | "from"
    | "signerAddress"
    | "smartAccountAddress"
    | "chainId";
  values: Array<string>;
  operation: "AND" | "OR";
};

export type TransactionsFilterNested = {
  operation: "AND" | "OR";
  filters: Array<TransactionsFilterValue | TransactionsFilterNested>;
};

/**
 * This is the default execution option. If you do not specify an execution type, and only specify a "from" string, engine will automatically determine the most optimal options for you. If you would like to specify granular options about execution strategy choose one of the other `executionOptions` type and provide them.
 */
export type AutoExecutionOptions = {
  /**
   * This is the default, a `type` does not need to be specified
   */
  type?: "auto";
  /**
   * The address of the account to send the transaction from. Can be the address of a smart account or an EOA.
   */
  from: string;
  /**
   * The idempotency key of the transaction. Transaction requests sent with the same idempotency key will be de-duplicated. If not provided, a randomUUID will be generated. This is also used as the ID of a queued/stored transaction.
   */
  idempotencyKey?: string;
  /**
   * The chain id of the transaction
   */
  chainId: string;
};

export type AaExecutionOptions = {
  type: "ERC4337";
  /**
   * The address of the engine managed account which can send transactions from your smart account
   */
  signerAddress: string;
  sponsorGas?: boolean;
  /**
   * The address of the smart account factory. Defaults to thirdweb default v0.7 Account Factory. Only specify this if you are using a custom account factory.
   */
  factoryAddress?: string;
  /**
   * The address of the entrypoint contract. Defaults to the v0.7 entrypoint for the chain. Only specify this if you want to specify a different version.
   */
  entrypointAddress?: string;
  /**
   * The address of the smart account to send the transaction from. Either specify this, or the salt. If not specified, the inferred smart account will be with null salt. If both are specified, the salt will be ignored.
   */
  smartAccountAddress?: string;
  /**
   * The salt of the smart account to send the transaction from. Only specify this if you want to specify a custom salt. If omitted, and smart account address is not provided, the inferred smart account will be with null salt. If a smart account address is provided, the salt will be ignored.
   */
  accountSalt?: string;
  /**
   * The idempotency key of the transaction. Transaction requests sent with the same idempotency key will be de-duplicated. If not provided, a randomUUID will be generated. This is also used as the ID of a queued/stored transaction.
   */
  idempotencyKey?: string;
  /**
   * The chain id of the transaction
   */
  chainId: string;
};

/**
 * Uses zkSync native AA for execution. This type of execution is only available on zkSync chains.
 */
export type AaZksyncExecutionOptions = {
  type: "zksync";
  /**
   * The EOA address of the account to send the zksync native AA transaction from.
   */
  accountAddress: string;
  sponsorGas?: boolean;
  /**
   * The idempotency key of the transaction. Transaction requests sent with the same idempotency key will be de-duplicated. If not provided, a randomUUID will be generated. This is also used as the ID of a queued/stored transaction.
   */
  idempotencyKey?: string;
  /**
   * The chain id of the transaction
   */
  chainId: string;
};

export type WriteContractData = {
  body?: {
    /**
     * Use a specific execution type and provide options to configure engine's execution strategy. The default execution option is `auto`, (doesn't need to be specified) which will automatically determine the most optimal options for you. If you would like to specify granular options about execution strategy choose one of the other `executionOptions` type and provide them.
     */
    executionOptions:
      | AutoExecutionOptions
      | AaExecutionOptions
      | AaZksyncExecutionOptions;
    params: Array<{
      /**
       * The function to call on the contract
       */
      method: string;
      /**
       * The parameters to pass to the function
       */
      params: Array<unknown>;
      /**
       * The contract address to call
       */
      contractAddress: string;
      /**
       * The ABI of the contract
       */
      abi?: Array<unknown>;
      /**
       * The value to send with the transaction
       */
      value?: string;
    }>;
  };
  headers?: {
    /**
     * Vault Access Token used to access your EOA
     */
    "x-vault-access-token"?: string;
  };
  path?: never;
  query?: never;
  url: "/v1/write/contract";
};

export type WriteContractResponses = {
  /**
   * Transaction sent successfully
   */
  200: {
    result: {
      transactions: Array<{
        id: string;
        batchIndex: number;
        chainId: string;
        from: string | null;
        transactionParams:
          | (string | number | boolean | null)
          | {
              [key: string]: unknown;
            }
          | Array<unknown>;
        transactionHash: string | null;
        confirmedAt: string | null;
        confirmedAtBlockNumber: string | null;
        enrichedData:
          | (string | number | boolean | null)
          | {
              [key: string]: unknown;
            }
          | Array<unknown>;
        executionParams:
          | (string | number | boolean | null)
          | {
              [key: string]: unknown;
            }
          | Array<unknown>;
        executionResult:
          | (string | number | boolean | null)
          | {
              [key: string]: unknown;
            }
          | Array<unknown>
          | null;
        createdAt: string;
        errorMessage: string | null;
        cancelledAt: string | null;
      }>;
    };
  };
  /**
   * Transaction queued successfully
   */
  202: {
    result: {
      transactions: Array<{
        id: string;
        batchIndex: number;
        chainId: string;
        from: string | null;
        transactionParams:
          | (string | number | boolean | null)
          | {
              [key: string]: unknown;
            }
          | Array<unknown>;
        transactionHash: string | null;
        confirmedAt: string | null;
        confirmedAtBlockNumber: string | null;
        enrichedData:
          | (string | number | boolean | null)
          | {
              [key: string]: unknown;
            }
          | Array<unknown>;
        executionParams:
          | (string | number | boolean | null)
          | {
              [key: string]: unknown;
            }
          | Array<unknown>;
        executionResult:
          | (string | number | boolean | null)
          | {
              [key: string]: unknown;
            }
          | Array<unknown>
          | null;
        createdAt: string;
        errorMessage: string | null;
        cancelledAt: string | null;
      }>;
    };
  };
};

export type WriteContractResponse =
  WriteContractResponses[keyof WriteContractResponses];

export type SendTransactionData = {
  body?: {
    /**
     * Use a specific execution type and provide options to configure engine's execution strategy. The default execution option is `auto`, (doesn't need to be specified) which will automatically determine the most optimal options for you. If you would like to specify granular options about execution strategy choose one of the other `executionOptions` type and provide them.
     */
    executionOptions:
      | AutoExecutionOptions
      | AaExecutionOptions
      | AaZksyncExecutionOptions;
    params: Array<{
      /**
       * The address of the contract to send the transaction to
       */
      to?: string;
      /**
       * The data of the transaction
       */
      data?: string;
      /**
       * The value of the transaction
       */
      value?: string;
    }>;
  };
  headers?: {
    /**
     * Vault Access Token used to access your EOA
     */
    "x-vault-access-token"?: string;
  };
  path?: never;
  query?: never;
  url: "/v1/write/transaction";
};

export type SendTransactionResponses = {
  /**
   * Transaction sent successfully
   */
  200: {
    result: {
      transactions: Array<{
        id: string;
        batchIndex: number;
        chainId: string;
        from: string | null;
        transactionParams:
          | (string | number | boolean | null)
          | {
              [key: string]: unknown;
            }
          | Array<unknown>;
        transactionHash: string | null;
        confirmedAt: string | null;
        confirmedAtBlockNumber: string | null;
        enrichedData:
          | (string | number | boolean | null)
          | {
              [key: string]: unknown;
            }
          | Array<unknown>;
        executionParams:
          | (string | number | boolean | null)
          | {
              [key: string]: unknown;
            }
          | Array<unknown>;
        executionResult:
          | (string | number | boolean | null)
          | {
              [key: string]: unknown;
            }
          | Array<unknown>
          | null;
        createdAt: string;
        errorMessage: string | null;
        cancelledAt: string | null;
      }>;
    };
  };
  /**
   * Transaction queued successfully
   */
  202: {
    result: {
      transactions: Array<{
        id: string;
        batchIndex: number;
        chainId: string;
        from: string | null;
        transactionParams:
          | (string | number | boolean | null)
          | {
              [key: string]: unknown;
            }
          | Array<unknown>;
        transactionHash: string | null;
        confirmedAt: string | null;
        confirmedAtBlockNumber: string | null;
        enrichedData:
          | (string | number | boolean | null)
          | {
              [key: string]: unknown;
            }
          | Array<unknown>;
        executionParams:
          | (string | number | boolean | null)
          | {
              [key: string]: unknown;
            }
          | Array<unknown>;
        executionResult:
          | (string | number | boolean | null)
          | {
              [key: string]: unknown;
            }
          | Array<unknown>
          | null;
        createdAt: string;
        errorMessage: string | null;
        cancelledAt: string | null;
      }>;
    };
  };
};

export type SendTransactionResponse =
  SendTransactionResponses[keyof SendTransactionResponses];

export type SignTransactionData = {
  body?: {
    /**
     * Use a specific execution type and provide options to configure engine's execution strategy. The default execution option is `auto`, (doesn't need to be specified) which will automatically determine the most optimal options for you. If you would like to specify granular options about execution strategy choose one of the other `executionOptions` type and provide them.
     */
    executionOptions:
      | AutoExecutionOptions
      | AaExecutionOptions
      | AaZksyncExecutionOptions;
    params: Array<{
      /**
       * The recipient address
       */
      to: string;
      /**
       * The transaction data as hex
       */
      data?: string;
      /**
       * The value to send with the transaction
       */
      value?: string;
      /**
       * Transaction nonce
       */
      nonce?: number;
      /**
       * Gas limit
       */
      gasLimit?: string;
      /**
       * Gas price (for legacy transactions)
       */
      gasPrice?: string;
      /**
       * Max fee per gas (for EIP-1559)
       */
      maxFeePerGas?: string;
      /**
       * Max priority fee per gas (for EIP-1559)
       */
      maxPriorityFeePerGas?: string;
      /**
       * Access list for EIP-2930 and later transactions
       */
      accessList?: Array<{
        /**
         * EVM address in hex format
         */
        address: string;
        storageKeys: Array<string>;
      }>;
      /**
       * Max fee per blob gas (for EIP-4844)
       */
      maxFeePerBlobGas?: string;
      /**
       * Blob versioned hashes (for EIP-4844)
       */
      blobVersionedHashes?: Array<string>;
      /**
       * Authorization list (for EIP-7702)
       */
      authorizationList?: Array<{
        /**
         * Authorization address
         */
        address: string;
        /**
         * r value of the signature
         */
        r: string;
        /**
         * s value of the signature
         */
        s: string;
        /**
         * v value of the signature
         */
        v?: number | string;
        /**
         * yParity value (0 or 1)
         */
        yParity: number;
        /**
         * Authorization nonce
         */
        nonce: string;
        /**
         * Authorization chainId
         */
        chainId: number;
      }>;
    }>;
  };
  headers?: {
    /**
     * Vault Access Token used to access your EOA
     */
    "x-vault-access-token"?: string;
  };
  path?: never;
  query?: never;
  url: "/v1/sign/transaction";
};

export type SignTransactionResponses = {
  /**
   * OK
   */
  200: {
    result: {
      results: Array<
        | {
            success: true;
            result: {
              /**
               * The resulting signature
               */
              signature: string;
              /**
               * Optional signed data
               */
              signedData?: string;
            };
          }
        | {
            success: false;
            /**
             * Standardized error object
             */
            error: {
              kind: string;
              code: string;
              status: number;
              message?: string;
              /**
               * EVM address in hex format
               */
              address?: string;
              chainId?: string;
            };
          }
      >;
    };
  };
};

export type SignTransactionResponse =
  SignTransactionResponses[keyof SignTransactionResponses];

export type SignMessageData = {
  body?: {
    /**
     * Use a specific execution type and provide options to configure engine's execution strategy. The default execution option is `auto`, (doesn't need to be specified) which will automatically determine the most optimal options for you. If you would like to specify granular options about execution strategy choose one of the other `executionOptions` type and provide them.
     */
    executionOptions:
      | AutoExecutionOptions
      | AaExecutionOptions
      | AaZksyncExecutionOptions;
    params: Array<{
      /**
       * The message to sign
       */
      message: string;
      /**
       * Format of the message (text or hex)
       */
      messageFormat?: "text" | "hex";
    }>;
  };
  headers?: {
    /**
     * Vault Access Token used to access your EOA
     */
    "x-vault-access-token"?: string;
  };
  path?: never;
  query?: never;
  url: "/v1/sign/message";
};

export type SignMessageResponses = {
  /**
   * OK
   */
  200: {
    result: {
      results: Array<
        | {
            success: true;
            result: {
              /**
               * The resulting signature
               */
              signature: string;
              /**
               * Optional signed data
               */
              signedData?: string;
            };
          }
        | {
            success: false;
            /**
             * Standardized error object
             */
            error: {
              kind: string;
              code: string;
              status: number;
              message?: string;
              /**
               * EVM address in hex format
               */
              address?: string;
              chainId?: string;
            };
          }
      >;
    };
  };
};

export type SignMessageResponse =
  SignMessageResponses[keyof SignMessageResponses];

export type SignTypedDataData = {
  body?: {
    /**
     * Use a specific execution type and provide options to configure engine's execution strategy. The default execution option is `auto`, (doesn't need to be specified) which will automatically determine the most optimal options for you. If you would like to specify granular options about execution strategy choose one of the other `executionOptions` type and provide them.
     */
    executionOptions:
      | AutoExecutionOptions
      | AaExecutionOptions
      | AaZksyncExecutionOptions;
    params: Array<{
      domain: {
        chainId?: number | number;
        name?: string;
        salt?: string;
        verifyingContract?: string;
        version?: string;
      };
      types: {
        [key: string]: Array<{
          name: string;
          type: string;
        }>;
      };
      primaryType: string;
      message: {
        [key: string]: unknown;
      };
    }>;
  };
  headers?: {
    /**
     * Vault Access Token used to access your EOA
     */
    "x-vault-access-token"?: string;
  };
  path?: never;
  query?: never;
  url: "/v1/sign/typed-data";
};

export type SignTypedDataResponses = {
  /**
   * OK
   */
  200: {
    result: {
      results: Array<
        | {
            success: true;
            result: {
              /**
               * The resulting signature
               */
              signature: string;
              /**
               * Optional signed data
               */
              signedData?: string;
            };
          }
        | {
            success: false;
            /**
             * Standardized error object
             */
            error: {
              kind: string;
              code: string;
              status: number;
              message?: string;
              /**
               * EVM address in hex format
               */
              address?: string;
              chainId?: string;
            };
          }
      >;
    };
  };
};

export type SignTypedDataResponse =
  SignTypedDataResponses[keyof SignTypedDataResponses];

export type ReadContractData = {
  body?: {
    readOptions: {
      /**
       * Optional multicall address, defaults to the default multicall3 address for the chain
       */
      multicallAddress?: string;
      /**
       * The chain id of the transaction
       */
      chainId: string;
      /**
       * EVM address in hex format
       */
      from?: string;
    };
    params: Array<{
      /**
       * The function to call on the contract
       */
      method: string;
      /**
       * The parameters to pass to the function
       */
      params: Array<unknown>;
      /**
       * The contract address to call
       */
      contractAddress: string;
      /**
       * The ABI of the contract
       */
      abi?: Array<unknown>;
    }>;
  };
  path?: never;
  query?: never;
  url: "/v1/read/contract";
};

export type ReadContractResponses = {
  /**
   * OK
   */
  200: {
    result: {
      results: Array<{
        success: boolean;
        result?: null;
      }>;
    };
  };
};

export type ReadContractResponse =
  ReadContractResponses[keyof ReadContractResponses];

export type GetNativeBalanceData = {
  body?: {
    /**
     * The chain ID to query the balance on.
     */
    chainId: string;
    /**
     * The EVM address to get the native balance for.
     */
    address: string;
  };
  path?: never;
  query?: never;
  url: "/v1/read/balance";
};

export type GetNativeBalanceErrors = {
  /**
   * Bad Request - Invalid input
   */
  400: unknown;
  /**
   * Internal Server Error
   */
  500: unknown;
};

export type GetNativeBalanceResponses = {
  /**
   * OK - Balance fetched successfully.
   */
  200: {
    result: {
      /**
       * The native balance of the address as a stringified integer.
       */
      balance: string;
    };
  };
};

export type GetNativeBalanceResponse =
  GetNativeBalanceResponses[keyof GetNativeBalanceResponses];

export type EncodeFunctionDataData = {
  body?: {
    encodeOptions: {
      /**
       * The chain id of the transaction
       */
      chainId: string;
    };
    params: Array<{
      /**
       * The function to call on the contract
       */
      method: string;
      /**
       * The parameters to pass to the function
       */
      params: Array<unknown>;
      /**
       * The contract address to call
       */
      contractAddress: string;
      /**
       * The ABI of the contract
       */
      abi?: Array<unknown>;
      /**
       * The value to send with the transaction
       */
      value?: string;
    }>;
  };
  path?: never;
  query?: never;
  url: "/v1/encode/contract";
};

export type EncodeFunctionDataResponses = {
  /**
   * OK
   */
  200: {
    result: {
      results: Array<
        | {
            success: true;
            result: {
              /**
               * EVM address in hex format
               */
              to: string;
              data: string;
              /**
               * A string representing an bigint response, safe to parse with BigInt
               */
              value: string;
            };
          }
        | {
            success: false;
            /**
             * Standardized error object
             */
            error: {
              kind: string;
              code: string;
              status: number;
              message?: string;
              /**
               * EVM address in hex format
               */
              address?: string;
              chainId?: string;
            };
          }
      >;
    };
  };
};

export type EncodeFunctionDataResponse =
  EncodeFunctionDataResponses[keyof EncodeFunctionDataResponses];

export type SearchTransactionsData = {
  body?: {
    page?: number;
    limit?: number;
    filters?: Array<TransactionsFilterValue | TransactionsFilterNested>;
    filtersOperation?: "AND" | "OR";
    sortBy?: "createdAt" | "confirmedAt";
    sortDirection?: "asc" | "desc";
  };
  path?: never;
  query?: never;
  url: "/v1/transactions/search";
};

export type SearchTransactionsResponses = {
  /**
   * Transactions
   */
  200: {
    result: {
      transactions: Array<{
        id: string;
        batchIndex: number;
        chainId: string;
        from: string | null;
        transactionParams:
          | (string | number | boolean | null)
          | {
              [key: string]: unknown;
            }
          | Array<unknown>;
        transactionHash: string | null;
        confirmedAt: string | null;
        confirmedAtBlockNumber: string | null;
        enrichedData:
          | (string | number | boolean | null)
          | {
              [key: string]: unknown;
            }
          | Array<unknown>;
        executionParams:
          | (string | number | boolean | null)
          | {
              [key: string]: unknown;
            }
          | Array<unknown>;
        executionResult:
          | (string | number | boolean | null)
          | {
              [key: string]: unknown;
            }
          | Array<unknown>
          | null;
        createdAt: string;
        errorMessage: string | null;
        cancelledAt: string | null;
      }>;
      pagination: {
        totalCount: number;
        page: number;
        limit: number;
      };
    };
  };
};

export type SearchTransactionsResponse =
  SearchTransactionsResponses[keyof SearchTransactionsResponses];

export type GetTransactionAnalyticsData = {
  body?: {
    startDate: string;
    endDate: string;
    resolution: "hour" | "day" | "week" | "month";
    filters?: Array<TransactionsFilterValue | TransactionsFilterNested>;
    filtersOperation?: "AND" | "OR";
  };
  path?: never;
  query?: never;
  url: "/v1/transactions/analytics";
};

export type GetTransactionAnalyticsResponses = {
  /**
   * Transaction Analytics
   */
  200: {
    result: {
      analytics: Array<{
        timeBucket: string;
        chainId: string;
        count: number;
      }>;
      metadata: {
        resolution: "hour" | "day" | "week" | "month";
        startDate: string;
        endDate: string;
      };
    };
  };
};

export type GetTransactionAnalyticsResponse =
  GetTransactionAnalyticsResponses[keyof GetTransactionAnalyticsResponses];

export type GetTransactionAnalyticsSummaryData = {
  body?: {
    startDate?: string;
    endDate?: string;
    filters?: Array<TransactionsFilterValue | TransactionsFilterNested>;
    filtersOperation?: "AND" | "OR";
  };
  path?: never;
  query?: never;
  url: "/v1/transactions/analytics-summary";
};

export type GetTransactionAnalyticsSummaryErrors = {
  /**
   * Bad Request (e.g., invalid date format, filter depth exceeded)
   */
  400: unknown;
  /**
   * Internal Server Error (e.g., database error)
   */
  500: unknown;
};

export type GetTransactionAnalyticsSummaryResponses = {
  /**
   * Transaction Analytics Summary
   */
  200: {
    result: {
      summary: {
        /**
         * Total number of transactions matching the criteria.
         */
        totalCount: number;
        /**
         * Sum of actualGasCost (in wei) for all matching transactions, as a string.
         */
        totalGasCostWei: string;
        /**
         * Sum of actualGasUsed (gas units) for all matching transactions, as a string.
         */
        totalGasUnitsUsed: string;
      };
      metadata: {
        startDate?: string;
        endDate?: string;
      };
    };
  };
};

export type GetTransactionAnalyticsSummaryResponse =
  GetTransactionAnalyticsSummaryResponses[keyof GetTransactionAnalyticsSummaryResponses];

export type ClientOptions = {
  baseUrl: "http://localhost:3009" | (string & {});
};
