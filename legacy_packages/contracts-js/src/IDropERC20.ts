/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace IDropERC20 {
  export type AllowlistProofStruct = {
    proof: BytesLike[];
    maxQuantityInAllowlist: BigNumberish;
  };

  export type AllowlistProofStructOutput = [string[], BigNumber] & {
    proof: string[];
    maxQuantityInAllowlist: BigNumber;
  };
}

export declare namespace IDropClaimCondition {
  export type ClaimConditionStruct = {
    startTimestamp: BigNumberish;
    maxClaimableSupply: BigNumberish;
    supplyClaimed: BigNumberish;
    quantityLimitPerWallet: BigNumberish;
    waitTimeInSecondsBetweenClaims: BigNumberish;
    merkleRoot: BytesLike;
    pricePerToken: BigNumberish;
    currency: string;
  };

  export type ClaimConditionStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    string
  ] & {
    startTimestamp: BigNumber;
    maxClaimableSupply: BigNumber;
    supplyClaimed: BigNumber;
    quantityLimitPerWallet: BigNumber;
    waitTimeInSecondsBetweenClaims: BigNumber;
    merkleRoot: string;
    pricePerToken: BigNumber;
    currency: string;
  };
}

export interface IDropERC20Interface extends utils.Interface {
  functions: {
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "claim(address,uint256,address,uint256,(bytes32[],uint256),bytes)": FunctionFragment;
    "setClaimConditions((uint256,uint256,uint256,uint256,uint256,bytes32,uint256,address)[],bool)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allowance"
      | "approve"
      | "balanceOf"
      | "claim"
      | "setClaimConditions"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [
      string,
      BigNumberish,
      string,
      BigNumberish,
      IDropERC20.AllowlistProofStruct,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimConditions",
    values: [IDropClaimCondition.ClaimConditionStruct[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setClaimConditions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ClaimConditionsUpdated(tuple[])": EventFragment;
    "ContractURIUpdated(string,string)": EventFragment;
    "MaxTotalSupplyUpdated(uint256)": EventFragment;
    "TokensClaimed(uint256,address,address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimConditionsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractURIUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxTotalSupplyUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ClaimConditionsUpdatedEventObject {
  claimConditions: IDropClaimCondition.ClaimConditionStructOutput[];
}
export type ClaimConditionsUpdatedEvent = TypedEvent<
  [IDropClaimCondition.ClaimConditionStructOutput[]],
  ClaimConditionsUpdatedEventObject
>;

export type ClaimConditionsUpdatedEventFilter =
  TypedEventFilter<ClaimConditionsUpdatedEvent>;

export interface ContractURIUpdatedEventObject {
  prevURI: string;
  newURI: string;
}
export type ContractURIUpdatedEvent = TypedEvent<
  [string, string],
  ContractURIUpdatedEventObject
>;

export type ContractURIUpdatedEventFilter =
  TypedEventFilter<ContractURIUpdatedEvent>;

export interface MaxTotalSupplyUpdatedEventObject {
  maxTotalSupply: BigNumber;
}
export type MaxTotalSupplyUpdatedEvent = TypedEvent<
  [BigNumber],
  MaxTotalSupplyUpdatedEventObject
>;

export type MaxTotalSupplyUpdatedEventFilter =
  TypedEventFilter<MaxTotalSupplyUpdatedEvent>;

export interface TokensClaimedEventObject {
  claimConditionIndex: BigNumber;
  claimer: string;
  receiver: string;
  quantityClaimed: BigNumber;
}
export type TokensClaimedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  TokensClaimedEventObject
>;

export type TokensClaimedEventFilter = TypedEventFilter<TokensClaimedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface IDropERC20 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDropERC20Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    claim(
      receiver: string,
      quantity: BigNumberish,
      currency: string,
      pricePerToken: BigNumberish,
      allowlistProof: IDropERC20.AllowlistProofStruct,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setClaimConditions(
      phases: IDropClaimCondition.ClaimConditionStruct[],
      resetClaimEligibility: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  claim(
    receiver: string,
    quantity: BigNumberish,
    currency: string,
    pricePerToken: BigNumberish,
    allowlistProof: IDropERC20.AllowlistProofStruct,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setClaimConditions(
    phases: IDropClaimCondition.ClaimConditionStruct[],
    resetClaimEligibility: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      receiver: string,
      quantity: BigNumberish,
      currency: string,
      pricePerToken: BigNumberish,
      allowlistProof: IDropERC20.AllowlistProofStruct,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setClaimConditions(
      phases: IDropClaimCondition.ClaimConditionStruct[],
      resetClaimEligibility: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "ClaimConditionsUpdated(tuple[])"(
      claimConditions?: null
    ): ClaimConditionsUpdatedEventFilter;
    ClaimConditionsUpdated(
      claimConditions?: null
    ): ClaimConditionsUpdatedEventFilter;

    "ContractURIUpdated(string,string)"(
      prevURI?: null,
      newURI?: null
    ): ContractURIUpdatedEventFilter;
    ContractURIUpdated(
      prevURI?: null,
      newURI?: null
    ): ContractURIUpdatedEventFilter;

    "MaxTotalSupplyUpdated(uint256)"(
      maxTotalSupply?: null
    ): MaxTotalSupplyUpdatedEventFilter;
    MaxTotalSupplyUpdated(
      maxTotalSupply?: null
    ): MaxTotalSupplyUpdatedEventFilter;

    "TokensClaimed(uint256,address,address,uint256)"(
      claimConditionIndex?: BigNumberish | null,
      claimer?: string | null,
      receiver?: string | null,
      quantityClaimed?: null
    ): TokensClaimedEventFilter;
    TokensClaimed(
      claimConditionIndex?: BigNumberish | null,
      claimer?: string | null,
      receiver?: string | null,
      quantityClaimed?: null
    ): TokensClaimedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      receiver: string,
      quantity: BigNumberish,
      currency: string,
      pricePerToken: BigNumberish,
      allowlistProof: IDropERC20.AllowlistProofStruct,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setClaimConditions(
      phases: IDropClaimCondition.ClaimConditionStruct[],
      resetClaimEligibility: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      receiver: string,
      quantity: BigNumberish,
      currency: string,
      pricePerToken: BigNumberish,
      allowlistProof: IDropERC20.AllowlistProofStruct,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setClaimConditions(
      phases: IDropClaimCondition.ClaimConditionStruct[],
      resetClaimEligibility: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
