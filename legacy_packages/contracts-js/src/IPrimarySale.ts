/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface IPrimarySaleInterface extends utils.Interface {
  functions: {
    "primarySaleRecipient()": FunctionFragment;
    "setPrimarySaleRecipient(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "primarySaleRecipient" | "setPrimarySaleRecipient"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "primarySaleRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPrimarySaleRecipient",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "primarySaleRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPrimarySaleRecipient",
    data: BytesLike
  ): Result;

  events: {
    "PrimarySaleRecipientUpdated(address)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "PrimarySaleRecipientUpdated"
  ): EventFragment;
}

export interface PrimarySaleRecipientUpdatedEventObject {
  recipient: string;
}
export type PrimarySaleRecipientUpdatedEvent = TypedEvent<
  [string],
  PrimarySaleRecipientUpdatedEventObject
>;

export type PrimarySaleRecipientUpdatedEventFilter =
  TypedEventFilter<PrimarySaleRecipientUpdatedEvent>;

export interface IPrimarySale extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPrimarySaleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    primarySaleRecipient(overrides?: CallOverrides): Promise<[string]>;

    setPrimarySaleRecipient(
      _saleRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  primarySaleRecipient(overrides?: CallOverrides): Promise<string>;

  setPrimarySaleRecipient(
    _saleRecipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    primarySaleRecipient(overrides?: CallOverrides): Promise<string>;

    setPrimarySaleRecipient(
      _saleRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "PrimarySaleRecipientUpdated(address)"(
      recipient?: string | null
    ): PrimarySaleRecipientUpdatedEventFilter;
    PrimarySaleRecipientUpdated(
      recipient?: string | null
    ): PrimarySaleRecipientUpdatedEventFilter;
  };

  estimateGas: {
    primarySaleRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    setPrimarySaleRecipient(
      _saleRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    primarySaleRecipient(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setPrimarySaleRecipient(
      _saleRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
