/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface AirdropERC1155ClaimableInterface extends utils.Interface {
  functions: {
    "airdropTokenAddress()": FunctionFragment;
    "availableAmount(uint256)": FunctionFragment;
    "claim(address,uint256,uint256,bytes32[],uint256)": FunctionFragment;
    "expirationTimestamp()": FunctionFragment;
    "initialize(address[],address,address,uint256[],uint256[],uint256,uint256[],bytes32[])": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
    "merkleRoot(uint256)": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "openClaimLimitPerWallet(uint256)": FunctionFragment;
    "supplyClaimedByWallet(uint256,address)": FunctionFragment;
    "tokenIds(uint256)": FunctionFragment;
    "tokenOwner()": FunctionFragment;
    "verifyClaim(address,uint256,uint256,bytes32[],uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "airdropTokenAddress"
      | "availableAmount"
      | "claim"
      | "expirationTimestamp"
      | "initialize"
      | "isTrustedForwarder"
      | "merkleRoot"
      | "multicall"
      | "openClaimLimitPerWallet"
      | "supplyClaimedByWallet"
      | "tokenIds"
      | "tokenOwner"
      | "verifyClaim"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "airdropTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "availableAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [string, BigNumberish, BigNumberish, BytesLike[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "expirationTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string[],
      string,
      string,
      BigNumberish[],
      BigNumberish[],
      BigNumberish,
      BigNumberish[],
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "merkleRoot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "openClaimLimitPerWallet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyClaimedByWallet",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifyClaim",
    values: [string, BigNumberish, BigNumberish, BytesLike[], BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "airdropTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "availableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "expirationTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "merkleRoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openClaimLimitPerWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supplyClaimedByWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenIds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyClaim",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "TokensClaimed(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensClaimed"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface TokensClaimedEventObject {
  claimer: string;
  receiver: string;
  tokenId: BigNumber;
  quantityClaimed: BigNumber;
}
export type TokensClaimedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  TokensClaimedEventObject
>;

export type TokensClaimedEventFilter = TypedEventFilter<TokensClaimedEvent>;

export interface AirdropERC1155Claimable extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AirdropERC1155ClaimableInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    airdropTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    availableAmount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claim(
      _receiver: string,
      _quantity: BigNumberish,
      _tokenId: BigNumberish,
      _proofs: BytesLike[],
      _proofMaxQuantityForWallet: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    expirationTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _trustedForwarders: string[],
      _tokenOwner: string,
      _airdropTokenAddress: string,
      _tokenIds: BigNumberish[],
      _availableAmounts: BigNumberish[],
      _expirationTimestamp: BigNumberish,
      _openClaimLimitPerWallet: BigNumberish[],
      _merkleRoot: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    merkleRoot(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    openClaimLimitPerWallet(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    supplyClaimedByWallet(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenOwner(overrides?: CallOverrides): Promise<[string]>;

    verifyClaim(
      _claimer: string,
      _quantity: BigNumberish,
      _tokenId: BigNumberish,
      _proofs: BytesLike[],
      _proofMaxQuantityForWallet: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  airdropTokenAddress(overrides?: CallOverrides): Promise<string>;

  availableAmount(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claim(
    _receiver: string,
    _quantity: BigNumberish,
    _tokenId: BigNumberish,
    _proofs: BytesLike[],
    _proofMaxQuantityForWallet: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  expirationTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _trustedForwarders: string[],
    _tokenOwner: string,
    _airdropTokenAddress: string,
    _tokenIds: BigNumberish[],
    _availableAmounts: BigNumberish[],
    _expirationTimestamp: BigNumberish,
    _openClaimLimitPerWallet: BigNumberish[],
    _merkleRoot: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isTrustedForwarder(
    forwarder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  merkleRoot(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  multicall(
    data: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  openClaimLimitPerWallet(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  supplyClaimedByWallet(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  tokenOwner(overrides?: CallOverrides): Promise<string>;

  verifyClaim(
    _claimer: string,
    _quantity: BigNumberish,
    _tokenId: BigNumberish,
    _proofs: BytesLike[],
    _proofMaxQuantityForWallet: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    airdropTokenAddress(overrides?: CallOverrides): Promise<string>;

    availableAmount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(
      _receiver: string,
      _quantity: BigNumberish,
      _tokenId: BigNumberish,
      _proofs: BytesLike[],
      _proofMaxQuantityForWallet: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    expirationTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _trustedForwarders: string[],
      _tokenOwner: string,
      _airdropTokenAddress: string,
      _tokenIds: BigNumberish[],
      _availableAmounts: BigNumberish[],
      _expirationTimestamp: BigNumberish,
      _openClaimLimitPerWallet: BigNumberish[],
      _merkleRoot: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    merkleRoot(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    openClaimLimitPerWallet(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supplyClaimedByWallet(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    tokenOwner(overrides?: CallOverrides): Promise<string>;

    verifyClaim(
      _claimer: string,
      _quantity: BigNumberish,
      _tokenId: BigNumberish,
      _proofs: BytesLike[],
      _proofMaxQuantityForWallet: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "TokensClaimed(address,address,uint256,uint256)"(
      claimer?: string | null,
      receiver?: string | null,
      tokenId?: BigNumberish | null,
      quantityClaimed?: null
    ): TokensClaimedEventFilter;
    TokensClaimed(
      claimer?: string | null,
      receiver?: string | null,
      tokenId?: BigNumberish | null,
      quantityClaimed?: null
    ): TokensClaimedEventFilter;
  };

  estimateGas: {
    airdropTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    availableAmount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(
      _receiver: string,
      _quantity: BigNumberish,
      _tokenId: BigNumberish,
      _proofs: BytesLike[],
      _proofMaxQuantityForWallet: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    expirationTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _trustedForwarders: string[],
      _tokenOwner: string,
      _airdropTokenAddress: string,
      _tokenIds: BigNumberish[],
      _availableAmounts: BigNumberish[],
      _expirationTimestamp: BigNumberish,
      _openClaimLimitPerWallet: BigNumberish[],
      _merkleRoot: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    merkleRoot(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    openClaimLimitPerWallet(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supplyClaimedByWallet(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    tokenOwner(overrides?: CallOverrides): Promise<BigNumber>;

    verifyClaim(
      _claimer: string,
      _quantity: BigNumberish,
      _tokenId: BigNumberish,
      _proofs: BytesLike[],
      _proofMaxQuantityForWallet: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    airdropTokenAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    availableAmount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      _receiver: string,
      _quantity: BigNumberish,
      _tokenId: BigNumberish,
      _proofs: BytesLike[],
      _proofMaxQuantityForWallet: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    expirationTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _trustedForwarders: string[],
      _tokenOwner: string,
      _airdropTokenAddress: string,
      _tokenIds: BigNumberish[],
      _availableAmounts: BigNumberish[],
      _expirationTimestamp: BigNumberish,
      _openClaimLimitPerWallet: BigNumberish[],
      _merkleRoot: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    merkleRoot(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    openClaimLimitPerWallet(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supplyClaimedByWallet(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    verifyClaim(
      _claimer: string,
      _quantity: BigNumberish,
      _tokenId: BigNumberish,
      _proofs: BytesLike[],
      _proofMaxQuantityForWallet: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
