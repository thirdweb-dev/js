/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface PlatformFeeImplInterface extends utils.Interface {
  functions: {
    "getFlatPlatformFeeInfo()": FunctionFragment;
    "getPlatformFeeInfo()": FunctionFragment;
    "getPlatformFeeType()": FunctionFragment;
    "setFlatPlatformFeeInfo(address,uint256)": FunctionFragment;
    "setPlatformFeeInfo(address,uint256)": FunctionFragment;
    "setPlatformFeeType(uint8)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getFlatPlatformFeeInfo"
      | "getPlatformFeeInfo"
      | "getPlatformFeeType"
      | "setFlatPlatformFeeInfo"
      | "setPlatformFeeInfo"
      | "setPlatformFeeType"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getFlatPlatformFeeInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlatformFeeInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlatformFeeType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFlatPlatformFeeInfo",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformFeeInfo",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformFeeType",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getFlatPlatformFeeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlatformFeeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlatformFeeType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFlatPlatformFeeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformFeeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformFeeType",
    data: BytesLike
  ): Result;

  events: {
    "FlatPlatformFeeUpdated(address,uint256)": EventFragment;
    "PlatformFeeInfoUpdated(address,uint256)": EventFragment;
    "PlatformFeeTypeUpdated(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FlatPlatformFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlatformFeeInfoUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlatformFeeTypeUpdated"): EventFragment;
}

export interface FlatPlatformFeeUpdatedEventObject {
  platformFeeRecipient: string;
  flatFee: BigNumber;
}
export type FlatPlatformFeeUpdatedEvent = TypedEvent<
  [string, BigNumber],
  FlatPlatformFeeUpdatedEventObject
>;

export type FlatPlatformFeeUpdatedEventFilter =
  TypedEventFilter<FlatPlatformFeeUpdatedEvent>;

export interface PlatformFeeInfoUpdatedEventObject {
  platformFeeRecipient: string;
  platformFeeBps: BigNumber;
}
export type PlatformFeeInfoUpdatedEvent = TypedEvent<
  [string, BigNumber],
  PlatformFeeInfoUpdatedEventObject
>;

export type PlatformFeeInfoUpdatedEventFilter =
  TypedEventFilter<PlatformFeeInfoUpdatedEvent>;

export interface PlatformFeeTypeUpdatedEventObject {
  feeType: number;
}
export type PlatformFeeTypeUpdatedEvent = TypedEvent<
  [number],
  PlatformFeeTypeUpdatedEventObject
>;

export type PlatformFeeTypeUpdatedEventFilter =
  TypedEventFilter<PlatformFeeTypeUpdatedEvent>;

export interface PlatformFeeImpl extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PlatformFeeImplInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getFlatPlatformFeeInfo(
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    getPlatformFeeInfo(overrides?: CallOverrides): Promise<[string, number]>;

    getPlatformFeeType(overrides?: CallOverrides): Promise<[number]>;

    setFlatPlatformFeeInfo(
      _platformFeeRecipient: string,
      _flatFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPlatformFeeInfo(
      _platformFeeRecipient: string,
      _platformFeeBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPlatformFeeType(
      _feeType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getFlatPlatformFeeInfo(
    overrides?: CallOverrides
  ): Promise<[string, BigNumber]>;

  getPlatformFeeInfo(overrides?: CallOverrides): Promise<[string, number]>;

  getPlatformFeeType(overrides?: CallOverrides): Promise<number>;

  setFlatPlatformFeeInfo(
    _platformFeeRecipient: string,
    _flatFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPlatformFeeInfo(
    _platformFeeRecipient: string,
    _platformFeeBps: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPlatformFeeType(
    _feeType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getFlatPlatformFeeInfo(
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    getPlatformFeeInfo(overrides?: CallOverrides): Promise<[string, number]>;

    getPlatformFeeType(overrides?: CallOverrides): Promise<number>;

    setFlatPlatformFeeInfo(
      _platformFeeRecipient: string,
      _flatFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPlatformFeeInfo(
      _platformFeeRecipient: string,
      _platformFeeBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPlatformFeeType(
      _feeType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FlatPlatformFeeUpdated(address,uint256)"(
      platformFeeRecipient?: null,
      flatFee?: null
    ): FlatPlatformFeeUpdatedEventFilter;
    FlatPlatformFeeUpdated(
      platformFeeRecipient?: null,
      flatFee?: null
    ): FlatPlatformFeeUpdatedEventFilter;

    "PlatformFeeInfoUpdated(address,uint256)"(
      platformFeeRecipient?: string | null,
      platformFeeBps?: null
    ): PlatformFeeInfoUpdatedEventFilter;
    PlatformFeeInfoUpdated(
      platformFeeRecipient?: string | null,
      platformFeeBps?: null
    ): PlatformFeeInfoUpdatedEventFilter;

    "PlatformFeeTypeUpdated(uint8)"(
      feeType?: null
    ): PlatformFeeTypeUpdatedEventFilter;
    PlatformFeeTypeUpdated(feeType?: null): PlatformFeeTypeUpdatedEventFilter;
  };

  estimateGas: {
    getFlatPlatformFeeInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getPlatformFeeInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getPlatformFeeType(overrides?: CallOverrides): Promise<BigNumber>;

    setFlatPlatformFeeInfo(
      _platformFeeRecipient: string,
      _flatFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPlatformFeeInfo(
      _platformFeeRecipient: string,
      _platformFeeBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPlatformFeeType(
      _feeType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getFlatPlatformFeeInfo(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlatformFeeInfo(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlatformFeeType(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFlatPlatformFeeInfo(
      _platformFeeRecipient: string,
      _flatFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPlatformFeeInfo(
      _platformFeeRecipient: string,
      _platformFeeBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPlatformFeeType(
      _feeType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
