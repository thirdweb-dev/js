/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface IPlatformFeeInterface extends utils.Interface {
  functions: {
    "getPlatformFeeInfo()": FunctionFragment;
    "setPlatformFeeInfo(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "getPlatformFeeInfo" | "setPlatformFeeInfo"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getPlatformFeeInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformFeeInfo",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getPlatformFeeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformFeeInfo",
    data: BytesLike
  ): Result;

  events: {
    "PlatformFeeInfoUpdated(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PlatformFeeInfoUpdated"): EventFragment;
}

export interface PlatformFeeInfoUpdatedEventObject {
  platformFeeRecipient: string;
  platformFeeBps: BigNumber;
}
export type PlatformFeeInfoUpdatedEvent = TypedEvent<
  [string, BigNumber],
  PlatformFeeInfoUpdatedEventObject
>;

export type PlatformFeeInfoUpdatedEventFilter =
  TypedEventFilter<PlatformFeeInfoUpdatedEvent>;

export interface IPlatformFee extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPlatformFeeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getPlatformFeeInfo(overrides?: CallOverrides): Promise<[string, number]>;

    setPlatformFeeInfo(
      _platformFeeRecipient: string,
      _platformFeeBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getPlatformFeeInfo(overrides?: CallOverrides): Promise<[string, number]>;

  setPlatformFeeInfo(
    _platformFeeRecipient: string,
    _platformFeeBps: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getPlatformFeeInfo(overrides?: CallOverrides): Promise<[string, number]>;

    setPlatformFeeInfo(
      _platformFeeRecipient: string,
      _platformFeeBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "PlatformFeeInfoUpdated(address,uint256)"(
      platformFeeRecipient?: string | null,
      platformFeeBps?: null
    ): PlatformFeeInfoUpdatedEventFilter;
    PlatformFeeInfoUpdated(
      platformFeeRecipient?: string | null,
      platformFeeBps?: null
    ): PlatformFeeInfoUpdatedEventFilter;
  };

  estimateGas: {
    getPlatformFeeInfo(overrides?: CallOverrides): Promise<BigNumber>;

    setPlatformFeeInfo(
      _platformFeeRecipient: string,
      _platformFeeBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getPlatformFeeInfo(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setPlatformFeeInfo(
      _platformFeeRecipient: string,
      _platformFeeBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
