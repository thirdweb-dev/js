/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace ISignatureMintERC20 {
  export type MintRequestStruct = {
    to: string;
    primarySaleRecipient: string;
    quantity: BigNumberish;
    price: BigNumberish;
    currency: string;
    validityStartTimestamp: BigNumberish;
    validityEndTimestamp: BigNumberish;
    uid: BytesLike;
  };

  export type MintRequestStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    string
  ] & {
    to: string;
    primarySaleRecipient: string;
    quantity: BigNumber;
    price: BigNumber;
    currency: string;
    validityStartTimestamp: BigNumber;
    validityEndTimestamp: BigNumber;
    uid: string;
  };
}

export interface SignatureMintERC20UpgradeableInterface
  extends utils.Interface {
  functions: {
    "eip712Domain()": FunctionFragment;
    "mintWithSignature((address,address,uint256,uint256,address,uint128,uint128,bytes32),bytes)": FunctionFragment;
    "verify((address,address,uint256,uint256,address,uint128,uint128,bytes32),bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "eip712Domain" | "mintWithSignature" | "verify"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintWithSignature",
    values: [ISignatureMintERC20.MintRequestStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [ISignatureMintERC20.MintRequestStruct, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintWithSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;

  events: {
    "EIP712DomainChanged()": EventFragment;
    "Initialized(uint8)": EventFragment;
    "TokensMintedWithSignature(address,address,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EIP712DomainChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensMintedWithSignature"): EventFragment;
}

export interface EIP712DomainChangedEventObject {}
export type EIP712DomainChangedEvent = TypedEvent<
  [],
  EIP712DomainChangedEventObject
>;

export type EIP712DomainChangedEventFilter =
  TypedEventFilter<EIP712DomainChangedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface TokensMintedWithSignatureEventObject {
  signer: string;
  mintedTo: string;
  mintRequest: ISignatureMintERC20.MintRequestStructOutput;
}
export type TokensMintedWithSignatureEvent = TypedEvent<
  [string, string, ISignatureMintERC20.MintRequestStructOutput],
  TokensMintedWithSignatureEventObject
>;

export type TokensMintedWithSignatureEventFilter =
  TypedEventFilter<TokensMintedWithSignatureEvent>;

export interface SignatureMintERC20Upgradeable extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SignatureMintERC20UpgradeableInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    eip712Domain(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, string, string, BigNumber[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: BigNumber;
        verifyingContract: string;
        salt: string;
        extensions: BigNumber[];
      }
    >;

    mintWithSignature(
      req: ISignatureMintERC20.MintRequestStruct,
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verify(
      _req: ISignatureMintERC20.MintRequestStruct,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { success: boolean; signer: string }>;
  };

  eip712Domain(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, string, string, BigNumber[]] & {
      fields: string;
      name: string;
      version: string;
      chainId: BigNumber;
      verifyingContract: string;
      salt: string;
      extensions: BigNumber[];
    }
  >;

  mintWithSignature(
    req: ISignatureMintERC20.MintRequestStruct,
    signature: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verify(
    _req: ISignatureMintERC20.MintRequestStruct,
    _signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<[boolean, string] & { success: boolean; signer: string }>;

  callStatic: {
    eip712Domain(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, string, string, BigNumber[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: BigNumber;
        verifyingContract: string;
        salt: string;
        extensions: BigNumber[];
      }
    >;

    mintWithSignature(
      req: ISignatureMintERC20.MintRequestStruct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    verify(
      _req: ISignatureMintERC20.MintRequestStruct,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { success: boolean; signer: string }>;
  };

  filters: {
    "EIP712DomainChanged()"(): EIP712DomainChangedEventFilter;
    EIP712DomainChanged(): EIP712DomainChangedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "TokensMintedWithSignature(address,address,tuple)"(
      signer?: string | null,
      mintedTo?: string | null,
      mintRequest?: null
    ): TokensMintedWithSignatureEventFilter;
    TokensMintedWithSignature(
      signer?: string | null,
      mintedTo?: string | null,
      mintRequest?: null
    ): TokensMintedWithSignatureEventFilter;
  };

  estimateGas: {
    eip712Domain(overrides?: CallOverrides): Promise<BigNumber>;

    mintWithSignature(
      req: ISignatureMintERC20.MintRequestStruct,
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verify(
      _req: ISignatureMintERC20.MintRequestStruct,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    eip712Domain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintWithSignature(
      req: ISignatureMintERC20.MintRequestStruct,
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verify(
      _req: ISignatureMintERC20.MintRequestStruct,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
