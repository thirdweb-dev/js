/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace IEnglishAuctions {
  export type AuctionParametersStruct = {
    assetContract: string;
    tokenId: BigNumberish;
    quantity: BigNumberish;
    currency: string;
    minimumBidAmount: BigNumberish;
    buyoutBidAmount: BigNumberish;
    timeBufferInSeconds: BigNumberish;
    bidBufferBps: BigNumberish;
    startTimestamp: BigNumberish;
    endTimestamp: BigNumberish;
  };

  export type AuctionParametersStructOutput = [
    string,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    assetContract: string;
    tokenId: BigNumber;
    quantity: BigNumber;
    currency: string;
    minimumBidAmount: BigNumber;
    buyoutBidAmount: BigNumber;
    timeBufferInSeconds: BigNumber;
    bidBufferBps: BigNumber;
    startTimestamp: BigNumber;
    endTimestamp: BigNumber;
  };

  export type AuctionStruct = {
    auctionId: BigNumberish;
    tokenId: BigNumberish;
    quantity: BigNumberish;
    minimumBidAmount: BigNumberish;
    buyoutBidAmount: BigNumberish;
    timeBufferInSeconds: BigNumberish;
    bidBufferBps: BigNumberish;
    startTimestamp: BigNumberish;
    endTimestamp: BigNumberish;
    auctionCreator: string;
    assetContract: string;
    currency: string;
    tokenType: BigNumberish;
    status: BigNumberish;
  };

  export type AuctionStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    number,
    number
  ] & {
    auctionId: BigNumber;
    tokenId: BigNumber;
    quantity: BigNumber;
    minimumBidAmount: BigNumber;
    buyoutBidAmount: BigNumber;
    timeBufferInSeconds: BigNumber;
    bidBufferBps: BigNumber;
    startTimestamp: BigNumber;
    endTimestamp: BigNumber;
    auctionCreator: string;
    assetContract: string;
    currency: string;
    tokenType: number;
    status: number;
  };
}

export interface EnglishAuctionsLogicInterface extends utils.Interface {
  functions: {
    "_msgData()": FunctionFragment;
    "_msgSender()": FunctionFragment;
    "bidInAuction(uint256,uint256)": FunctionFragment;
    "cancelAuction(uint256)": FunctionFragment;
    "collectAuctionPayout(uint256)": FunctionFragment;
    "collectAuctionTokens(uint256)": FunctionFragment;
    "createAuction((address,uint256,uint256,address,uint256,uint256,uint64,uint64,uint64,uint64))": FunctionFragment;
    "getAllAuctions(uint256,uint256)": FunctionFragment;
    "getAllValidAuctions(uint256,uint256)": FunctionFragment;
    "getAuction(uint256)": FunctionFragment;
    "getWinningBid(uint256)": FunctionFragment;
    "isAuctionExpired(uint256)": FunctionFragment;
    "isNewWinningBid(uint256,uint256)": FunctionFragment;
    "totalAuctions()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_msgData"
      | "_msgSender"
      | "bidInAuction"
      | "cancelAuction"
      | "collectAuctionPayout"
      | "collectAuctionTokens"
      | "createAuction"
      | "getAllAuctions"
      | "getAllValidAuctions"
      | "getAuction"
      | "getWinningBid"
      | "isAuctionExpired"
      | "isNewWinningBid"
      | "totalAuctions"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "_msgData", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_msgSender",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bidInAuction",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collectAuctionPayout",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collectAuctionTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createAuction",
    values: [IEnglishAuctions.AuctionParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllAuctions",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllValidAuctions",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWinningBid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuctionExpired",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isNewWinningBid",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAuctions",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "_msgData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_msgSender", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bidInAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectAuctionPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectAuctionTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllValidAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAuction", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getWinningBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuctionExpired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isNewWinningBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAuctions",
    data: BytesLike
  ): Result;

  events: {
    "AuctionClosed(uint256,address,address,uint256,address,address)": EventFragment;
    "CancelledAuction(address,uint256)": EventFragment;
    "NewAuction(address,uint256,address,tuple)": EventFragment;
    "NewBid(uint256,address,address,uint256,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuctionClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelledAuction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAuction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewBid"): EventFragment;
}

export interface AuctionClosedEventObject {
  auctionId: BigNumber;
  assetContract: string;
  closer: string;
  tokenId: BigNumber;
  auctionCreator: string;
  winningBidder: string;
}
export type AuctionClosedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, string, string],
  AuctionClosedEventObject
>;

export type AuctionClosedEventFilter = TypedEventFilter<AuctionClosedEvent>;

export interface CancelledAuctionEventObject {
  auctionCreator: string;
  auctionId: BigNumber;
}
export type CancelledAuctionEvent = TypedEvent<
  [string, BigNumber],
  CancelledAuctionEventObject
>;

export type CancelledAuctionEventFilter =
  TypedEventFilter<CancelledAuctionEvent>;

export interface NewAuctionEventObject {
  auctionCreator: string;
  auctionId: BigNumber;
  assetContract: string;
  auction: IEnglishAuctions.AuctionStructOutput;
}
export type NewAuctionEvent = TypedEvent<
  [string, BigNumber, string, IEnglishAuctions.AuctionStructOutput],
  NewAuctionEventObject
>;

export type NewAuctionEventFilter = TypedEventFilter<NewAuctionEvent>;

export interface NewBidEventObject {
  auctionId: BigNumber;
  bidder: string;
  assetContract: string;
  bidAmount: BigNumber;
  auction: IEnglishAuctions.AuctionStructOutput;
}
export type NewBidEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, IEnglishAuctions.AuctionStructOutput],
  NewBidEventObject
>;

export type NewBidEventFilter = TypedEventFilter<NewBidEvent>;

export interface EnglishAuctionsLogic extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EnglishAuctionsLogicInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _msgData(overrides?: CallOverrides): Promise<[string]>;

    _msgSender(
      overrides?: CallOverrides
    ): Promise<[string] & { sender: string }>;

    bidInAuction(
      _auctionId: BigNumberish,
      _bidAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelAuction(
      _auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collectAuctionPayout(
      _auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collectAuctionTokens(
      _auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createAuction(
      _params: IEnglishAuctions.AuctionParametersStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAllAuctions(
      _startId: BigNumberish,
      _endId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [IEnglishAuctions.AuctionStructOutput[]] & {
        _allAuctions: IEnglishAuctions.AuctionStructOutput[];
      }
    >;

    getAllValidAuctions(
      _startId: BigNumberish,
      _endId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [IEnglishAuctions.AuctionStructOutput[]] & {
        _validAuctions: IEnglishAuctions.AuctionStructOutput[];
      }
    >;

    getAuction(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [IEnglishAuctions.AuctionStructOutput] & {
        _auction: IEnglishAuctions.AuctionStructOutput;
      }
    >;

    getWinningBid(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        _bidder: string;
        _currency: string;
        _bidAmount: BigNumber;
      }
    >;

    isAuctionExpired(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isNewWinningBid(
      _auctionId: BigNumberish,
      _bidAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    totalAuctions(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  _msgData(overrides?: CallOverrides): Promise<string>;

  _msgSender(overrides?: CallOverrides): Promise<string>;

  bidInAuction(
    _auctionId: BigNumberish,
    _bidAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelAuction(
    _auctionId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collectAuctionPayout(
    _auctionId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collectAuctionTokens(
    _auctionId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createAuction(
    _params: IEnglishAuctions.AuctionParametersStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAllAuctions(
    _startId: BigNumberish,
    _endId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IEnglishAuctions.AuctionStructOutput[]>;

  getAllValidAuctions(
    _startId: BigNumberish,
    _endId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IEnglishAuctions.AuctionStructOutput[]>;

  getAuction(
    _auctionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IEnglishAuctions.AuctionStructOutput>;

  getWinningBid(
    _auctionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      _bidder: string;
      _currency: string;
      _bidAmount: BigNumber;
    }
  >;

  isAuctionExpired(
    _auctionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isNewWinningBid(
    _auctionId: BigNumberish,
    _bidAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  totalAuctions(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    _msgData(overrides?: CallOverrides): Promise<string>;

    _msgSender(overrides?: CallOverrides): Promise<string>;

    bidInAuction(
      _auctionId: BigNumberish,
      _bidAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelAuction(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    collectAuctionPayout(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    collectAuctionTokens(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createAuction(
      _params: IEnglishAuctions.AuctionParametersStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllAuctions(
      _startId: BigNumberish,
      _endId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IEnglishAuctions.AuctionStructOutput[]>;

    getAllValidAuctions(
      _startId: BigNumberish,
      _endId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IEnglishAuctions.AuctionStructOutput[]>;

    getAuction(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IEnglishAuctions.AuctionStructOutput>;

    getWinningBid(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        _bidder: string;
        _currency: string;
        _bidAmount: BigNumber;
      }
    >;

    isAuctionExpired(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isNewWinningBid(
      _auctionId: BigNumberish,
      _bidAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalAuctions(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "AuctionClosed(uint256,address,address,uint256,address,address)"(
      auctionId?: BigNumberish | null,
      assetContract?: string | null,
      closer?: string | null,
      tokenId?: null,
      auctionCreator?: null,
      winningBidder?: null
    ): AuctionClosedEventFilter;
    AuctionClosed(
      auctionId?: BigNumberish | null,
      assetContract?: string | null,
      closer?: string | null,
      tokenId?: null,
      auctionCreator?: null,
      winningBidder?: null
    ): AuctionClosedEventFilter;

    "CancelledAuction(address,uint256)"(
      auctionCreator?: string | null,
      auctionId?: BigNumberish | null
    ): CancelledAuctionEventFilter;
    CancelledAuction(
      auctionCreator?: string | null,
      auctionId?: BigNumberish | null
    ): CancelledAuctionEventFilter;

    "NewAuction(address,uint256,address,tuple)"(
      auctionCreator?: string | null,
      auctionId?: BigNumberish | null,
      assetContract?: string | null,
      auction?: null
    ): NewAuctionEventFilter;
    NewAuction(
      auctionCreator?: string | null,
      auctionId?: BigNumberish | null,
      assetContract?: string | null,
      auction?: null
    ): NewAuctionEventFilter;

    "NewBid(uint256,address,address,uint256,tuple)"(
      auctionId?: BigNumberish | null,
      bidder?: string | null,
      assetContract?: string | null,
      bidAmount?: null,
      auction?: null
    ): NewBidEventFilter;
    NewBid(
      auctionId?: BigNumberish | null,
      bidder?: string | null,
      assetContract?: string | null,
      bidAmount?: null,
      auction?: null
    ): NewBidEventFilter;
  };

  estimateGas: {
    _msgData(overrides?: CallOverrides): Promise<BigNumber>;

    _msgSender(overrides?: CallOverrides): Promise<BigNumber>;

    bidInAuction(
      _auctionId: BigNumberish,
      _bidAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelAuction(
      _auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collectAuctionPayout(
      _auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collectAuctionTokens(
      _auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createAuction(
      _params: IEnglishAuctions.AuctionParametersStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAllAuctions(
      _startId: BigNumberish,
      _endId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllValidAuctions(
      _startId: BigNumberish,
      _endId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuction(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWinningBid(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAuctionExpired(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isNewWinningBid(
      _auctionId: BigNumberish,
      _bidAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalAuctions(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _msgData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _msgSender(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bidInAuction(
      _auctionId: BigNumberish,
      _bidAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelAuction(
      _auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collectAuctionPayout(
      _auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collectAuctionTokens(
      _auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createAuction(
      _params: IEnglishAuctions.AuctionParametersStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAllAuctions(
      _startId: BigNumberish,
      _endId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllValidAuctions(
      _startId: BigNumberish,
      _endId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuction(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWinningBid(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAuctionExpired(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isNewWinningBid(
      _auctionId: BigNumberish,
      _bidAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalAuctions(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
