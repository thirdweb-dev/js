/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { Router, RouterInterface } from "../Router";

const _abi = [
  {
    type: "fallback",
    stateMutability: "payable",
  },
  {
    type: "receive",
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "_getPluginForFunction",
    inputs: [
      {
        name: "_selector",
        type: "bytes4",
        internalType: "bytes4",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "addPlugin",
    inputs: [
      {
        name: "_plugin",
        type: "tuple",
        internalType: "struct IPluginMap.Plugin",
        components: [
          {
            name: "functionSelector",
            type: "bytes4",
            internalType: "bytes4",
          },
          {
            name: "functionSignature",
            type: "string",
            internalType: "string",
          },
          {
            name: "pluginAddress",
            type: "address",
            internalType: "address",
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "getAllFunctionsOfPlugin",
    inputs: [
      {
        name: "_pluginAddress",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "registered",
        type: "bytes4[]",
        internalType: "bytes4[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getAllPlugins",
    inputs: [],
    outputs: [
      {
        name: "registered",
        type: "tuple[]",
        internalType: "struct IPluginMap.Plugin[]",
        components: [
          {
            name: "functionSelector",
            type: "bytes4",
            internalType: "bytes4",
          },
          {
            name: "functionSignature",
            type: "string",
            internalType: "string",
          },
          {
            name: "pluginAddress",
            type: "address",
            internalType: "address",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getPluginForFunction",
    inputs: [
      {
        name: "_selector",
        type: "bytes4",
        internalType: "bytes4",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "multicall",
    inputs: [
      {
        name: "data",
        type: "bytes[]",
        internalType: "bytes[]",
      },
    ],
    outputs: [
      {
        name: "results",
        type: "bytes[]",
        internalType: "bytes[]",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "pluginMap",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "removePlugin",
    inputs: [
      {
        name: "_selector",
        type: "bytes4",
        internalType: "bytes4",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "supportsInterface",
    inputs: [
      {
        name: "interfaceId",
        type: "bytes4",
        internalType: "bytes4",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "updatePlugin",
    inputs: [
      {
        name: "_plugin",
        type: "tuple",
        internalType: "struct IPluginMap.Plugin",
        components: [
          {
            name: "functionSelector",
            type: "bytes4",
            internalType: "bytes4",
          },
          {
            name: "functionSignature",
            type: "string",
            internalType: "string",
          },
          {
            name: "pluginAddress",
            type: "address",
            internalType: "address",
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "PluginAdded",
    inputs: [
      {
        name: "functionSelector",
        type: "bytes4",
        indexed: true,
        internalType: "bytes4",
      },
      {
        name: "pluginAddress",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "PluginRemoved",
    inputs: [
      {
        name: "functionSelector",
        type: "bytes4",
        indexed: true,
        internalType: "bytes4",
      },
      {
        name: "pluginAddress",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "PluginSet",
    inputs: [
      {
        name: "functionSelector",
        type: "bytes4",
        indexed: true,
        internalType: "bytes4",
      },
      {
        name: "functionSignature",
        type: "string",
        indexed: true,
        internalType: "string",
      },
      {
        name: "pluginAddress",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "PluginUpdated",
    inputs: [
      {
        name: "functionSelector",
        type: "bytes4",
        indexed: true,
        internalType: "bytes4",
      },
      {
        name: "oldPluginAddress",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "newPluginAddress",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
];

export class Router__factory {
  static readonly abi = _abi;
  static createInterface(): RouterInterface {
    return new utils.Interface(_abi) as RouterInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Router {
    return new Contract(address, _abi, signerOrProvider) as Router;
  }
}
