/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { RouterStorage, RouterStorageInterface } from "../RouterStorage";

const _abi = [
  {
    type: "function",
    name: "ROUTER_STORAGE_POSITION",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "view",
  },
];

const _bytecode =
  "0x60a6610038600b82828239805160001a607314602b57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c80632be9b20e146038575b600080fd5b605e7f012ef321094c8c682aa635dfdfcd754624a7473f08ad6ac415bb7f35eb12a10081565b60405190815260200160405180910390f3fea26469706673582212202074bfd7bd8bcb0717d275fe0fbe8a5832331eb4b3d51ecb017ddb348efcea3264736f6c63430008170033";

type RouterStorageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RouterStorageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RouterStorage__factory extends ContractFactory {
  constructor(...args: RouterStorageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<RouterStorage> {
    return super.deploy(overrides || {}) as Promise<RouterStorage>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): RouterStorage {
    return super.attach(address) as RouterStorage;
  }
  override connect(signer: Signer): RouterStorage__factory {
    return super.connect(signer) as RouterStorage__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RouterStorageInterface {
    return new utils.Interface(_abi) as RouterStorageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RouterStorage {
    return new Contract(address, _abi, signerOrProvider) as RouterStorage;
  }
}
