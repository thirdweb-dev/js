/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IAirdropERC20Claimable,
  IAirdropERC20ClaimableInterface,
} from "../IAirdropERC20Claimable";

const _abi = [
  {
    type: "function",
    name: "claim",
    inputs: [
      {
        name: "receiver",
        type: "address",
        internalType: "address",
      },
      {
        name: "quantity",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "proofs",
        type: "bytes32[]",
        internalType: "bytes32[]",
      },
      {
        name: "proofMaxQuantityForWallet",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "TokensClaimed",
    inputs: [
      {
        name: "claimer",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "receiver",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "quantityClaimed",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
];

export class IAirdropERC20Claimable__factory {
  static readonly abi = _abi;
  static createInterface(): IAirdropERC20ClaimableInterface {
    return new utils.Interface(_abi) as IAirdropERC20ClaimableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IAirdropERC20Claimable {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as IAirdropERC20Claimable;
  }
}
