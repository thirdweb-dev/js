/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { IMultiwrap, IMultiwrapInterface } from "../IMultiwrap";

const _abi = [
  {
    type: "function",
    name: "unwrap",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "recipient",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "wrap",
    inputs: [
      {
        name: "wrappedContents",
        type: "tuple[]",
        internalType: "struct ITokenBundle.Token[]",
        components: [
          {
            name: "assetContract",
            type: "address",
            internalType: "address",
          },
          {
            name: "tokenType",
            type: "uint8",
            internalType: "enum ITokenBundle.TokenType",
          },
          {
            name: "tokenId",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "totalAmount",
            type: "uint256",
            internalType: "uint256",
          },
        ],
      },
      {
        name: "uriForWrappedToken",
        type: "string",
        internalType: "string",
      },
      {
        name: "recipient",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "event",
    name: "TokensUnwrapped",
    inputs: [
      {
        name: "unwrapper",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "recipientOfWrappedContents",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "tokenIdOfWrappedToken",
        type: "uint256",
        indexed: true,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "TokensWrapped",
    inputs: [
      {
        name: "wrapper",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "recipientOfWrappedToken",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "tokenIdOfWrappedToken",
        type: "uint256",
        indexed: true,
        internalType: "uint256",
      },
      {
        name: "wrappedContents",
        type: "tuple[]",
        indexed: false,
        internalType: "struct ITokenBundle.Token[]",
        components: [
          {
            name: "assetContract",
            type: "address",
            internalType: "address",
          },
          {
            name: "tokenType",
            type: "uint8",
            internalType: "enum ITokenBundle.TokenType",
          },
          {
            name: "tokenId",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "totalAmount",
            type: "uint256",
            internalType: "uint256",
          },
        ],
      },
    ],
    anonymous: false,
  },
];

export class IMultiwrap__factory {
  static readonly abi = _abi;
  static createInterface(): IMultiwrapInterface {
    return new utils.Interface(_abi) as IMultiwrapInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IMultiwrap {
    return new Contract(address, _abi, signerOrProvider) as IMultiwrap;
  }
}
