/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { IOffers, IOffersInterface } from "../IOffers";

const _abi = [
  {
    type: "function",
    name: "acceptOffer",
    inputs: [
      {
        name: "_offerId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "cancelOffer",
    inputs: [
      {
        name: "_offerId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "getAllOffers",
    inputs: [
      {
        name: "_startId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_endId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "offers",
        type: "tuple[]",
        internalType: "struct IOffers.Offer[]",
        components: [
          {
            name: "offerId",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "tokenId",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "quantity",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "totalPrice",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "expirationTimestamp",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "offeror",
            type: "address",
            internalType: "address",
          },
          {
            name: "assetContract",
            type: "address",
            internalType: "address",
          },
          {
            name: "currency",
            type: "address",
            internalType: "address",
          },
          {
            name: "tokenType",
            type: "uint8",
            internalType: "enum IOffers.TokenType",
          },
          {
            name: "status",
            type: "uint8",
            internalType: "enum IOffers.Status",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getAllValidOffers",
    inputs: [
      {
        name: "_startId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_endId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "offers",
        type: "tuple[]",
        internalType: "struct IOffers.Offer[]",
        components: [
          {
            name: "offerId",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "tokenId",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "quantity",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "totalPrice",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "expirationTimestamp",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "offeror",
            type: "address",
            internalType: "address",
          },
          {
            name: "assetContract",
            type: "address",
            internalType: "address",
          },
          {
            name: "currency",
            type: "address",
            internalType: "address",
          },
          {
            name: "tokenType",
            type: "uint8",
            internalType: "enum IOffers.TokenType",
          },
          {
            name: "status",
            type: "uint8",
            internalType: "enum IOffers.Status",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getOffer",
    inputs: [
      {
        name: "_offerId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "offer",
        type: "tuple",
        internalType: "struct IOffers.Offer",
        components: [
          {
            name: "offerId",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "tokenId",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "quantity",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "totalPrice",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "expirationTimestamp",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "offeror",
            type: "address",
            internalType: "address",
          },
          {
            name: "assetContract",
            type: "address",
            internalType: "address",
          },
          {
            name: "currency",
            type: "address",
            internalType: "address",
          },
          {
            name: "tokenType",
            type: "uint8",
            internalType: "enum IOffers.TokenType",
          },
          {
            name: "status",
            type: "uint8",
            internalType: "enum IOffers.Status",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "makeOffer",
    inputs: [
      {
        name: "_params",
        type: "tuple",
        internalType: "struct IOffers.OfferParams",
        components: [
          {
            name: "assetContract",
            type: "address",
            internalType: "address",
          },
          {
            name: "tokenId",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "quantity",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "currency",
            type: "address",
            internalType: "address",
          },
          {
            name: "totalPrice",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "expirationTimestamp",
            type: "uint256",
            internalType: "uint256",
          },
        ],
      },
    ],
    outputs: [
      {
        name: "offerId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "AcceptedOffer",
    inputs: [
      {
        name: "offeror",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "offerId",
        type: "uint256",
        indexed: true,
        internalType: "uint256",
      },
      {
        name: "assetContract",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "tokenId",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "seller",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "quantityBought",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "totalPricePaid",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "CancelledOffer",
    inputs: [
      {
        name: "offeror",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "offerId",
        type: "uint256",
        indexed: true,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "NewOffer",
    inputs: [
      {
        name: "offeror",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "offerId",
        type: "uint256",
        indexed: true,
        internalType: "uint256",
      },
      {
        name: "assetContract",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "offer",
        type: "tuple",
        indexed: false,
        internalType: "struct IOffers.Offer",
        components: [
          {
            name: "offerId",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "tokenId",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "quantity",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "totalPrice",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "expirationTimestamp",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "offeror",
            type: "address",
            internalType: "address",
          },
          {
            name: "assetContract",
            type: "address",
            internalType: "address",
          },
          {
            name: "currency",
            type: "address",
            internalType: "address",
          },
          {
            name: "tokenType",
            type: "uint8",
            internalType: "enum IOffers.TokenType",
          },
          {
            name: "status",
            type: "uint8",
            internalType: "enum IOffers.Status",
          },
        ],
      },
    ],
    anonymous: false,
  },
];

export class IOffers__factory {
  static readonly abi = _abi;
  static createInterface(): IOffersInterface {
    return new utils.Interface(_abi) as IOffersInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IOffers {
    return new Contract(address, _abi, signerOrProvider) as IOffers;
  }
}
