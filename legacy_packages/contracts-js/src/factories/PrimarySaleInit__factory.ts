/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  PrimarySaleInit,
  PrimarySaleInitInterface,
} from "../PrimarySaleInit";

const _abi = [
  {
    type: "event",
    name: "PrimarySaleRecipientUpdated",
    inputs: [
      {
        name: "recipient",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220914a04f4ff23b9a054bd4c05987c12041c52bc9ee040aa0fdf78616a8acd76da64736f6c63430008170033";

type PrimarySaleInitConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PrimarySaleInitConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PrimarySaleInit__factory extends ContractFactory {
  constructor(...args: PrimarySaleInitConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<PrimarySaleInit> {
    return super.deploy(overrides || {}) as Promise<PrimarySaleInit>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): PrimarySaleInit {
    return super.attach(address) as PrimarySaleInit;
  }
  override connect(signer: Signer): PrimarySaleInit__factory {
    return super.connect(signer) as PrimarySaleInit__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PrimarySaleInitInterface {
    return new utils.Interface(_abi) as PrimarySaleInitInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PrimarySaleInit {
    return new Contract(address, _abi, signerOrProvider) as PrimarySaleInit;
  }
}
