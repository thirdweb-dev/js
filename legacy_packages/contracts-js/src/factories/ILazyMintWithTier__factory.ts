/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  ILazyMintWithTier,
  ILazyMintWithTierInterface,
} from "../ILazyMintWithTier";

const _abi = [
  {
    type: "function",
    name: "lazyMint",
    inputs: [
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "baseURIForTokens",
        type: "string",
        internalType: "string",
      },
      {
        name: "tier",
        type: "string",
        internalType: "string",
      },
      {
        name: "extraData",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "batchId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "TokensLazyMinted",
    inputs: [
      {
        name: "tier",
        type: "string",
        indexed: true,
        internalType: "string",
      },
      {
        name: "startTokenId",
        type: "uint256",
        indexed: true,
        internalType: "uint256",
      },
      {
        name: "endTokenId",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "baseURI",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "encryptedBaseURI",
        type: "bytes",
        indexed: false,
        internalType: "bytes",
      },
    ],
    anonymous: false,
  },
];

export class ILazyMintWithTier__factory {
  static readonly abi = _abi;
  static createInterface(): ILazyMintWithTierInterface {
    return new utils.Interface(_abi) as ILazyMintWithTierInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ILazyMintWithTier {
    return new Contract(address, _abi, signerOrProvider) as ILazyMintWithTier;
  }
}
