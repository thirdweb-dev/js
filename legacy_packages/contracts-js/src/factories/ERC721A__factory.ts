/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ERC721A, ERC721AInterface } from "../ERC721A";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "name_",
        type: "string",
        internalType: "string",
      },
      {
        name: "symbol_",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "approve",
    inputs: [
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "balanceOf",
    inputs: [
      {
        name: "owner",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getApproved",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "isApprovedForAll",
    inputs: [
      {
        name: "owner",
        type: "address",
        internalType: "address",
      },
      {
        name: "operator",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "name",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "ownerOf",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "safeTransferFrom",
    inputs: [
      {
        name: "from",
        type: "address",
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "safeTransferFrom",
    inputs: [
      {
        name: "from",
        type: "address",
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_data",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setApprovalForAll",
    inputs: [
      {
        name: "operator",
        type: "address",
        internalType: "address",
      },
      {
        name: "approved",
        type: "bool",
        internalType: "bool",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "supportsInterface",
    inputs: [
      {
        name: "interfaceId",
        type: "bytes4",
        internalType: "bytes4",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "symbol",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "tokenURI",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "totalSupply",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "transferFrom",
    inputs: [
      {
        name: "from",
        type: "address",
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "Approval",
    inputs: [
      {
        name: "owner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "approved",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "tokenId",
        type: "uint256",
        indexed: true,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "ApprovalForAll",
    inputs: [
      {
        name: "owner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "operator",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "approved",
        type: "bool",
        indexed: false,
        internalType: "bool",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Transfer",
    inputs: [
      {
        name: "from",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "tokenId",
        type: "uint256",
        indexed: true,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "ApprovalCallerNotOwnerNorApproved",
    inputs: [],
  },
  {
    type: "error",
    name: "ApprovalQueryForNonexistentToken",
    inputs: [],
  },
  {
    type: "error",
    name: "ApprovalToCurrentOwner",
    inputs: [],
  },
  {
    type: "error",
    name: "ApproveToCaller",
    inputs: [],
  },
  {
    type: "error",
    name: "BalanceQueryForZeroAddress",
    inputs: [],
  },
  {
    type: "error",
    name: "MintToZeroAddress",
    inputs: [],
  },
  {
    type: "error",
    name: "MintZeroQuantity",
    inputs: [],
  },
  {
    type: "error",
    name: "OwnerQueryForNonexistentToken",
    inputs: [],
  },
  {
    type: "error",
    name: "TransferCallerNotOwnerNorApproved",
    inputs: [],
  },
  {
    type: "error",
    name: "TransferFromIncorrectOwner",
    inputs: [],
  },
  {
    type: "error",
    name: "TransferToNonERC721ReceiverImplementer",
    inputs: [],
  },
  {
    type: "error",
    name: "TransferToZeroAddress",
    inputs: [],
  },
  {
    type: "error",
    name: "URIQueryForNonexistentToken",
    inputs: [],
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200129b3803806200129b833981016040819052620000349162000126565b600262000042838262000221565b50600362000051828262000221565b50506000805550620002ed565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200008657600080fd5b81516001600160401b0380821115620000a357620000a36200005e565b604051601f8301601f19908116603f01168101908282118183101715620000ce57620000ce6200005e565b8160405283815260209250866020858801011115620000ec57600080fd5b600091505b83821015620001105785820183015181830184015290820190620000f1565b6000602085830101528094505050505092915050565b600080604083850312156200013a57600080fd5b82516001600160401b03808211156200015257600080fd5b620001608683870162000074565b935060208501519150808211156200017757600080fd5b50620001868582860162000074565b9150509250929050565b600181811c90821680620001a557607f821691505b602082108103620001c657634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200021c576000816000526020600020601f850160051c81016020861015620001f75750805b601f850160051c820191505b81811015620002185782815560010162000203565b5050505b505050565b81516001600160401b038111156200023d576200023d6200005e565b62000255816200024e845462000190565b84620001cc565b602080601f8311600181146200028d5760008415620002745750858301515b600019600386901b1c1916600185901b17855562000218565b600085815260208120601f198616915b82811015620002be578886015182559484019460019091019084016200029d565b5085821015620002dd5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b610f9e80620002fd6000396000f3fe608060405234801561001057600080fd5b50600436106100ba5760003560e01c806301ffc9a7146100bf57806306fdde03146100e7578063081812fc146100fc578063095ea7b31461012757806318160ddd1461013c57806323b872dd1461015257806342842e0e146101655780636352211e1461017857806370a082311461018b57806395d89b411461019e578063a22cb465146101a6578063b88d4fde146101b9578063c87b56dd146101cc578063e985e9c5146101df575b600080fd5b6100d26100cd366004610b66565b6101f2565b60405190151581526020015b60405180910390f35b6100ef610244565b6040516100de9190610bd3565b61010f61010a366004610be6565b6102d6565b6040516001600160a01b0390911681526020016100de565b61013a610135366004610c1b565b61031a565b005b600154600054035b6040519081526020016100de565b61013a610160366004610c45565b6103a0565b61013a610173366004610c45565b6103ab565b61010f610186366004610be6565b6103c6565b610144610199366004610c81565b6103d8565b6100ef610426565b61013a6101b4366004610c9c565b610435565b61013a6101c7366004610cee565b6104ca565b6100ef6101da366004610be6565b610514565b6100d26101ed366004610dc9565b6105a5565b60006001600160e01b031982166380ac58cd60e01b148061022357506001600160e01b03198216635b5e139f60e01b145b8061023e57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606002805461025390610dfc565b80601f016020809104026020016040519081016040528092919081815260200182805461027f90610dfc565b80156102cc5780601f106102a1576101008083540402835291602001916102cc565b820191906000526020600020905b8154815290600101906020018083116102af57829003601f168201915b5050505050905090565b60006102e1826105d3565b6102fe576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b6000610325826103c6565b9050806001600160a01b0316836001600160a01b0316036103595760405163250fdee360e21b815260040160405180910390fd5b336001600160a01b038216146103905761037381336105a5565b610390576040516367d9dca160e11b815260040160405180910390fd5b61039b8383836105fe565b505050565b61039b83838361065a565b61039b838383604051806020016040528060008152506104ca565b60006103d182610847565b5192915050565b60006001600160a01b038216610401576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b03166000908152600560205260409020546001600160401b031690565b60606003805461025390610dfc565b336001600160a01b0383160361045e5760405163b06307db60e01b815260040160405180910390fd5b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6104d584848461065a565b6001600160a01b0383163b1561050e576104f184848484610961565b61050e576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b606061051f826105d3565b61053c57604051630a14c4b560e41b815260040160405180910390fd5b600061055360408051602081019091526000815290565b90508051600003610573576040518060200160405280600081525061059e565b8061057d84610a4d565b60405160200161058e929190610e36565b6040516020818303038152906040525b9392505050565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b600080548210801561023e575050600090815260046020526040902054600160e01b900460ff161590565b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b600061066582610847565b9050836001600160a01b031681600001516001600160a01b03161461069c5760405162a1148160e81b815260040160405180910390fd5b6000336001600160a01b03861614806106ba57506106ba85336105a5565b806106d55750336106ca846102d6565b6001600160a01b0316145b9050806106f557604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b03841661071c57604051633a954ecd60e21b815260040160405180910390fd5b610728600084876105fe565b6001600160a01b038581166000908152600560209081526040808320805467ffffffffffffffff198082166001600160401b0392831660001901831617909255898616808652838620805493841693831660019081018416949094179055898652600490945282852080546001600160e01b031916909417600160a01b429092169190910217835587018084529220805491939091166107fc5760005482146107fc57805460208601516001600160401b0316600160a01b026001600160e01b03199091166001600160a01b038a16171781555b50505082846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050505050565b60408051606081018252600080825260208201819052918101919091528160005481101561094857600081815260046020908152604091829020825160608101845290546001600160a01b0381168252600160a01b81046001600160401b031692820192909252600160e01b90910460ff161515918101829052906109465780516001600160a01b0316156108dd579392505050565b5060001901600081815260046020908152604091829020825160608101845290546001600160a01b038116808352600160a01b82046001600160401b031693830193909352600160e01b900460ff1615159281019290925215610941579392505050565b6108dd565b505b604051636f96cda160e11b815260040160405180910390fd5b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a0290610996903390899088908890600401610e65565b6020604051808303816000875af19250505080156109d1575060408051601f3d908101601f191682019092526109ce91810190610ea2565b60015b610a2f573d8080156109ff576040519150601f19603f3d011682016040523d82523d6000602084013e610a04565b606091505b508051600003610a27576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490505b949350505050565b606081600003610a745750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610a9e5780610a8881610ed5565b9150610a979050600a83610f04565b9150610a78565b6000816001600160401b03811115610ab857610ab8610cd8565b6040519080825280601f01601f191660200182016040528015610ae2576020820181803683370190505b5090505b8415610a4557610af7600183610f18565b9150610b04600a86610f2b565b610b0f906030610f3f565b60f81b818381518110610b2457610b24610f52565b60200101906001600160f81b031916908160001a905350610b46600a86610f04565b9450610ae6565b6001600160e01b031981168114610b6357600080fd5b50565b600060208284031215610b7857600080fd5b813561059e81610b4d565b60005b83811015610b9e578181015183820152602001610b86565b50506000910152565b60008151808452610bbf816020860160208601610b83565b601f01601f19169290920160200192915050565b60208152600061059e6020830184610ba7565b600060208284031215610bf857600080fd5b5035919050565b80356001600160a01b0381168114610c1657600080fd5b919050565b60008060408385031215610c2e57600080fd5b610c3783610bff565b946020939093013593505050565b600080600060608486031215610c5a57600080fd5b610c6384610bff565b9250610c7160208501610bff565b9150604084013590509250925092565b600060208284031215610c9357600080fd5b61059e82610bff565b60008060408385031215610caf57600080fd5b610cb883610bff565b915060208301358015158114610ccd57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215610d0457600080fd5b610d0d85610bff565b9350610d1b60208601610bff565b92506040850135915060608501356001600160401b0380821115610d3e57600080fd5b818701915087601f830112610d5257600080fd5b813581811115610d6457610d64610cd8565b604051601f8201601f19908116603f01168101908382118183101715610d8c57610d8c610cd8565b816040528281528a6020848701011115610da557600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215610ddc57600080fd5b610de583610bff565b9150610df360208401610bff565b90509250929050565b600181811c90821680610e1057607f821691505b602082108103610e3057634e487b7160e01b600052602260045260246000fd5b50919050565b60008351610e48818460208801610b83565b835190830190610e5c818360208801610b83565b01949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090610e9890830184610ba7565b9695505050505050565b600060208284031215610eb457600080fd5b815161059e81610b4d565b634e487b7160e01b600052601160045260246000fd5b600060018201610ee757610ee7610ebf565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082610f1357610f13610eee565b500490565b8181038181111561023e5761023e610ebf565b600082610f3a57610f3a610eee565b500690565b8082018082111561023e5761023e610ebf565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220b0a68366973ea4d25c5bf44101b7fdb9eeedb375334baf3756e3de637efe55ed64736f6c63430008170033";

type ERC721AConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC721AConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC721A__factory extends ContractFactory {
  constructor(...args: ERC721AConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    name_: string,
    symbol_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC721A> {
    return super.deploy(name_, symbol_, overrides || {}) as Promise<ERC721A>;
  }
  override getDeployTransaction(
    name_: string,
    symbol_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(name_, symbol_, overrides || {});
  }
  override attach(address: string): ERC721A {
    return super.attach(address) as ERC721A;
  }
  override connect(signer: Signer): ERC721A__factory {
    return super.connect(signer) as ERC721A__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC721AInterface {
    return new utils.Interface(_abi) as ERC721AInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC721A {
    return new Contract(address, _abi, signerOrProvider) as ERC721A;
  }
}
