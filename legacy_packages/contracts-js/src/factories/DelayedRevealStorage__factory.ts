/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  DelayedRevealStorage,
  DelayedRevealStorageInterface,
} from "../DelayedRevealStorage";

const _abi = [
  {
    type: "function",
    name: "DELAYED_REVEAL_STORAGE_POSITION",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "view",
  },
];

const _bytecode =
  "0x60a6610038600b82828239805160001a607314602b57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c80631c46bf9c146038575b600080fd5b605e7f29cbb6a3768b42f407b01945994a37861bf5a2179c5dea5be7e378415e75510081565b60405190815260200160405180910390f3fea2646970667358221220114a63a80cbccfd7cfa15774898732b03d3ba31e08704adfa398fab9babb5c0664736f6c63430008170033";

type DelayedRevealStorageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DelayedRevealStorageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DelayedRevealStorage__factory extends ContractFactory {
  constructor(...args: DelayedRevealStorageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<DelayedRevealStorage> {
    return super.deploy(overrides || {}) as Promise<DelayedRevealStorage>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DelayedRevealStorage {
    return super.attach(address) as DelayedRevealStorage;
  }
  override connect(signer: Signer): DelayedRevealStorage__factory {
    return super.connect(signer) as DelayedRevealStorage__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DelayedRevealStorageInterface {
    return new utils.Interface(_abi) as DelayedRevealStorageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DelayedRevealStorage {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as DelayedRevealStorage;
  }
}
