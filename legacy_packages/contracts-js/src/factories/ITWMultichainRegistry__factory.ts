/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  ITWMultichainRegistry,
  ITWMultichainRegistryInterface,
} from "../ITWMultichainRegistry";

const _abi = [
  {
    type: "function",
    name: "add",
    inputs: [
      {
        name: "_deployer",
        type: "address",
        internalType: "address",
      },
      {
        name: "_deployment",
        type: "address",
        internalType: "address",
      },
      {
        name: "_chainId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "metadataUri",
        type: "string",
        internalType: "string",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "count",
    inputs: [
      {
        name: "_deployer",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "deploymentCount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getAll",
    inputs: [
      {
        name: "_deployer",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "allDeployments",
        type: "tuple[]",
        internalType: "struct ITWMultichainRegistry.Deployment[]",
        components: [
          {
            name: "deploymentAddress",
            type: "address",
            internalType: "address",
          },
          {
            name: "chainId",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "metadataURI",
            type: "string",
            internalType: "string",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getMetadataUri",
    inputs: [
      {
        name: "_chainId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_deployment",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "metadataUri",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "remove",
    inputs: [
      {
        name: "_deployer",
        type: "address",
        internalType: "address",
      },
      {
        name: "_deployment",
        type: "address",
        internalType: "address",
      },
      {
        name: "_chainId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "Added",
    inputs: [
      {
        name: "deployer",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "deployment",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "chainId",
        type: "uint256",
        indexed: true,
        internalType: "uint256",
      },
      {
        name: "metadataUri",
        type: "string",
        indexed: false,
        internalType: "string",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Deleted",
    inputs: [
      {
        name: "deployer",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "deployment",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "chainId",
        type: "uint256",
        indexed: true,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
];

export class ITWMultichainRegistry__factory {
  static readonly abi = _abi;
  static createInterface(): ITWMultichainRegistryInterface {
    return new utils.Interface(_abi) as ITWMultichainRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ITWMultichainRegistry {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ITWMultichainRegistry;
  }
}
