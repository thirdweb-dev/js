/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  LazyMintWithTier_V1,
  LazyMintWithTier_V1Interface,
} from "../LazyMintWithTier_V1";

const _abi = [
  {
    type: "function",
    name: "getBaseURICount",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getBatchIdAtIndex",
    inputs: [
      {
        name: "_index",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getMetadataForAllTiers",
    inputs: [],
    outputs: [
      {
        name: "metadataForAllTiers",
        type: "tuple[]",
        internalType: "struct LazyMintWithTier_V1.TierMetadata[]",
        components: [
          {
            name: "tier",
            type: "string",
            internalType: "string",
          },
          {
            name: "ranges",
            type: "tuple[]",
            internalType: "struct LazyMintWithTier_V1.TokenRange[]",
            components: [
              {
                name: "startIdInclusive",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "endIdNonInclusive",
                type: "uint256",
                internalType: "uint256",
              },
            ],
          },
          {
            name: "baseURIs",
            type: "string[]",
            internalType: "string[]",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "lazyMint",
    inputs: [
      {
        name: "_amount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_baseURIForTokens",
        type: "string",
        internalType: "string",
      },
      {
        name: "_tier",
        type: "string",
        internalType: "string",
      },
      {
        name: "_data",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "batchId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "TokensLazyMinted",
    inputs: [
      {
        name: "tier",
        type: "string",
        indexed: true,
        internalType: "string",
      },
      {
        name: "startTokenId",
        type: "uint256",
        indexed: true,
        internalType: "uint256",
      },
      {
        name: "endTokenId",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "baseURI",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "encryptedBaseURI",
        type: "bytes",
        indexed: false,
        internalType: "bytes",
      },
    ],
    anonymous: false,
  },
];

export class LazyMintWithTier_V1__factory {
  static readonly abi = _abi;
  static createInterface(): LazyMintWithTier_V1Interface {
    return new utils.Interface(_abi) as LazyMintWithTier_V1Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LazyMintWithTier_V1 {
    return new Contract(address, _abi, signerOrProvider) as LazyMintWithTier_V1;
  }
}
