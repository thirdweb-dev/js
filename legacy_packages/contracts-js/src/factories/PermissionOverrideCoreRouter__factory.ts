/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  PermissionOverrideCoreRouter,
  PermissionOverrideCoreRouterInterface,
} from "../PermissionOverrideCoreRouter";

const _abi = [
  {
    type: "function",
    name: "canSetContractURI",
    inputs: [
      {
        name: "_caller",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "canSetExtension",
    inputs: [
      {
        name: "_caller",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "canSetOwner",
    inputs: [
      {
        name: "_caller",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610101806100206000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80635a39042b1460415780636fe5a6fa1460415780637c1d9b1d146041575b600080fd5b6089604c366004609d565b6001600160a01b031660009081527f15e2acbe0ae50b645cb1c4f3ba34bd0377967eb1d6a695c66d22a86a41e66a32602052604090205460ff1690565b604051901515815260200160405180910390f35b60006020828403121560ae57600080fd5b81356001600160a01b038116811460c457600080fd5b939250505056fea2646970667358221220b8352b41137f62435f1192e70141eec429904c6e4d8465119ca005e27ea8724264736f6c63430008170033";

type PermissionOverrideCoreRouterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PermissionOverrideCoreRouterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PermissionOverrideCoreRouter__factory extends ContractFactory {
  constructor(...args: PermissionOverrideCoreRouterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<PermissionOverrideCoreRouter> {
    return super.deploy(
      overrides || {}
    ) as Promise<PermissionOverrideCoreRouter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): PermissionOverrideCoreRouter {
    return super.attach(address) as PermissionOverrideCoreRouter;
  }
  override connect(signer: Signer): PermissionOverrideCoreRouter__factory {
    return super.connect(signer) as PermissionOverrideCoreRouter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PermissionOverrideCoreRouterInterface {
    return new utils.Interface(_abi) as PermissionOverrideCoreRouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PermissionOverrideCoreRouter {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as PermissionOverrideCoreRouter;
  }
}
