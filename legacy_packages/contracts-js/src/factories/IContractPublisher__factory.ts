/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IContractPublisher,
  IContractPublisherInterface,
} from "../IContractPublisher";

const _abi = [
  {
    type: "function",
    name: "getAllPublishedContracts",
    inputs: [
      {
        name: "publisher",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "published",
        type: "tuple[]",
        internalType: "struct IContractPublisher.CustomContractInstance[]",
        components: [
          {
            name: "contractId",
            type: "string",
            internalType: "string",
          },
          {
            name: "publishTimestamp",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "publishMetadataUri",
            type: "string",
            internalType: "string",
          },
          {
            name: "bytecodeHash",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "implementation",
            type: "address",
            internalType: "address",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getPublishedContract",
    inputs: [
      {
        name: "publisher",
        type: "address",
        internalType: "address",
      },
      {
        name: "contractId",
        type: "string",
        internalType: "string",
      },
    ],
    outputs: [
      {
        name: "published",
        type: "tuple",
        internalType: "struct IContractPublisher.CustomContractInstance",
        components: [
          {
            name: "contractId",
            type: "string",
            internalType: "string",
          },
          {
            name: "publishTimestamp",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "publishMetadataUri",
            type: "string",
            internalType: "string",
          },
          {
            name: "bytecodeHash",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "implementation",
            type: "address",
            internalType: "address",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getPublishedContractVersions",
    inputs: [
      {
        name: "publisher",
        type: "address",
        internalType: "address",
      },
      {
        name: "contractId",
        type: "string",
        internalType: "string",
      },
    ],
    outputs: [
      {
        name: "published",
        type: "tuple[]",
        internalType: "struct IContractPublisher.CustomContractInstance[]",
        components: [
          {
            name: "contractId",
            type: "string",
            internalType: "string",
          },
          {
            name: "publishTimestamp",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "publishMetadataUri",
            type: "string",
            internalType: "string",
          },
          {
            name: "bytecodeHash",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "implementation",
            type: "address",
            internalType: "address",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getPublishedUriFromCompilerUri",
    inputs: [
      {
        name: "compilerMetadataUri",
        type: "string",
        internalType: "string",
      },
    ],
    outputs: [
      {
        name: "publishedMetadataUris",
        type: "string[]",
        internalType: "string[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getPublisherProfileUri",
    inputs: [
      {
        name: "publisher",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "uri",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "publishContract",
    inputs: [
      {
        name: "publisher",
        type: "address",
        internalType: "address",
      },
      {
        name: "contractId",
        type: "string",
        internalType: "string",
      },
      {
        name: "publishMetadataUri",
        type: "string",
        internalType: "string",
      },
      {
        name: "compilerMetadataUri",
        type: "string",
        internalType: "string",
      },
      {
        name: "bytecodeHash",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "implementation",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setPublisherProfileUri",
    inputs: [
      {
        name: "publisher",
        type: "address",
        internalType: "address",
      },
      {
        name: "uri",
        type: "string",
        internalType: "string",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "unpublishContract",
    inputs: [
      {
        name: "publisher",
        type: "address",
        internalType: "address",
      },
      {
        name: "contractId",
        type: "string",
        internalType: "string",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "ContractPublished",
    inputs: [
      {
        name: "operator",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "publisher",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "publishedContract",
        type: "tuple",
        indexed: false,
        internalType: "struct IContractPublisher.CustomContractInstance",
        components: [
          {
            name: "contractId",
            type: "string",
            internalType: "string",
          },
          {
            name: "publishTimestamp",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "publishMetadataUri",
            type: "string",
            internalType: "string",
          },
          {
            name: "bytecodeHash",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "implementation",
            type: "address",
            internalType: "address",
          },
        ],
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "ContractUnpublished",
    inputs: [
      {
        name: "operator",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "publisher",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "contractId",
        type: "string",
        indexed: true,
        internalType: "string",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Paused",
    inputs: [
      {
        name: "isPaused",
        type: "bool",
        indexed: false,
        internalType: "bool",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "PublisherProfileUpdated",
    inputs: [
      {
        name: "publisher",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "prevURI",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "newURI",
        type: "string",
        indexed: false,
        internalType: "string",
      },
    ],
    anonymous: false,
  },
];

export class IContractPublisher__factory {
  static readonly abi = _abi;
  static createInterface(): IContractPublisherInterface {
    return new utils.Interface(_abi) as IContractPublisherInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IContractPublisher {
    return new Contract(address, _abi, signerOrProvider) as IContractPublisher;
  }
}
