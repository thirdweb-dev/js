/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { IRulesEngine, IRulesEngineInterface } from "../IRulesEngine";

const _abi = [
  {
    type: "function",
    name: "createRuleMultiplicative",
    inputs: [
      {
        name: "rule",
        type: "tuple",
        internalType: "struct IRulesEngine.RuleTypeMultiplicative",
        components: [
          {
            name: "token",
            type: "address",
            internalType: "address",
          },
          {
            name: "tokenType",
            type: "uint8",
            internalType: "enum IRulesEngine.TokenType",
          },
          {
            name: "tokenId",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "scorePerOwnedToken",
            type: "uint256",
            internalType: "uint256",
          },
        ],
      },
    ],
    outputs: [
      {
        name: "ruleId",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "createRuleThreshold",
    inputs: [
      {
        name: "rule",
        type: "tuple",
        internalType: "struct IRulesEngine.RuleTypeThreshold",
        components: [
          {
            name: "token",
            type: "address",
            internalType: "address",
          },
          {
            name: "tokenType",
            type: "uint8",
            internalType: "enum IRulesEngine.TokenType",
          },
          {
            name: "tokenId",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "balance",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "score",
            type: "uint256",
            internalType: "uint256",
          },
        ],
      },
    ],
    outputs: [
      {
        name: "ruleId",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "deleteRule",
    inputs: [
      {
        name: "ruleId",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "getAllRules",
    inputs: [],
    outputs: [
      {
        name: "rules",
        type: "tuple[]",
        internalType: "struct IRulesEngine.RuleWithId[]",
        components: [
          {
            name: "ruleId",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "token",
            type: "address",
            internalType: "address",
          },
          {
            name: "tokenType",
            type: "uint8",
            internalType: "enum IRulesEngine.TokenType",
          },
          {
            name: "tokenId",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "balance",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "score",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "ruleType",
            type: "uint8",
            internalType: "enum IRulesEngine.RuleType",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getRulesEngineOverride",
    inputs: [],
    outputs: [
      {
        name: "rulesEngineAddress",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getScore",
    inputs: [
      {
        name: "_tokenOwner",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "score",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "setRulesEngineOverride",
    inputs: [
      {
        name: "_rulesEngineAddress",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "RuleCreated",
    inputs: [
      {
        name: "ruleId",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "rule",
        type: "tuple",
        indexed: false,
        internalType: "struct IRulesEngine.RuleWithId",
        components: [
          {
            name: "ruleId",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "token",
            type: "address",
            internalType: "address",
          },
          {
            name: "tokenType",
            type: "uint8",
            internalType: "enum IRulesEngine.TokenType",
          },
          {
            name: "tokenId",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "balance",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "score",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "ruleType",
            type: "uint8",
            internalType: "enum IRulesEngine.RuleType",
          },
        ],
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "RuleDeleted",
    inputs: [
      {
        name: "ruleId",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "RulesEngineOverriden",
    inputs: [
      {
        name: "newRulesEngine",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
];

export class IRulesEngine__factory {
  static readonly abi = _abi;
  static createInterface(): IRulesEngineInterface {
    return new utils.Interface(_abi) as IRulesEngineInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IRulesEngine {
    return new Contract(address, _abi, signerOrProvider) as IRulesEngine;
  }
}
