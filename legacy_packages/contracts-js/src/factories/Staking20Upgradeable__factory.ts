/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  Staking20Upgradeable,
  Staking20UpgradeableInterface,
} from "../Staking20Upgradeable";

const _abi = [
  {
    type: "function",
    name: "claimRewards",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "getRewardRatio",
    inputs: [],
    outputs: [
      {
        name: "_numerator",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_denominator",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getRewardTokenBalance",
    inputs: [],
    outputs: [
      {
        name: "_rewardsAvailableInContract",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getStakeInfo",
    inputs: [
      {
        name: "_staker",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "_tokensStaked",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_rewards",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getTimeUnit",
    inputs: [],
    outputs: [
      {
        name: "_timeUnit",
        type: "uint80",
        internalType: "uint80",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "rewardTokenDecimals",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint16",
        internalType: "uint16",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "setRewardRatio",
    inputs: [
      {
        name: "_numerator",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_denominator",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setTimeUnit",
    inputs: [
      {
        name: "_timeUnit",
        type: "uint80",
        internalType: "uint80",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "stake",
    inputs: [
      {
        name: "_amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "stakers",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "timeOfLastUpdate",
        type: "uint128",
        internalType: "uint128",
      },
      {
        name: "conditionIdOflastUpdate",
        type: "uint64",
        internalType: "uint64",
      },
      {
        name: "amountStaked",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "unclaimedRewards",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "stakersArray",
    inputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "stakingToken",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "stakingTokenBalance",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "stakingTokenDecimals",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint16",
        internalType: "uint16",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "withdraw",
    inputs: [
      {
        name: "_amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "Initialized",
    inputs: [
      {
        name: "version",
        type: "uint8",
        indexed: false,
        internalType: "uint8",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "RewardsClaimed",
    inputs: [
      {
        name: "staker",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "rewardAmount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "TokensStaked",
    inputs: [
      {
        name: "staker",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "TokensWithdrawn",
    inputs: [
      {
        name: "staker",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "UpdatedMinStakeAmount",
    inputs: [
      {
        name: "oldAmount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "newAmount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "UpdatedRewardRatio",
    inputs: [
      {
        name: "oldNumerator",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "newNumerator",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "oldDenominator",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "newDenominator",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "UpdatedTimeUnit",
    inputs: [
      {
        name: "oldTimeUnit",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "newTimeUnit",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "CurrencyTransferLibMismatchedValue",
    inputs: [
      {
        name: "expected",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "actual",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
];

export class Staking20Upgradeable__factory {
  static readonly abi = _abi;
  static createInterface(): Staking20UpgradeableInterface {
    return new utils.Interface(_abi) as Staking20UpgradeableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Staking20Upgradeable {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as Staking20Upgradeable;
  }
}
