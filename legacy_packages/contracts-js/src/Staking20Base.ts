/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface Staking20BaseInterface extends utils.Interface {
  functions: {
    "claimRewards()": FunctionFragment;
    "contractURI()": FunctionFragment;
    "depositRewardTokens(uint256)": FunctionFragment;
    "getRewardRatio()": FunctionFragment;
    "getRewardTokenBalance()": FunctionFragment;
    "getStakeInfo(address)": FunctionFragment;
    "getTimeUnit()": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "owner()": FunctionFragment;
    "rewardToken()": FunctionFragment;
    "rewardTokenDecimals()": FunctionFragment;
    "setContractURI(string)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "setRewardRatio(uint256,uint256)": FunctionFragment;
    "setTimeUnit(uint80)": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "stakers(address)": FunctionFragment;
    "stakersArray(uint256)": FunctionFragment;
    "stakingToken()": FunctionFragment;
    "stakingTokenBalance()": FunctionFragment;
    "stakingTokenDecimals()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawRewardTokens(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claimRewards"
      | "contractURI"
      | "depositRewardTokens"
      | "getRewardRatio"
      | "getRewardTokenBalance"
      | "getStakeInfo"
      | "getTimeUnit"
      | "multicall"
      | "owner"
      | "rewardToken"
      | "rewardTokenDecimals"
      | "setContractURI"
      | "setOwner"
      | "setRewardRatio"
      | "setTimeUnit"
      | "stake"
      | "stakers"
      | "stakersArray"
      | "stakingToken"
      | "stakingTokenBalance"
      | "stakingTokenDecimals"
      | "withdraw"
      | "withdrawRewardTokens"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositRewardTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardTokenBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimeUnit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokenDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setContractURI",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setRewardRatio",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTimeUnit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "stakers", values: [string]): string;
  encodeFunctionData(
    functionFragment: "stakersArray",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingTokenBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingTokenDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRewardTokens",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositRewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimeUnit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokenDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRewardRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTimeUnit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakersArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingTokenDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRewardTokens",
    data: BytesLike
  ): Result;

  events: {
    "ContractURIUpdated(string,string)": EventFragment;
    "OwnerUpdated(address,address)": EventFragment;
    "RewardsClaimed(address,uint256)": EventFragment;
    "TokensStaked(address,uint256)": EventFragment;
    "TokensWithdrawn(address,uint256)": EventFragment;
    "UpdatedMinStakeAmount(uint256,uint256)": EventFragment;
    "UpdatedRewardRatio(uint256,uint256,uint256,uint256)": EventFragment;
    "UpdatedTimeUnit(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContractURIUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensStaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedMinStakeAmount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedRewardRatio"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedTimeUnit"): EventFragment;
}

export interface ContractURIUpdatedEventObject {
  prevURI: string;
  newURI: string;
}
export type ContractURIUpdatedEvent = TypedEvent<
  [string, string],
  ContractURIUpdatedEventObject
>;

export type ContractURIUpdatedEventFilter =
  TypedEventFilter<ContractURIUpdatedEvent>;

export interface OwnerUpdatedEventObject {
  prevOwner: string;
  newOwner: string;
}
export type OwnerUpdatedEvent = TypedEvent<
  [string, string],
  OwnerUpdatedEventObject
>;

export type OwnerUpdatedEventFilter = TypedEventFilter<OwnerUpdatedEvent>;

export interface RewardsClaimedEventObject {
  staker: string;
  rewardAmount: BigNumber;
}
export type RewardsClaimedEvent = TypedEvent<
  [string, BigNumber],
  RewardsClaimedEventObject
>;

export type RewardsClaimedEventFilter = TypedEventFilter<RewardsClaimedEvent>;

export interface TokensStakedEventObject {
  staker: string;
  amount: BigNumber;
}
export type TokensStakedEvent = TypedEvent<
  [string, BigNumber],
  TokensStakedEventObject
>;

export type TokensStakedEventFilter = TypedEventFilter<TokensStakedEvent>;

export interface TokensWithdrawnEventObject {
  staker: string;
  amount: BigNumber;
}
export type TokensWithdrawnEvent = TypedEvent<
  [string, BigNumber],
  TokensWithdrawnEventObject
>;

export type TokensWithdrawnEventFilter = TypedEventFilter<TokensWithdrawnEvent>;

export interface UpdatedMinStakeAmountEventObject {
  oldAmount: BigNumber;
  newAmount: BigNumber;
}
export type UpdatedMinStakeAmountEvent = TypedEvent<
  [BigNumber, BigNumber],
  UpdatedMinStakeAmountEventObject
>;

export type UpdatedMinStakeAmountEventFilter =
  TypedEventFilter<UpdatedMinStakeAmountEvent>;

export interface UpdatedRewardRatioEventObject {
  oldNumerator: BigNumber;
  newNumerator: BigNumber;
  oldDenominator: BigNumber;
  newDenominator: BigNumber;
}
export type UpdatedRewardRatioEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  UpdatedRewardRatioEventObject
>;

export type UpdatedRewardRatioEventFilter =
  TypedEventFilter<UpdatedRewardRatioEvent>;

export interface UpdatedTimeUnitEventObject {
  oldTimeUnit: BigNumber;
  newTimeUnit: BigNumber;
}
export type UpdatedTimeUnitEvent = TypedEvent<
  [BigNumber, BigNumber],
  UpdatedTimeUnitEventObject
>;

export type UpdatedTimeUnitEventFilter = TypedEventFilter<UpdatedTimeUnitEvent>;

export interface Staking20Base extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Staking20BaseInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    contractURI(overrides?: CallOverrides): Promise<[string]>;

    depositRewardTokens(
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRewardRatio(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _numerator: BigNumber;
        _denominator: BigNumber;
      }
    >;

    getRewardTokenBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getStakeInfo(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _tokensStaked: BigNumber; _rewards: BigNumber }
    >;

    getTimeUnit(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _timeUnit: BigNumber }>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    rewardTokenDecimals(overrides?: CallOverrides): Promise<[number]>;

    setContractURI(
      _uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardRatio(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTimeUnit(
      _timeUnit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        timeOfLastUpdate: BigNumber;
        conditionIdOflastUpdate: BigNumber;
        amountStaked: BigNumber;
        unclaimedRewards: BigNumber;
      }
    >;

    stakersArray(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    stakingToken(overrides?: CallOverrides): Promise<[string]>;

    stakingTokenBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    stakingTokenDecimals(overrides?: CallOverrides): Promise<[number]>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawRewardTokens(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  claimRewards(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  contractURI(overrides?: CallOverrides): Promise<string>;

  depositRewardTokens(
    _amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRewardRatio(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { _numerator: BigNumber; _denominator: BigNumber }
  >;

  getRewardTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getStakeInfo(
    _staker: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { _tokensStaked: BigNumber; _rewards: BigNumber }
  >;

  getTimeUnit(overrides?: CallOverrides): Promise<BigNumber>;

  multicall(
    data: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  rewardTokenDecimals(overrides?: CallOverrides): Promise<number>;

  setContractURI(
    _uri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardRatio(
    _numerator: BigNumberish,
    _denominator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTimeUnit(
    _timeUnit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    _amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakers(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      timeOfLastUpdate: BigNumber;
      conditionIdOflastUpdate: BigNumber;
      amountStaked: BigNumber;
      unclaimedRewards: BigNumber;
    }
  >;

  stakersArray(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  stakingToken(overrides?: CallOverrides): Promise<string>;

  stakingTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

  stakingTokenDecimals(overrides?: CallOverrides): Promise<number>;

  withdraw(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawRewardTokens(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimRewards(overrides?: CallOverrides): Promise<void>;

    contractURI(overrides?: CallOverrides): Promise<string>;

    depositRewardTokens(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getRewardRatio(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _numerator: BigNumber;
        _denominator: BigNumber;
      }
    >;

    getRewardTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getStakeInfo(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _tokensStaked: BigNumber; _rewards: BigNumber }
    >;

    getTimeUnit(overrides?: CallOverrides): Promise<BigNumber>;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    rewardTokenDecimals(overrides?: CallOverrides): Promise<number>;

    setContractURI(_uri: string, overrides?: CallOverrides): Promise<void>;

    setOwner(_newOwner: string, overrides?: CallOverrides): Promise<void>;

    setRewardRatio(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTimeUnit(
      _timeUnit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    stakers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        timeOfLastUpdate: BigNumber;
        conditionIdOflastUpdate: BigNumber;
        amountStaked: BigNumber;
        unclaimedRewards: BigNumber;
      }
    >;

    stakersArray(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    stakingToken(overrides?: CallOverrides): Promise<string>;

    stakingTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    stakingTokenDecimals(overrides?: CallOverrides): Promise<number>;

    withdraw(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdrawRewardTokens(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ContractURIUpdated(string,string)"(
      prevURI?: null,
      newURI?: null
    ): ContractURIUpdatedEventFilter;
    ContractURIUpdated(
      prevURI?: null,
      newURI?: null
    ): ContractURIUpdatedEventFilter;

    "OwnerUpdated(address,address)"(
      prevOwner?: string | null,
      newOwner?: string | null
    ): OwnerUpdatedEventFilter;
    OwnerUpdated(
      prevOwner?: string | null,
      newOwner?: string | null
    ): OwnerUpdatedEventFilter;

    "RewardsClaimed(address,uint256)"(
      staker?: string | null,
      rewardAmount?: null
    ): RewardsClaimedEventFilter;
    RewardsClaimed(
      staker?: string | null,
      rewardAmount?: null
    ): RewardsClaimedEventFilter;

    "TokensStaked(address,uint256)"(
      staker?: string | null,
      amount?: null
    ): TokensStakedEventFilter;
    TokensStaked(
      staker?: string | null,
      amount?: null
    ): TokensStakedEventFilter;

    "TokensWithdrawn(address,uint256)"(
      staker?: string | null,
      amount?: null
    ): TokensWithdrawnEventFilter;
    TokensWithdrawn(
      staker?: string | null,
      amount?: null
    ): TokensWithdrawnEventFilter;

    "UpdatedMinStakeAmount(uint256,uint256)"(
      oldAmount?: null,
      newAmount?: null
    ): UpdatedMinStakeAmountEventFilter;
    UpdatedMinStakeAmount(
      oldAmount?: null,
      newAmount?: null
    ): UpdatedMinStakeAmountEventFilter;

    "UpdatedRewardRatio(uint256,uint256,uint256,uint256)"(
      oldNumerator?: null,
      newNumerator?: null,
      oldDenominator?: null,
      newDenominator?: null
    ): UpdatedRewardRatioEventFilter;
    UpdatedRewardRatio(
      oldNumerator?: null,
      newNumerator?: null,
      oldDenominator?: null,
      newDenominator?: null
    ): UpdatedRewardRatioEventFilter;

    "UpdatedTimeUnit(uint256,uint256)"(
      oldTimeUnit?: null,
      newTimeUnit?: null
    ): UpdatedTimeUnitEventFilter;
    UpdatedTimeUnit(
      oldTimeUnit?: null,
      newTimeUnit?: null
    ): UpdatedTimeUnitEventFilter;
  };

  estimateGas: {
    claimRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    contractURI(overrides?: CallOverrides): Promise<BigNumber>;

    depositRewardTokens(
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRewardRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getStakeInfo(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimeUnit(overrides?: CallOverrides): Promise<BigNumber>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    rewardTokenDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    setContractURI(
      _uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOwner(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardRatio(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTimeUnit(
      _timeUnit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    stakersArray(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakingToken(overrides?: CallOverrides): Promise<BigNumber>;

    stakingTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    stakingTokenDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawRewardTokens(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    contractURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositRewardTokens(
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRewardRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRewardTokenBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakeInfo(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimeUnit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardTokenDecimals(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setContractURI(
      _uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardRatio(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTimeUnit(
      _timeUnit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakersArray(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakingTokenBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakingTokenDecimals(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawRewardTokens(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
