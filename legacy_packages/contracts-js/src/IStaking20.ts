/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface IStaking20Interface extends utils.Interface {
  functions: {
    "claimRewards()": FunctionFragment;
    "getStakeInfo(address)": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claimRewards"
      | "getStakeInfo"
      | "stake"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeInfo",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "RewardsClaimed(address,uint256)": EventFragment;
    "TokensStaked(address,uint256)": EventFragment;
    "TokensWithdrawn(address,uint256)": EventFragment;
    "UpdatedMinStakeAmount(uint256,uint256)": EventFragment;
    "UpdatedRewardRatio(uint256,uint256,uint256,uint256)": EventFragment;
    "UpdatedTimeUnit(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RewardsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensStaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedMinStakeAmount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedRewardRatio"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedTimeUnit"): EventFragment;
}

export interface RewardsClaimedEventObject {
  staker: string;
  rewardAmount: BigNumber;
}
export type RewardsClaimedEvent = TypedEvent<
  [string, BigNumber],
  RewardsClaimedEventObject
>;

export type RewardsClaimedEventFilter = TypedEventFilter<RewardsClaimedEvent>;

export interface TokensStakedEventObject {
  staker: string;
  amount: BigNumber;
}
export type TokensStakedEvent = TypedEvent<
  [string, BigNumber],
  TokensStakedEventObject
>;

export type TokensStakedEventFilter = TypedEventFilter<TokensStakedEvent>;

export interface TokensWithdrawnEventObject {
  staker: string;
  amount: BigNumber;
}
export type TokensWithdrawnEvent = TypedEvent<
  [string, BigNumber],
  TokensWithdrawnEventObject
>;

export type TokensWithdrawnEventFilter = TypedEventFilter<TokensWithdrawnEvent>;

export interface UpdatedMinStakeAmountEventObject {
  oldAmount: BigNumber;
  newAmount: BigNumber;
}
export type UpdatedMinStakeAmountEvent = TypedEvent<
  [BigNumber, BigNumber],
  UpdatedMinStakeAmountEventObject
>;

export type UpdatedMinStakeAmountEventFilter =
  TypedEventFilter<UpdatedMinStakeAmountEvent>;

export interface UpdatedRewardRatioEventObject {
  oldNumerator: BigNumber;
  newNumerator: BigNumber;
  oldDenominator: BigNumber;
  newDenominator: BigNumber;
}
export type UpdatedRewardRatioEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  UpdatedRewardRatioEventObject
>;

export type UpdatedRewardRatioEventFilter =
  TypedEventFilter<UpdatedRewardRatioEvent>;

export interface UpdatedTimeUnitEventObject {
  oldTimeUnit: BigNumber;
  newTimeUnit: BigNumber;
}
export type UpdatedTimeUnitEvent = TypedEvent<
  [BigNumber, BigNumber],
  UpdatedTimeUnitEventObject
>;

export type UpdatedTimeUnitEventFilter = TypedEventFilter<UpdatedTimeUnitEvent>;

export interface IStaking20 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IStaking20Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getStakeInfo(
      staker: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _tokensStaked: BigNumber; _rewards: BigNumber }
    >;

    stake(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  claimRewards(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getStakeInfo(
    staker: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { _tokensStaked: BigNumber; _rewards: BigNumber }
  >;

  stake(
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimRewards(overrides?: CallOverrides): Promise<void>;

    getStakeInfo(
      staker: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _tokensStaked: BigNumber; _rewards: BigNumber }
    >;

    stake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "RewardsClaimed(address,uint256)"(
      staker?: string | null,
      rewardAmount?: null
    ): RewardsClaimedEventFilter;
    RewardsClaimed(
      staker?: string | null,
      rewardAmount?: null
    ): RewardsClaimedEventFilter;

    "TokensStaked(address,uint256)"(
      staker?: string | null,
      amount?: null
    ): TokensStakedEventFilter;
    TokensStaked(
      staker?: string | null,
      amount?: null
    ): TokensStakedEventFilter;

    "TokensWithdrawn(address,uint256)"(
      staker?: string | null,
      amount?: null
    ): TokensWithdrawnEventFilter;
    TokensWithdrawn(
      staker?: string | null,
      amount?: null
    ): TokensWithdrawnEventFilter;

    "UpdatedMinStakeAmount(uint256,uint256)"(
      oldAmount?: null,
      newAmount?: null
    ): UpdatedMinStakeAmountEventFilter;
    UpdatedMinStakeAmount(
      oldAmount?: null,
      newAmount?: null
    ): UpdatedMinStakeAmountEventFilter;

    "UpdatedRewardRatio(uint256,uint256,uint256,uint256)"(
      oldNumerator?: null,
      newNumerator?: null,
      oldDenominator?: null,
      newDenominator?: null
    ): UpdatedRewardRatioEventFilter;
    UpdatedRewardRatio(
      oldNumerator?: null,
      newNumerator?: null,
      oldDenominator?: null,
      newDenominator?: null
    ): UpdatedRewardRatioEventFilter;

    "UpdatedTimeUnit(uint256,uint256)"(
      oldTimeUnit?: null,
      newTimeUnit?: null
    ): UpdatedTimeUnitEventFilter;
    UpdatedTimeUnit(
      oldTimeUnit?: null,
      newTimeUnit?: null
    ): UpdatedTimeUnitEventFilter;
  };

  estimateGas: {
    claimRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getStakeInfo(staker: string, overrides?: CallOverrides): Promise<BigNumber>;

    stake(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getStakeInfo(
      staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
