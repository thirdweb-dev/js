/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace IPluginMap {
  export type PluginStruct = {
    functionSelector: BytesLike;
    functionSignature: string;
    pluginAddress: string;
  };

  export type PluginStructOutput = [string, string, string] & {
    functionSelector: string;
    functionSignature: string;
    pluginAddress: string;
  };
}

export interface TWMultichainRegistryRouterInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "_getPluginForFunction(bytes4)": FunctionFragment;
    "addPlugin((bytes4,string,address))": FunctionFragment;
    "getAllFunctionsOfPlugin(address)": FunctionFragment;
    "getAllPlugins()": FunctionFragment;
    "getPluginForFunction(bytes4)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "hasRoleWithSwitch(bytes32,address)": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "pluginMap()": FunctionFragment;
    "removePlugin(bytes4)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "updatePlugin((bytes4,string,address))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "_getPluginForFunction"
      | "addPlugin"
      | "getAllFunctionsOfPlugin"
      | "getAllPlugins"
      | "getPluginForFunction"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "grantRole"
      | "hasRole"
      | "hasRoleWithSwitch"
      | "isTrustedForwarder"
      | "multicall"
      | "pluginMap"
      | "removePlugin"
      | "renounceRole"
      | "revokeRole"
      | "supportsInterface"
      | "updatePlugin"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_getPluginForFunction",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addPlugin",
    values: [IPluginMap.PluginStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllFunctionsOfPlugin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPlugins",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPluginForFunction",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRoleWithSwitch",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "pluginMap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removePlugin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlugin",
    values: [IPluginMap.PluginStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getPluginForFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPlugin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllFunctionsOfPlugin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPlugins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPluginForFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasRoleWithSwitch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pluginMap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removePlugin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlugin",
    data: BytesLike
  ): Result;

  events: {
    "PluginAdded(bytes4,address)": EventFragment;
    "PluginRemoved(bytes4,address)": EventFragment;
    "PluginSet(bytes4,string,address)": EventFragment;
    "PluginUpdated(bytes4,address,address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PluginAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PluginRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PluginSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PluginUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export interface PluginAddedEventObject {
  functionSelector: string;
  pluginAddress: string;
}
export type PluginAddedEvent = TypedEvent<
  [string, string],
  PluginAddedEventObject
>;

export type PluginAddedEventFilter = TypedEventFilter<PluginAddedEvent>;

export interface PluginRemovedEventObject {
  functionSelector: string;
  pluginAddress: string;
}
export type PluginRemovedEvent = TypedEvent<
  [string, string],
  PluginRemovedEventObject
>;

export type PluginRemovedEventFilter = TypedEventFilter<PluginRemovedEvent>;

export interface PluginSetEventObject {
  functionSelector: string;
  functionSignature: string;
  pluginAddress: string;
}
export type PluginSetEvent = TypedEvent<
  [string, string, string],
  PluginSetEventObject
>;

export type PluginSetEventFilter = TypedEventFilter<PluginSetEvent>;

export interface PluginUpdatedEventObject {
  functionSelector: string;
  oldPluginAddress: string;
  newPluginAddress: string;
}
export type PluginUpdatedEvent = TypedEvent<
  [string, string, string],
  PluginUpdatedEventObject
>;

export type PluginUpdatedEventFilter = TypedEventFilter<PluginUpdatedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface TWMultichainRegistryRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TWMultichainRegistryRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    _getPluginForFunction(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    addPlugin(
      _plugin: IPluginMap.PluginStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAllFunctionsOfPlugin(
      _pluginAddress: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { registered: string[] }>;

    getAllPlugins(
      overrides?: CallOverrides
    ): Promise<
      [IPluginMap.PluginStructOutput[]] & {
        registered: IPluginMap.PluginStructOutput[];
      }
    >;

    getPluginForFunction(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { member: string }>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasRoleWithSwitch(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pluginMap(overrides?: CallOverrides): Promise<[string]>;

    removePlugin(
      _selector: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    updatePlugin(
      _plugin: IPluginMap.PluginStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  _getPluginForFunction(
    _selector: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  addPlugin(
    _plugin: IPluginMap.PluginStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAllFunctionsOfPlugin(
    _pluginAddress: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getAllPlugins(
    overrides?: CallOverrides
  ): Promise<IPluginMap.PluginStructOutput[]>;

  getPluginForFunction(
    _selector: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasRoleWithSwitch(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTrustedForwarder(
    forwarder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  multicall(
    data: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pluginMap(overrides?: CallOverrides): Promise<string>;

  removePlugin(
    _selector: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  updatePlugin(
    _plugin: IPluginMap.PluginStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    _getPluginForFunction(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    addPlugin(
      _plugin: IPluginMap.PluginStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllFunctionsOfPlugin(
      _pluginAddress: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getAllPlugins(
      overrides?: CallOverrides
    ): Promise<IPluginMap.PluginStructOutput[]>;

    getPluginForFunction(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasRoleWithSwitch(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    pluginMap(overrides?: CallOverrides): Promise<string>;

    removePlugin(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updatePlugin(
      _plugin: IPluginMap.PluginStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "PluginAdded(bytes4,address)"(
      functionSelector?: BytesLike | null,
      pluginAddress?: string | null
    ): PluginAddedEventFilter;
    PluginAdded(
      functionSelector?: BytesLike | null,
      pluginAddress?: string | null
    ): PluginAddedEventFilter;

    "PluginRemoved(bytes4,address)"(
      functionSelector?: BytesLike | null,
      pluginAddress?: string | null
    ): PluginRemovedEventFilter;
    PluginRemoved(
      functionSelector?: BytesLike | null,
      pluginAddress?: string | null
    ): PluginRemovedEventFilter;

    "PluginSet(bytes4,string,address)"(
      functionSelector?: BytesLike | null,
      functionSignature?: string | null,
      pluginAddress?: string | null
    ): PluginSetEventFilter;
    PluginSet(
      functionSelector?: BytesLike | null,
      functionSignature?: string | null,
      pluginAddress?: string | null
    ): PluginSetEventFilter;

    "PluginUpdated(bytes4,address,address)"(
      functionSelector?: BytesLike | null,
      oldPluginAddress?: string | null,
      newPluginAddress?: string | null
    ): PluginUpdatedEventFilter;
    PluginUpdated(
      functionSelector?: BytesLike | null,
      oldPluginAddress?: string | null,
      newPluginAddress?: string | null
    ): PluginUpdatedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    _getPluginForFunction(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addPlugin(
      _plugin: IPluginMap.PluginStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAllFunctionsOfPlugin(
      _pluginAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllPlugins(overrides?: CallOverrides): Promise<BigNumber>;

    getPluginForFunction(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasRoleWithSwitch(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pluginMap(overrides?: CallOverrides): Promise<BigNumber>;

    removePlugin(
      _selector: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updatePlugin(
      _plugin: IPluginMap.PluginStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getPluginForFunction(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addPlugin(
      _plugin: IPluginMap.PluginStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAllFunctionsOfPlugin(
      _pluginAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllPlugins(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPluginForFunction(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasRoleWithSwitch(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pluginMap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removePlugin(
      _selector: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updatePlugin(
      _plugin: IPluginMap.PluginStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
