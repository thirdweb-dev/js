/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface TokenStakeInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "claimRewards()": FunctionFragment;
    "contractType()": FunctionFragment;
    "contractURI()": FunctionFragment;
    "contractVersion()": FunctionFragment;
    "depositRewardTokens(uint256)": FunctionFragment;
    "getRewardRatio()": FunctionFragment;
    "getRewardTokenBalance()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "getStakeInfo(address)": FunctionFragment;
    "getTimeUnit()": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "hasRoleWithSwitch(bytes32,address)": FunctionFragment;
    "initialize(address,string,address[],address,address,uint80,uint256,uint256)": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "rewardToken()": FunctionFragment;
    "rewardTokenDecimals()": FunctionFragment;
    "setContractURI(string)": FunctionFragment;
    "setRewardRatio(uint256,uint256)": FunctionFragment;
    "setTimeUnit(uint80)": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "stakers(address)": FunctionFragment;
    "stakersArray(uint256)": FunctionFragment;
    "stakingToken()": FunctionFragment;
    "stakingTokenBalance()": FunctionFragment;
    "stakingTokenDecimals()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawRewardTokens(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "claimRewards"
      | "contractType"
      | "contractURI"
      | "contractVersion"
      | "depositRewardTokens"
      | "getRewardRatio"
      | "getRewardTokenBalance"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "getStakeInfo"
      | "getTimeUnit"
      | "grantRole"
      | "hasRole"
      | "hasRoleWithSwitch"
      | "initialize"
      | "isTrustedForwarder"
      | "multicall"
      | "renounceRole"
      | "revokeRole"
      | "rewardToken"
      | "rewardTokenDecimals"
      | "setContractURI"
      | "setRewardRatio"
      | "setTimeUnit"
      | "stake"
      | "stakers"
      | "stakersArray"
      | "stakingToken"
      | "stakingTokenBalance"
      | "stakingTokenDecimals"
      | "withdraw"
      | "withdrawRewardTokens"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositRewardTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardTokenBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimeUnit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRoleWithSwitch",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      string[],
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokenDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setContractURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardRatio",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTimeUnit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "stakers", values: [string]): string;
  encodeFunctionData(
    functionFragment: "stakersArray",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingTokenBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingTokenDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRewardTokens",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositRewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimeUnit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasRoleWithSwitch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokenDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTimeUnit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakersArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingTokenDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRewardTokens",
    data: BytesLike
  ): Result;

  events: {
    "ContractURIUpdated(string,string)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "RewardTokensDepositedByAdmin(uint256)": EventFragment;
    "RewardTokensWithdrawnByAdmin(uint256)": EventFragment;
    "RewardsClaimed(address,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "TokensStaked(address,uint256)": EventFragment;
    "TokensWithdrawn(address,uint256)": EventFragment;
    "UpdatedMinStakeAmount(uint256,uint256)": EventFragment;
    "UpdatedRewardRatio(uint256,uint256,uint256,uint256)": EventFragment;
    "UpdatedTimeUnit(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContractURIUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RewardTokensDepositedByAdmin"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RewardTokensWithdrawnByAdmin"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensStaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedMinStakeAmount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedRewardRatio"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedTimeUnit"): EventFragment;
}

export interface ContractURIUpdatedEventObject {
  prevURI: string;
  newURI: string;
}
export type ContractURIUpdatedEvent = TypedEvent<
  [string, string],
  ContractURIUpdatedEventObject
>;

export type ContractURIUpdatedEventFilter =
  TypedEventFilter<ContractURIUpdatedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface RewardTokensDepositedByAdminEventObject {
  _amount: BigNumber;
}
export type RewardTokensDepositedByAdminEvent = TypedEvent<
  [BigNumber],
  RewardTokensDepositedByAdminEventObject
>;

export type RewardTokensDepositedByAdminEventFilter =
  TypedEventFilter<RewardTokensDepositedByAdminEvent>;

export interface RewardTokensWithdrawnByAdminEventObject {
  _amount: BigNumber;
}
export type RewardTokensWithdrawnByAdminEvent = TypedEvent<
  [BigNumber],
  RewardTokensWithdrawnByAdminEventObject
>;

export type RewardTokensWithdrawnByAdminEventFilter =
  TypedEventFilter<RewardTokensWithdrawnByAdminEvent>;

export interface RewardsClaimedEventObject {
  staker: string;
  rewardAmount: BigNumber;
}
export type RewardsClaimedEvent = TypedEvent<
  [string, BigNumber],
  RewardsClaimedEventObject
>;

export type RewardsClaimedEventFilter = TypedEventFilter<RewardsClaimedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface TokensStakedEventObject {
  staker: string;
  amount: BigNumber;
}
export type TokensStakedEvent = TypedEvent<
  [string, BigNumber],
  TokensStakedEventObject
>;

export type TokensStakedEventFilter = TypedEventFilter<TokensStakedEvent>;

export interface TokensWithdrawnEventObject {
  staker: string;
  amount: BigNumber;
}
export type TokensWithdrawnEvent = TypedEvent<
  [string, BigNumber],
  TokensWithdrawnEventObject
>;

export type TokensWithdrawnEventFilter = TypedEventFilter<TokensWithdrawnEvent>;

export interface UpdatedMinStakeAmountEventObject {
  oldAmount: BigNumber;
  newAmount: BigNumber;
}
export type UpdatedMinStakeAmountEvent = TypedEvent<
  [BigNumber, BigNumber],
  UpdatedMinStakeAmountEventObject
>;

export type UpdatedMinStakeAmountEventFilter =
  TypedEventFilter<UpdatedMinStakeAmountEvent>;

export interface UpdatedRewardRatioEventObject {
  oldNumerator: BigNumber;
  newNumerator: BigNumber;
  oldDenominator: BigNumber;
  newDenominator: BigNumber;
}
export type UpdatedRewardRatioEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  UpdatedRewardRatioEventObject
>;

export type UpdatedRewardRatioEventFilter =
  TypedEventFilter<UpdatedRewardRatioEvent>;

export interface UpdatedTimeUnitEventObject {
  oldTimeUnit: BigNumber;
  newTimeUnit: BigNumber;
}
export type UpdatedTimeUnitEvent = TypedEvent<
  [BigNumber, BigNumber],
  UpdatedTimeUnitEventObject
>;

export type UpdatedTimeUnitEventFilter = TypedEventFilter<UpdatedTimeUnitEvent>;

export interface TokenStake extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TokenStakeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    claimRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    contractType(overrides?: CallOverrides): Promise<[string]>;

    contractURI(overrides?: CallOverrides): Promise<[string]>;

    contractVersion(overrides?: CallOverrides): Promise<[number]>;

    depositRewardTokens(
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRewardRatio(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _numerator: BigNumber;
        _denominator: BigNumber;
      }
    >;

    getRewardTokenBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { member: string }>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    getStakeInfo(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _tokensStaked: BigNumber; _rewards: BigNumber }
    >;

    getTimeUnit(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _timeUnit: BigNumber }>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasRoleWithSwitch(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _defaultAdmin: string,
      _contractURI: string,
      _trustedForwarders: string[],
      _rewardToken: string,
      _stakingToken: string,
      _timeUnit: BigNumberish,
      _rewardRatioNumerator: BigNumberish,
      _rewardRatioDenominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    rewardTokenDecimals(overrides?: CallOverrides): Promise<[number]>;

    setContractURI(
      _uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardRatio(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTimeUnit(
      _timeUnit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        timeOfLastUpdate: BigNumber;
        conditionIdOflastUpdate: BigNumber;
        amountStaked: BigNumber;
        unclaimedRewards: BigNumber;
      }
    >;

    stakersArray(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    stakingToken(overrides?: CallOverrides): Promise<[string]>;

    stakingTokenBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    stakingTokenDecimals(overrides?: CallOverrides): Promise<[number]>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawRewardTokens(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  claimRewards(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  contractType(overrides?: CallOverrides): Promise<string>;

  contractURI(overrides?: CallOverrides): Promise<string>;

  contractVersion(overrides?: CallOverrides): Promise<number>;

  depositRewardTokens(
    _amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRewardRatio(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { _numerator: BigNumber; _denominator: BigNumber }
  >;

  getRewardTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStakeInfo(
    _staker: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { _tokensStaked: BigNumber; _rewards: BigNumber }
  >;

  getTimeUnit(overrides?: CallOverrides): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasRoleWithSwitch(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _defaultAdmin: string,
    _contractURI: string,
    _trustedForwarders: string[],
    _rewardToken: string,
    _stakingToken: string,
    _timeUnit: BigNumberish,
    _rewardRatioNumerator: BigNumberish,
    _rewardRatioDenominator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isTrustedForwarder(
    forwarder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  multicall(
    data: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  rewardTokenDecimals(overrides?: CallOverrides): Promise<number>;

  setContractURI(
    _uri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardRatio(
    _numerator: BigNumberish,
    _denominator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTimeUnit(
    _timeUnit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    _amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakers(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      timeOfLastUpdate: BigNumber;
      conditionIdOflastUpdate: BigNumber;
      amountStaked: BigNumber;
      unclaimedRewards: BigNumber;
    }
  >;

  stakersArray(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  stakingToken(overrides?: CallOverrides): Promise<string>;

  stakingTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

  stakingTokenDecimals(overrides?: CallOverrides): Promise<number>;

  withdraw(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawRewardTokens(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    claimRewards(overrides?: CallOverrides): Promise<void>;

    contractType(overrides?: CallOverrides): Promise<string>;

    contractURI(overrides?: CallOverrides): Promise<string>;

    contractVersion(overrides?: CallOverrides): Promise<number>;

    depositRewardTokens(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getRewardRatio(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _numerator: BigNumber;
        _denominator: BigNumber;
      }
    >;

    getRewardTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakeInfo(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _tokensStaked: BigNumber; _rewards: BigNumber }
    >;

    getTimeUnit(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasRoleWithSwitch(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _defaultAdmin: string,
      _contractURI: string,
      _trustedForwarders: string[],
      _rewardToken: string,
      _stakingToken: string,
      _timeUnit: BigNumberish,
      _rewardRatioNumerator: BigNumberish,
      _rewardRatioDenominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    rewardTokenDecimals(overrides?: CallOverrides): Promise<number>;

    setContractURI(_uri: string, overrides?: CallOverrides): Promise<void>;

    setRewardRatio(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTimeUnit(
      _timeUnit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    stakers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        timeOfLastUpdate: BigNumber;
        conditionIdOflastUpdate: BigNumber;
        amountStaked: BigNumber;
        unclaimedRewards: BigNumber;
      }
    >;

    stakersArray(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    stakingToken(overrides?: CallOverrides): Promise<string>;

    stakingTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    stakingTokenDecimals(overrides?: CallOverrides): Promise<number>;

    withdraw(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdrawRewardTokens(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ContractURIUpdated(string,string)"(
      prevURI?: null,
      newURI?: null
    ): ContractURIUpdatedEventFilter;
    ContractURIUpdated(
      prevURI?: null,
      newURI?: null
    ): ContractURIUpdatedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "RewardTokensDepositedByAdmin(uint256)"(
      _amount?: null
    ): RewardTokensDepositedByAdminEventFilter;
    RewardTokensDepositedByAdmin(
      _amount?: null
    ): RewardTokensDepositedByAdminEventFilter;

    "RewardTokensWithdrawnByAdmin(uint256)"(
      _amount?: null
    ): RewardTokensWithdrawnByAdminEventFilter;
    RewardTokensWithdrawnByAdmin(
      _amount?: null
    ): RewardTokensWithdrawnByAdminEventFilter;

    "RewardsClaimed(address,uint256)"(
      staker?: string | null,
      rewardAmount?: null
    ): RewardsClaimedEventFilter;
    RewardsClaimed(
      staker?: string | null,
      rewardAmount?: null
    ): RewardsClaimedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "TokensStaked(address,uint256)"(
      staker?: string | null,
      amount?: null
    ): TokensStakedEventFilter;
    TokensStaked(
      staker?: string | null,
      amount?: null
    ): TokensStakedEventFilter;

    "TokensWithdrawn(address,uint256)"(
      staker?: string | null,
      amount?: null
    ): TokensWithdrawnEventFilter;
    TokensWithdrawn(
      staker?: string | null,
      amount?: null
    ): TokensWithdrawnEventFilter;

    "UpdatedMinStakeAmount(uint256,uint256)"(
      oldAmount?: null,
      newAmount?: null
    ): UpdatedMinStakeAmountEventFilter;
    UpdatedMinStakeAmount(
      oldAmount?: null,
      newAmount?: null
    ): UpdatedMinStakeAmountEventFilter;

    "UpdatedRewardRatio(uint256,uint256,uint256,uint256)"(
      oldNumerator?: null,
      newNumerator?: null,
      oldDenominator?: null,
      newDenominator?: null
    ): UpdatedRewardRatioEventFilter;
    UpdatedRewardRatio(
      oldNumerator?: null,
      newNumerator?: null,
      oldDenominator?: null,
      newDenominator?: null
    ): UpdatedRewardRatioEventFilter;

    "UpdatedTimeUnit(uint256,uint256)"(
      oldTimeUnit?: null,
      newTimeUnit?: null
    ): UpdatedTimeUnitEventFilter;
    UpdatedTimeUnit(
      oldTimeUnit?: null,
      newTimeUnit?: null
    ): UpdatedTimeUnitEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    claimRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    contractType(overrides?: CallOverrides): Promise<BigNumber>;

    contractURI(overrides?: CallOverrides): Promise<BigNumber>;

    contractVersion(overrides?: CallOverrides): Promise<BigNumber>;

    depositRewardTokens(
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRewardRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakeInfo(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimeUnit(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasRoleWithSwitch(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _defaultAdmin: string,
      _contractURI: string,
      _trustedForwarders: string[],
      _rewardToken: string,
      _stakingToken: string,
      _timeUnit: BigNumberish,
      _rewardRatioNumerator: BigNumberish,
      _rewardRatioDenominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    rewardTokenDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    setContractURI(
      _uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardRatio(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTimeUnit(
      _timeUnit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    stakersArray(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakingToken(overrides?: CallOverrides): Promise<BigNumber>;

    stakingTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    stakingTokenDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawRewardTokens(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    contractType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contractURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contractVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositRewardTokens(
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRewardRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRewardTokenBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakeInfo(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimeUnit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasRoleWithSwitch(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _defaultAdmin: string,
      _contractURI: string,
      _trustedForwarders: string[],
      _rewardToken: string,
      _stakingToken: string,
      _timeUnit: BigNumberish,
      _rewardRatioNumerator: BigNumberish,
      _rewardRatioDenominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardTokenDecimals(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setContractURI(
      _uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardRatio(
      _numerator: BigNumberish,
      _denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTimeUnit(
      _timeUnit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakersArray(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakingTokenBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakingTokenDecimals(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawRewardTokens(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
