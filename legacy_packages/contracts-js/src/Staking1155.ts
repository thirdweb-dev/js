/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface Staking1155Interface extends utils.Interface {
  functions: {
    "claimRewards(uint256)": FunctionFragment;
    "getDefaultRewardsPerUnitTime()": FunctionFragment;
    "getDefaultTimeUnit()": FunctionFragment;
    "getRewardTokenBalance()": FunctionFragment;
    "getRewardsPerUnitTime(uint256)": FunctionFragment;
    "getStakeInfo(address)": FunctionFragment;
    "getStakeInfoForToken(uint256,address)": FunctionFragment;
    "getTimeUnit(uint256)": FunctionFragment;
    "indexedTokens(uint256)": FunctionFragment;
    "isIndexed(uint256)": FunctionFragment;
    "setDefaultRewardsPerUnitTime(uint256)": FunctionFragment;
    "setDefaultTimeUnit(uint80)": FunctionFragment;
    "setRewardsPerUnitTime(uint256,uint256)": FunctionFragment;
    "setTimeUnit(uint256,uint80)": FunctionFragment;
    "stake(uint256,uint64)": FunctionFragment;
    "stakers(uint256,address)": FunctionFragment;
    "stakersArray(uint256,uint256)": FunctionFragment;
    "stakingToken()": FunctionFragment;
    "withdraw(uint256,uint64)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claimRewards"
      | "getDefaultRewardsPerUnitTime"
      | "getDefaultTimeUnit"
      | "getRewardTokenBalance"
      | "getRewardsPerUnitTime"
      | "getStakeInfo"
      | "getStakeInfoForToken"
      | "getTimeUnit"
      | "indexedTokens"
      | "isIndexed"
      | "setDefaultRewardsPerUnitTime"
      | "setDefaultTimeUnit"
      | "setRewardsPerUnitTime"
      | "setTimeUnit"
      | "stake"
      | "stakers"
      | "stakersArray"
      | "stakingToken"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDefaultRewardsPerUnitTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDefaultTimeUnit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardTokenBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardsPerUnitTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeInfoForToken",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimeUnit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "indexedTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isIndexed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultRewardsPerUnitTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultTimeUnit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardsPerUnitTime",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTimeUnit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakers",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakersArray",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefaultRewardsPerUnitTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefaultTimeUnit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardsPerUnitTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakeInfoForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimeUnit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "indexedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isIndexed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultRewardsPerUnitTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultTimeUnit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardsPerUnitTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTimeUnit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakersArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "RewardsClaimed(address,uint256)": EventFragment;
    "TokensStaked(address,uint256,uint256)": EventFragment;
    "TokensWithdrawn(address,uint256,uint256)": EventFragment;
    "UpdatedDefaultRewardsPerUnitTime(uint256,uint256)": EventFragment;
    "UpdatedDefaultTimeUnit(uint256,uint256)": EventFragment;
    "UpdatedRewardsPerUnitTime(uint256,uint256,uint256)": EventFragment;
    "UpdatedTimeUnit(uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RewardsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensStaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensWithdrawn"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdatedDefaultRewardsPerUnitTime"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedDefaultTimeUnit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedRewardsPerUnitTime"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedTimeUnit"): EventFragment;
}

export interface RewardsClaimedEventObject {
  staker: string;
  rewardAmount: BigNumber;
}
export type RewardsClaimedEvent = TypedEvent<
  [string, BigNumber],
  RewardsClaimedEventObject
>;

export type RewardsClaimedEventFilter = TypedEventFilter<RewardsClaimedEvent>;

export interface TokensStakedEventObject {
  staker: string;
  tokenId: BigNumber;
  amount: BigNumber;
}
export type TokensStakedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  TokensStakedEventObject
>;

export type TokensStakedEventFilter = TypedEventFilter<TokensStakedEvent>;

export interface TokensWithdrawnEventObject {
  staker: string;
  tokenId: BigNumber;
  amount: BigNumber;
}
export type TokensWithdrawnEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  TokensWithdrawnEventObject
>;

export type TokensWithdrawnEventFilter = TypedEventFilter<TokensWithdrawnEvent>;

export interface UpdatedDefaultRewardsPerUnitTimeEventObject {
  oldRewardsPerUnitTime: BigNumber;
  newRewardsPerUnitTime: BigNumber;
}
export type UpdatedDefaultRewardsPerUnitTimeEvent = TypedEvent<
  [BigNumber, BigNumber],
  UpdatedDefaultRewardsPerUnitTimeEventObject
>;

export type UpdatedDefaultRewardsPerUnitTimeEventFilter =
  TypedEventFilter<UpdatedDefaultRewardsPerUnitTimeEvent>;

export interface UpdatedDefaultTimeUnitEventObject {
  oldTimeUnit: BigNumber;
  newTimeUnit: BigNumber;
}
export type UpdatedDefaultTimeUnitEvent = TypedEvent<
  [BigNumber, BigNumber],
  UpdatedDefaultTimeUnitEventObject
>;

export type UpdatedDefaultTimeUnitEventFilter =
  TypedEventFilter<UpdatedDefaultTimeUnitEvent>;

export interface UpdatedRewardsPerUnitTimeEventObject {
  _tokenId: BigNumber;
  oldRewardsPerUnitTime: BigNumber;
  newRewardsPerUnitTime: BigNumber;
}
export type UpdatedRewardsPerUnitTimeEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  UpdatedRewardsPerUnitTimeEventObject
>;

export type UpdatedRewardsPerUnitTimeEventFilter =
  TypedEventFilter<UpdatedRewardsPerUnitTimeEvent>;

export interface UpdatedTimeUnitEventObject {
  _tokenId: BigNumber;
  oldTimeUnit: BigNumber;
  newTimeUnit: BigNumber;
}
export type UpdatedTimeUnitEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  UpdatedTimeUnitEventObject
>;

export type UpdatedTimeUnitEventFilter = TypedEventFilter<UpdatedTimeUnitEvent>;

export interface Staking1155 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Staking1155Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimRewards(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getDefaultRewardsPerUnitTime(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _rewardsPerUnitTime: BigNumber }>;

    getDefaultTimeUnit(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _timeUnit: BigNumber }>;

    getRewardTokenBalance(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _rewardsAvailableInContract: BigNumber }>;

    getRewardsPerUnitTime(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _rewardsPerUnitTime: BigNumber }>;

    getStakeInfo(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[], BigNumber] & {
        _tokensStaked: BigNumber[];
        _tokenAmounts: BigNumber[];
        _totalRewards: BigNumber;
      }
    >;

    getStakeInfoForToken(
      _tokenId: BigNumberish,
      _staker: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _tokensStaked: BigNumber; _rewards: BigNumber }
    >;

    getTimeUnit(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _timeUnit: BigNumber }>;

    indexedTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isIndexed(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setDefaultRewardsPerUnitTime(
      _defaultRewardsPerUnitTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDefaultTimeUnit(
      _defaultTimeUnit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardsPerUnitTime(
      _tokenId: BigNumberish,
      _rewardsPerUnitTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTimeUnit(
      _tokenId: BigNumberish,
      _timeUnit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakers(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        conditionIdOflastUpdate: BigNumber;
        amountStaked: BigNumber;
        timeOfLastUpdate: BigNumber;
        unclaimedRewards: BigNumber;
      }
    >;

    stakersArray(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    stakingToken(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  claimRewards(
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getDefaultRewardsPerUnitTime(overrides?: CallOverrides): Promise<BigNumber>;

  getDefaultTimeUnit(overrides?: CallOverrides): Promise<BigNumber>;

  getRewardTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getRewardsPerUnitTime(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStakeInfo(
    _staker: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber[], BigNumber] & {
      _tokensStaked: BigNumber[];
      _tokenAmounts: BigNumber[];
      _totalRewards: BigNumber;
    }
  >;

  getStakeInfoForToken(
    _tokenId: BigNumberish,
    _staker: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { _tokensStaked: BigNumber; _rewards: BigNumber }
  >;

  getTimeUnit(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  indexedTokens(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isIndexed(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  setDefaultRewardsPerUnitTime(
    _defaultRewardsPerUnitTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDefaultTimeUnit(
    _defaultTimeUnit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardsPerUnitTime(
    _tokenId: BigNumberish,
    _rewardsPerUnitTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTimeUnit(
    _tokenId: BigNumberish,
    _timeUnit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    _tokenId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakers(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      conditionIdOflastUpdate: BigNumber;
      amountStaked: BigNumber;
      timeOfLastUpdate: BigNumber;
      unclaimedRewards: BigNumber;
    }
  >;

  stakersArray(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  stakingToken(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _tokenId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimRewards(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getDefaultRewardsPerUnitTime(overrides?: CallOverrides): Promise<BigNumber>;

    getDefaultTimeUnit(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardsPerUnitTime(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakeInfo(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[], BigNumber] & {
        _tokensStaked: BigNumber[];
        _tokenAmounts: BigNumber[];
        _totalRewards: BigNumber;
      }
    >;

    getStakeInfoForToken(
      _tokenId: BigNumberish,
      _staker: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _tokensStaked: BigNumber; _rewards: BigNumber }
    >;

    getTimeUnit(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    indexedTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isIndexed(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    setDefaultRewardsPerUnitTime(
      _defaultRewardsPerUnitTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDefaultTimeUnit(
      _defaultTimeUnit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardsPerUnitTime(
      _tokenId: BigNumberish,
      _rewardsPerUnitTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTimeUnit(
      _tokenId: BigNumberish,
      _timeUnit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakers(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        conditionIdOflastUpdate: BigNumber;
        amountStaked: BigNumber;
        timeOfLastUpdate: BigNumber;
        unclaimedRewards: BigNumber;
      }
    >;

    stakersArray(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    stakingToken(overrides?: CallOverrides): Promise<string>;

    withdraw(
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "RewardsClaimed(address,uint256)"(
      staker?: string | null,
      rewardAmount?: null
    ): RewardsClaimedEventFilter;
    RewardsClaimed(
      staker?: string | null,
      rewardAmount?: null
    ): RewardsClaimedEventFilter;

    "TokensStaked(address,uint256,uint256)"(
      staker?: string | null,
      tokenId?: BigNumberish | null,
      amount?: null
    ): TokensStakedEventFilter;
    TokensStaked(
      staker?: string | null,
      tokenId?: BigNumberish | null,
      amount?: null
    ): TokensStakedEventFilter;

    "TokensWithdrawn(address,uint256,uint256)"(
      staker?: string | null,
      tokenId?: BigNumberish | null,
      amount?: null
    ): TokensWithdrawnEventFilter;
    TokensWithdrawn(
      staker?: string | null,
      tokenId?: BigNumberish | null,
      amount?: null
    ): TokensWithdrawnEventFilter;

    "UpdatedDefaultRewardsPerUnitTime(uint256,uint256)"(
      oldRewardsPerUnitTime?: null,
      newRewardsPerUnitTime?: null
    ): UpdatedDefaultRewardsPerUnitTimeEventFilter;
    UpdatedDefaultRewardsPerUnitTime(
      oldRewardsPerUnitTime?: null,
      newRewardsPerUnitTime?: null
    ): UpdatedDefaultRewardsPerUnitTimeEventFilter;

    "UpdatedDefaultTimeUnit(uint256,uint256)"(
      oldTimeUnit?: null,
      newTimeUnit?: null
    ): UpdatedDefaultTimeUnitEventFilter;
    UpdatedDefaultTimeUnit(
      oldTimeUnit?: null,
      newTimeUnit?: null
    ): UpdatedDefaultTimeUnitEventFilter;

    "UpdatedRewardsPerUnitTime(uint256,uint256,uint256)"(
      _tokenId?: BigNumberish | null,
      oldRewardsPerUnitTime?: null,
      newRewardsPerUnitTime?: null
    ): UpdatedRewardsPerUnitTimeEventFilter;
    UpdatedRewardsPerUnitTime(
      _tokenId?: BigNumberish | null,
      oldRewardsPerUnitTime?: null,
      newRewardsPerUnitTime?: null
    ): UpdatedRewardsPerUnitTimeEventFilter;

    "UpdatedTimeUnit(uint256,uint256,uint256)"(
      _tokenId?: BigNumberish | null,
      oldTimeUnit?: null,
      newTimeUnit?: null
    ): UpdatedTimeUnitEventFilter;
    UpdatedTimeUnit(
      _tokenId?: BigNumberish | null,
      oldTimeUnit?: null,
      newTimeUnit?: null
    ): UpdatedTimeUnitEventFilter;
  };

  estimateGas: {
    claimRewards(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getDefaultRewardsPerUnitTime(overrides?: CallOverrides): Promise<BigNumber>;

    getDefaultTimeUnit(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardsPerUnitTime(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakeInfo(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakeInfoForToken(
      _tokenId: BigNumberish,
      _staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimeUnit(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    indexedTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isIndexed(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDefaultRewardsPerUnitTime(
      _defaultRewardsPerUnitTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDefaultTimeUnit(
      _defaultTimeUnit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardsPerUnitTime(
      _tokenId: BigNumberish,
      _rewardsPerUnitTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTimeUnit(
      _tokenId: BigNumberish,
      _timeUnit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakers(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakersArray(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakingToken(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimRewards(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getDefaultRewardsPerUnitTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDefaultTimeUnit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardTokenBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardsPerUnitTime(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakeInfo(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakeInfoForToken(
      _tokenId: BigNumberish,
      _staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimeUnit(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    indexedTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isIndexed(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setDefaultRewardsPerUnitTime(
      _defaultRewardsPerUnitTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDefaultTimeUnit(
      _defaultTimeUnit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardsPerUnitTime(
      _tokenId: BigNumberish,
      _rewardsPerUnitTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTimeUnit(
      _tokenId: BigNumberish,
      _timeUnit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakers(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakersArray(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
