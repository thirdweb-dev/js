/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace Airdrop {
  export type AirdropContentERC1155Struct = {
    recipient: string;
    tokenId: BigNumberish;
    amount: BigNumberish;
  };

  export type AirdropContentERC1155StructOutput = [
    string,
    BigNumber,
    BigNumber
  ] & { recipient: string; tokenId: BigNumber; amount: BigNumber };

  export type AirdropRequestERC1155Struct = {
    uid: BytesLike;
    tokenAddress: string;
    expirationTimestamp: BigNumberish;
    contents: Airdrop.AirdropContentERC1155Struct[];
  };

  export type AirdropRequestERC1155StructOutput = [
    string,
    string,
    BigNumber,
    Airdrop.AirdropContentERC1155StructOutput[]
  ] & {
    uid: string;
    tokenAddress: string;
    expirationTimestamp: BigNumber;
    contents: Airdrop.AirdropContentERC1155StructOutput[];
  };

  export type AirdropContentERC20Struct = {
    recipient: string;
    amount: BigNumberish;
  };

  export type AirdropContentERC20StructOutput = [string, BigNumber] & {
    recipient: string;
    amount: BigNumber;
  };

  export type AirdropRequestERC20Struct = {
    uid: BytesLike;
    tokenAddress: string;
    expirationTimestamp: BigNumberish;
    contents: Airdrop.AirdropContentERC20Struct[];
  };

  export type AirdropRequestERC20StructOutput = [
    string,
    string,
    BigNumber,
    Airdrop.AirdropContentERC20StructOutput[]
  ] & {
    uid: string;
    tokenAddress: string;
    expirationTimestamp: BigNumber;
    contents: Airdrop.AirdropContentERC20StructOutput[];
  };

  export type AirdropContentERC721Struct = {
    recipient: string;
    tokenId: BigNumberish;
  };

  export type AirdropContentERC721StructOutput = [string, BigNumber] & {
    recipient: string;
    tokenId: BigNumber;
  };

  export type AirdropRequestERC721Struct = {
    uid: BytesLike;
    tokenAddress: string;
    expirationTimestamp: BigNumberish;
    contents: Airdrop.AirdropContentERC721Struct[];
  };

  export type AirdropRequestERC721StructOutput = [
    string,
    string,
    BigNumber,
    Airdrop.AirdropContentERC721StructOutput[]
  ] & {
    uid: string;
    tokenAddress: string;
    expirationTimestamp: BigNumber;
    contents: Airdrop.AirdropContentERC721StructOutput[];
  };
}

export interface AirdropInterface extends utils.Interface {
  functions: {
    "airdropERC1155(address,(address,uint256,uint256)[])": FunctionFragment;
    "airdropERC1155WithSignature((bytes32,address,uint256,(address,uint256,uint256)[]),bytes)": FunctionFragment;
    "airdropERC20(address,(address,uint256)[])": FunctionFragment;
    "airdropERC20WithSignature((bytes32,address,uint256,(address,uint256)[]),bytes)": FunctionFragment;
    "airdropERC721(address,(address,uint256)[])": FunctionFragment;
    "airdropERC721WithSignature((bytes32,address,uint256,(address,uint256)[]),bytes)": FunctionFragment;
    "airdropNativeToken((address,uint256)[])": FunctionFragment;
    "claimERC1155(address,address,uint256,uint256,bytes32[])": FunctionFragment;
    "claimERC20(address,address,uint256,bytes32[])": FunctionFragment;
    "claimERC721(address,address,uint256,bytes32[])": FunctionFragment;
    "contractURI()": FunctionFragment;
    "eip712Domain()": FunctionFragment;
    "initialize(address,string)": FunctionFragment;
    "isClaimed(address,address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "processed(bytes32)": FunctionFragment;
    "setContractURI(string)": FunctionFragment;
    "setMerkleRoot(address,bytes32,bool)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "tokenConditionId(address)": FunctionFragment;
    "tokenMerkleRoot(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "airdropERC1155"
      | "airdropERC1155WithSignature"
      | "airdropERC20"
      | "airdropERC20WithSignature"
      | "airdropERC721"
      | "airdropERC721WithSignature"
      | "airdropNativeToken"
      | "claimERC1155"
      | "claimERC20"
      | "claimERC721"
      | "contractURI"
      | "eip712Domain"
      | "initialize"
      | "isClaimed"
      | "owner"
      | "processed"
      | "setContractURI"
      | "setMerkleRoot"
      | "setOwner"
      | "tokenConditionId"
      | "tokenMerkleRoot"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "airdropERC1155",
    values: [string, Airdrop.AirdropContentERC1155Struct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "airdropERC1155WithSignature",
    values: [Airdrop.AirdropRequestERC1155Struct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "airdropERC20",
    values: [string, Airdrop.AirdropContentERC20Struct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "airdropERC20WithSignature",
    values: [Airdrop.AirdropRequestERC20Struct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "airdropERC721",
    values: [string, Airdrop.AirdropContentERC721Struct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "airdropERC721WithSignature",
    values: [Airdrop.AirdropRequestERC721Struct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "airdropNativeToken",
    values: [Airdrop.AirdropContentERC20Struct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimERC1155",
    values: [string, string, BigNumberish, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimERC20",
    values: [string, string, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimERC721",
    values: [string, string, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isClaimed",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processed",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMerkleRoot",
    values: [string, BytesLike, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "tokenConditionId",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenMerkleRoot",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "airdropERC1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "airdropERC1155WithSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "airdropERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "airdropERC20WithSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "airdropERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "airdropERC721WithSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "airdropNativeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimERC1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimERC20", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isClaimed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "processed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setContractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenConditionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenMerkleRoot",
    data: BytesLike
  ): Result;

  events: {
    "Airdrop(address)": EventFragment;
    "AirdropClaimed(address,address)": EventFragment;
    "AirdropWithSignature(address)": EventFragment;
    "ContractURIUpdated(string,string)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnerUpdated(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Airdrop"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AirdropClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AirdropWithSignature"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractURIUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerUpdated"): EventFragment;
}

export interface AirdropEventObject {
  token: string;
}
export type AirdropEvent = TypedEvent<[string], AirdropEventObject>;

export type AirdropEventFilter = TypedEventFilter<AirdropEvent>;

export interface AirdropClaimedEventObject {
  token: string;
  receiver: string;
}
export type AirdropClaimedEvent = TypedEvent<
  [string, string],
  AirdropClaimedEventObject
>;

export type AirdropClaimedEventFilter = TypedEventFilter<AirdropClaimedEvent>;

export interface AirdropWithSignatureEventObject {
  token: string;
}
export type AirdropWithSignatureEvent = TypedEvent<
  [string],
  AirdropWithSignatureEventObject
>;

export type AirdropWithSignatureEventFilter =
  TypedEventFilter<AirdropWithSignatureEvent>;

export interface ContractURIUpdatedEventObject {
  prevURI: string;
  newURI: string;
}
export type ContractURIUpdatedEvent = TypedEvent<
  [string, string],
  ContractURIUpdatedEventObject
>;

export type ContractURIUpdatedEventFilter =
  TypedEventFilter<ContractURIUpdatedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnerUpdatedEventObject {
  prevOwner: string;
  newOwner: string;
}
export type OwnerUpdatedEvent = TypedEvent<
  [string, string],
  OwnerUpdatedEventObject
>;

export type OwnerUpdatedEventFilter = TypedEventFilter<OwnerUpdatedEvent>;

export interface Airdrop extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AirdropInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    airdropERC1155(
      _tokenAddress: string,
      _contents: Airdrop.AirdropContentERC1155Struct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    airdropERC1155WithSignature(
      req: Airdrop.AirdropRequestERC1155Struct,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    airdropERC20(
      _tokenAddress: string,
      _contents: Airdrop.AirdropContentERC20Struct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    airdropERC20WithSignature(
      req: Airdrop.AirdropRequestERC20Struct,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    airdropERC721(
      _tokenAddress: string,
      _contents: Airdrop.AirdropContentERC721Struct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    airdropERC721WithSignature(
      req: Airdrop.AirdropRequestERC721Struct,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    airdropNativeToken(
      _contents: Airdrop.AirdropContentERC20Struct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimERC1155(
      _token: string,
      _receiver: string,
      _tokenId: BigNumberish,
      _quantity: BigNumberish,
      _proofs: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimERC20(
      _token: string,
      _receiver: string,
      _quantity: BigNumberish,
      _proofs: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimERC721(
      _token: string,
      _receiver: string,
      _tokenId: BigNumberish,
      _proofs: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    contractURI(overrides?: CallOverrides): Promise<[string]>;

    eip712Domain(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, string, string, BigNumber[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: BigNumber;
        verifyingContract: string;
        salt: string;
        extensions: BigNumber[];
      }
    >;

    initialize(
      _defaultAdmin: string,
      _contractURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isClaimed(
      _receiver: string,
      _token: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    processed(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    setContractURI(
      _uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMerkleRoot(
      _token: string,
      _tokenMerkleRoot: BytesLike,
      _resetClaimStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenConditionId(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenMerkleRoot(arg0: string, overrides?: CallOverrides): Promise<[string]>;
  };

  airdropERC1155(
    _tokenAddress: string,
    _contents: Airdrop.AirdropContentERC1155Struct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  airdropERC1155WithSignature(
    req: Airdrop.AirdropRequestERC1155Struct,
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  airdropERC20(
    _tokenAddress: string,
    _contents: Airdrop.AirdropContentERC20Struct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  airdropERC20WithSignature(
    req: Airdrop.AirdropRequestERC20Struct,
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  airdropERC721(
    _tokenAddress: string,
    _contents: Airdrop.AirdropContentERC721Struct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  airdropERC721WithSignature(
    req: Airdrop.AirdropRequestERC721Struct,
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  airdropNativeToken(
    _contents: Airdrop.AirdropContentERC20Struct[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimERC1155(
    _token: string,
    _receiver: string,
    _tokenId: BigNumberish,
    _quantity: BigNumberish,
    _proofs: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimERC20(
    _token: string,
    _receiver: string,
    _quantity: BigNumberish,
    _proofs: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimERC721(
    _token: string,
    _receiver: string,
    _tokenId: BigNumberish,
    _proofs: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  contractURI(overrides?: CallOverrides): Promise<string>;

  eip712Domain(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, string, string, BigNumber[]] & {
      fields: string;
      name: string;
      version: string;
      chainId: BigNumber;
      verifyingContract: string;
      salt: string;
      extensions: BigNumber[];
    }
  >;

  initialize(
    _defaultAdmin: string,
    _contractURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isClaimed(
    _receiver: string,
    _token: string,
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  processed(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  setContractURI(
    _uri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMerkleRoot(
    _token: string,
    _tokenMerkleRoot: BytesLike,
    _resetClaimStatus: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenConditionId(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  tokenMerkleRoot(arg0: string, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    airdropERC1155(
      _tokenAddress: string,
      _contents: Airdrop.AirdropContentERC1155Struct[],
      overrides?: CallOverrides
    ): Promise<void>;

    airdropERC1155WithSignature(
      req: Airdrop.AirdropRequestERC1155Struct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    airdropERC20(
      _tokenAddress: string,
      _contents: Airdrop.AirdropContentERC20Struct[],
      overrides?: CallOverrides
    ): Promise<void>;

    airdropERC20WithSignature(
      req: Airdrop.AirdropRequestERC20Struct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    airdropERC721(
      _tokenAddress: string,
      _contents: Airdrop.AirdropContentERC721Struct[],
      overrides?: CallOverrides
    ): Promise<void>;

    airdropERC721WithSignature(
      req: Airdrop.AirdropRequestERC721Struct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    airdropNativeToken(
      _contents: Airdrop.AirdropContentERC20Struct[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimERC1155(
      _token: string,
      _receiver: string,
      _tokenId: BigNumberish,
      _quantity: BigNumberish,
      _proofs: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimERC20(
      _token: string,
      _receiver: string,
      _quantity: BigNumberish,
      _proofs: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimERC721(
      _token: string,
      _receiver: string,
      _tokenId: BigNumberish,
      _proofs: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    contractURI(overrides?: CallOverrides): Promise<string>;

    eip712Domain(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, string, string, BigNumber[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: BigNumber;
        verifyingContract: string;
        salt: string;
        extensions: BigNumber[];
      }
    >;

    initialize(
      _defaultAdmin: string,
      _contractURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isClaimed(
      _receiver: string,
      _token: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    processed(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    setContractURI(_uri: string, overrides?: CallOverrides): Promise<void>;

    setMerkleRoot(
      _token: string,
      _tokenMerkleRoot: BytesLike,
      _resetClaimStatus: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(_newOwner: string, overrides?: CallOverrides): Promise<void>;

    tokenConditionId(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenMerkleRoot(arg0: string, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Airdrop(address)"(token?: null): AirdropEventFilter;
    Airdrop(token?: null): AirdropEventFilter;

    "AirdropClaimed(address,address)"(
      token?: null,
      receiver?: null
    ): AirdropClaimedEventFilter;
    AirdropClaimed(token?: null, receiver?: null): AirdropClaimedEventFilter;

    "AirdropWithSignature(address)"(
      token?: null
    ): AirdropWithSignatureEventFilter;
    AirdropWithSignature(token?: null): AirdropWithSignatureEventFilter;

    "ContractURIUpdated(string,string)"(
      prevURI?: null,
      newURI?: null
    ): ContractURIUpdatedEventFilter;
    ContractURIUpdated(
      prevURI?: null,
      newURI?: null
    ): ContractURIUpdatedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnerUpdated(address,address)"(
      prevOwner?: string | null,
      newOwner?: string | null
    ): OwnerUpdatedEventFilter;
    OwnerUpdated(
      prevOwner?: string | null,
      newOwner?: string | null
    ): OwnerUpdatedEventFilter;
  };

  estimateGas: {
    airdropERC1155(
      _tokenAddress: string,
      _contents: Airdrop.AirdropContentERC1155Struct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    airdropERC1155WithSignature(
      req: Airdrop.AirdropRequestERC1155Struct,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    airdropERC20(
      _tokenAddress: string,
      _contents: Airdrop.AirdropContentERC20Struct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    airdropERC20WithSignature(
      req: Airdrop.AirdropRequestERC20Struct,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    airdropERC721(
      _tokenAddress: string,
      _contents: Airdrop.AirdropContentERC721Struct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    airdropERC721WithSignature(
      req: Airdrop.AirdropRequestERC721Struct,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    airdropNativeToken(
      _contents: Airdrop.AirdropContentERC20Struct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimERC1155(
      _token: string,
      _receiver: string,
      _tokenId: BigNumberish,
      _quantity: BigNumberish,
      _proofs: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimERC20(
      _token: string,
      _receiver: string,
      _quantity: BigNumberish,
      _proofs: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimERC721(
      _token: string,
      _receiver: string,
      _tokenId: BigNumberish,
      _proofs: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    contractURI(overrides?: CallOverrides): Promise<BigNumber>;

    eip712Domain(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _defaultAdmin: string,
      _contractURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isClaimed(
      _receiver: string,
      _token: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    processed(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    setContractURI(
      _uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMerkleRoot(
      _token: string,
      _tokenMerkleRoot: BytesLike,
      _resetClaimStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOwner(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenConditionId(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenMerkleRoot(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    airdropERC1155(
      _tokenAddress: string,
      _contents: Airdrop.AirdropContentERC1155Struct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    airdropERC1155WithSignature(
      req: Airdrop.AirdropRequestERC1155Struct,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    airdropERC20(
      _tokenAddress: string,
      _contents: Airdrop.AirdropContentERC20Struct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    airdropERC20WithSignature(
      req: Airdrop.AirdropRequestERC20Struct,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    airdropERC721(
      _tokenAddress: string,
      _contents: Airdrop.AirdropContentERC721Struct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    airdropERC721WithSignature(
      req: Airdrop.AirdropRequestERC721Struct,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    airdropNativeToken(
      _contents: Airdrop.AirdropContentERC20Struct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimERC1155(
      _token: string,
      _receiver: string,
      _tokenId: BigNumberish,
      _quantity: BigNumberish,
      _proofs: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimERC20(
      _token: string,
      _receiver: string,
      _quantity: BigNumberish,
      _proofs: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimERC721(
      _token: string,
      _receiver: string,
      _tokenId: BigNumberish,
      _proofs: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    contractURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eip712Domain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _defaultAdmin: string,
      _contractURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isClaimed(
      _receiver: string,
      _token: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    processed(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setContractURI(
      _uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMerkleRoot(
      _token: string,
      _tokenMerkleRoot: BytesLike,
      _resetClaimStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenConditionId(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenMerkleRoot(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
