/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace IDrop {
  export type AllowlistProofStruct = {
    proof: BytesLike[];
    quantityLimitPerWallet: BigNumberish;
    pricePerToken: BigNumberish;
    currency: string;
  };

  export type AllowlistProofStructOutput = [
    string[],
    BigNumber,
    BigNumber,
    string
  ] & {
    proof: string[];
    quantityLimitPerWallet: BigNumber;
    pricePerToken: BigNumber;
    currency: string;
  };
}

export declare namespace IERC721AUpgradeable {
  export type TokenOwnershipStruct = {
    addr: string;
    startTimestamp: BigNumberish;
    burned: boolean;
    extraData: BigNumberish;
  };

  export type TokenOwnershipStructOutput = [
    string,
    BigNumber,
    boolean,
    number
  ] & {
    addr: string;
    startTimestamp: BigNumber;
    burned: boolean;
    extraData: number;
  };
}

export declare namespace IClaimCondition {
  export type ClaimConditionStruct = {
    startTimestamp: BigNumberish;
    maxClaimableSupply: BigNumberish;
    supplyClaimed: BigNumberish;
    quantityLimitPerWallet: BigNumberish;
    merkleRoot: BytesLike;
    pricePerToken: BigNumberish;
    currency: string;
    metadata: string;
  };

  export type ClaimConditionStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    string,
    string
  ] & {
    startTimestamp: BigNumber;
    maxClaimableSupply: BigNumber;
    supplyClaimed: BigNumber;
    quantityLimitPerWallet: BigNumber;
    merkleRoot: string;
    pricePerToken: BigNumber;
    currency: string;
    metadata: string;
  };
}

export declare namespace ISharedMetadata {
  export type SharedMetadataInfoStruct = {
    name: string;
    description: string;
    imageURI: string;
    animationURI: string;
  };

  export type SharedMetadataInfoStructOutput = [
    string,
    string,
    string,
    string
  ] & {
    name: string;
    description: string;
    imageURI: string;
    animationURI: string;
  };
}

export interface OpenEditionERC721FlatFeeInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "claim(address,uint256,address,uint256,(bytes32[],uint256,uint256,address),bytes)": FunctionFragment;
    "claimCondition()": FunctionFragment;
    "contractURI()": FunctionFragment;
    "explicitOwnershipOf(uint256)": FunctionFragment;
    "getActiveClaimConditionId()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getClaimConditionById(uint256)": FunctionFragment;
    "getDefaultRoyaltyInfo()": FunctionFragment;
    "getFlatPlatformFeeInfo()": FunctionFragment;
    "getPlatformFeeInfo()": FunctionFragment;
    "getPlatformFeeType()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "getRoyaltyInfoForToken(uint256)": FunctionFragment;
    "getSupplyClaimedByWallet(uint256,address)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "hasRoleWithSwitch(bytes32,address)": FunctionFragment;
    "initialize(address,string,string,string,address[],address,address,uint128,uint128,address)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "name()": FunctionFragment;
    "nextTokenIdToClaim()": FunctionFragment;
    "nextTokenIdToMint()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "primarySaleRecipient()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "royaltyInfo(uint256,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setClaimConditions((uint256,uint256,uint256,uint256,bytes32,uint256,address,string)[],bool)": FunctionFragment;
    "setContractURI(string)": FunctionFragment;
    "setDefaultRoyaltyInfo(address,uint256)": FunctionFragment;
    "setFlatPlatformFeeInfo(address,uint256)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "setPlatformFeeInfo(address,uint256)": FunctionFragment;
    "setPlatformFeeType(uint8)": FunctionFragment;
    "setPrimarySaleRecipient(address)": FunctionFragment;
    "setRoyaltyInfoForToken(uint256,address,uint256)": FunctionFragment;
    "setSharedMetadata((string,string,string,string))": FunctionFragment;
    "sharedMetadata()": FunctionFragment;
    "startTokenId()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "tokensOfOwner(address)": FunctionFragment;
    "tokensOfOwnerIn(address,uint256,uint256)": FunctionFragment;
    "totalMinted()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "verifyClaim(uint256,address,uint256,address,uint256,(bytes32[],uint256,uint256,address))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "approve"
      | "balanceOf"
      | "burn"
      | "claim"
      | "claimCondition"
      | "contractURI"
      | "explicitOwnershipOf"
      | "getActiveClaimConditionId"
      | "getApproved"
      | "getClaimConditionById"
      | "getDefaultRoyaltyInfo"
      | "getFlatPlatformFeeInfo"
      | "getPlatformFeeInfo"
      | "getPlatformFeeType"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "getRoyaltyInfoForToken"
      | "getSupplyClaimedByWallet"
      | "grantRole"
      | "hasRole"
      | "hasRoleWithSwitch"
      | "initialize"
      | "isApprovedForAll"
      | "isTrustedForwarder"
      | "multicall"
      | "name"
      | "nextTokenIdToClaim"
      | "nextTokenIdToMint"
      | "owner"
      | "ownerOf"
      | "primarySaleRecipient"
      | "renounceRole"
      | "revokeRole"
      | "royaltyInfo"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setClaimConditions"
      | "setContractURI"
      | "setDefaultRoyaltyInfo"
      | "setFlatPlatformFeeInfo"
      | "setOwner"
      | "setPlatformFeeInfo"
      | "setPlatformFeeType"
      | "setPrimarySaleRecipient"
      | "setRoyaltyInfoForToken"
      | "setSharedMetadata"
      | "sharedMetadata"
      | "startTokenId"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "tokensOfOwner"
      | "tokensOfOwnerIn"
      | "totalMinted"
      | "totalSupply"
      | "transferFrom"
      | "verifyClaim"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [
      string,
      BigNumberish,
      string,
      BigNumberish,
      IDrop.AllowlistProofStruct,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimCondition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "explicitOwnershipOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveClaimConditionId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimConditionById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDefaultRoyaltyInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFlatPlatformFeeInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlatformFeeInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlatformFeeType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoyaltyInfoForToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupplyClaimedByWallet",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRoleWithSwitch",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      string,
      string,
      string[],
      string,
      string,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextTokenIdToClaim",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextTokenIdToMint",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "primarySaleRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyInfo",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimConditions",
    values: [IClaimCondition.ClaimConditionStruct[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultRoyaltyInfo",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFlatPlatformFeeInfo",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setPlatformFeeInfo",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformFeeType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrimarySaleRecipient",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoyaltyInfoForToken",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSharedMetadata",
    values: [ISharedMetadata.SharedMetadataInfoStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "sharedMetadata",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startTokenId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensOfOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensOfOwnerIn",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalMinted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyClaim",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      string,
      BigNumberish,
      IDrop.AllowlistProofStruct
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "explicitOwnershipOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveClaimConditionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimConditionById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefaultRoyaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFlatPlatformFeeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlatformFeeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlatformFeeType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoyaltyInfoForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupplyClaimedByWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasRoleWithSwitch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextTokenIdToClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextTokenIdToMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "primarySaleRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "royaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClaimConditions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultRoyaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFlatPlatformFeeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformFeeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformFeeType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPrimarySaleRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoyaltyInfoForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSharedMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sharedMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokensOfOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensOfOwnerIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalMinted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyClaim",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "BatchMetadataUpdate(uint256,uint256)": EventFragment;
    "ClaimConditionsUpdated(tuple[],bool)": EventFragment;
    "ConsecutiveTransfer(uint256,uint256,address,address)": EventFragment;
    "ContractURIUpdated(string,string)": EventFragment;
    "DefaultRoyalty(address,uint256)": EventFragment;
    "FlatPlatformFeeUpdated(address,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "MetadataUpdate(uint256)": EventFragment;
    "OwnerUpdated(address,address)": EventFragment;
    "PlatformFeeInfoUpdated(address,uint256)": EventFragment;
    "PlatformFeeTypeUpdated(uint8)": EventFragment;
    "PrimarySaleRecipientUpdated(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "RoyaltyForToken(uint256,address,uint256)": EventFragment;
    "SharedMetadataUpdated(string,string,string,string)": EventFragment;
    "TokensClaimed(uint256,address,address,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BatchMetadataUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimConditionsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConsecutiveTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractURIUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DefaultRoyalty"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FlatPlatformFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetadataUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlatformFeeInfoUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlatformFeeTypeUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PrimarySaleRecipientUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoyaltyForToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SharedMetadataUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface BatchMetadataUpdateEventObject {
  _fromTokenId: BigNumber;
  _toTokenId: BigNumber;
}
export type BatchMetadataUpdateEvent = TypedEvent<
  [BigNumber, BigNumber],
  BatchMetadataUpdateEventObject
>;

export type BatchMetadataUpdateEventFilter =
  TypedEventFilter<BatchMetadataUpdateEvent>;

export interface ClaimConditionsUpdatedEventObject {
  claimConditions: IClaimCondition.ClaimConditionStructOutput[];
  resetEligibility: boolean;
}
export type ClaimConditionsUpdatedEvent = TypedEvent<
  [IClaimCondition.ClaimConditionStructOutput[], boolean],
  ClaimConditionsUpdatedEventObject
>;

export type ClaimConditionsUpdatedEventFilter =
  TypedEventFilter<ClaimConditionsUpdatedEvent>;

export interface ConsecutiveTransferEventObject {
  fromTokenId: BigNumber;
  toTokenId: BigNumber;
  from: string;
  to: string;
}
export type ConsecutiveTransferEvent = TypedEvent<
  [BigNumber, BigNumber, string, string],
  ConsecutiveTransferEventObject
>;

export type ConsecutiveTransferEventFilter =
  TypedEventFilter<ConsecutiveTransferEvent>;

export interface ContractURIUpdatedEventObject {
  prevURI: string;
  newURI: string;
}
export type ContractURIUpdatedEvent = TypedEvent<
  [string, string],
  ContractURIUpdatedEventObject
>;

export type ContractURIUpdatedEventFilter =
  TypedEventFilter<ContractURIUpdatedEvent>;

export interface DefaultRoyaltyEventObject {
  newRoyaltyRecipient: string;
  newRoyaltyBps: BigNumber;
}
export type DefaultRoyaltyEvent = TypedEvent<
  [string, BigNumber],
  DefaultRoyaltyEventObject
>;

export type DefaultRoyaltyEventFilter = TypedEventFilter<DefaultRoyaltyEvent>;

export interface FlatPlatformFeeUpdatedEventObject {
  platformFeeRecipient: string;
  flatFee: BigNumber;
}
export type FlatPlatformFeeUpdatedEvent = TypedEvent<
  [string, BigNumber],
  FlatPlatformFeeUpdatedEventObject
>;

export type FlatPlatformFeeUpdatedEventFilter =
  TypedEventFilter<FlatPlatformFeeUpdatedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MetadataUpdateEventObject {
  _tokenId: BigNumber;
}
export type MetadataUpdateEvent = TypedEvent<
  [BigNumber],
  MetadataUpdateEventObject
>;

export type MetadataUpdateEventFilter = TypedEventFilter<MetadataUpdateEvent>;

export interface OwnerUpdatedEventObject {
  prevOwner: string;
  newOwner: string;
}
export type OwnerUpdatedEvent = TypedEvent<
  [string, string],
  OwnerUpdatedEventObject
>;

export type OwnerUpdatedEventFilter = TypedEventFilter<OwnerUpdatedEvent>;

export interface PlatformFeeInfoUpdatedEventObject {
  platformFeeRecipient: string;
  platformFeeBps: BigNumber;
}
export type PlatformFeeInfoUpdatedEvent = TypedEvent<
  [string, BigNumber],
  PlatformFeeInfoUpdatedEventObject
>;

export type PlatformFeeInfoUpdatedEventFilter =
  TypedEventFilter<PlatformFeeInfoUpdatedEvent>;

export interface PlatformFeeTypeUpdatedEventObject {
  feeType: number;
}
export type PlatformFeeTypeUpdatedEvent = TypedEvent<
  [number],
  PlatformFeeTypeUpdatedEventObject
>;

export type PlatformFeeTypeUpdatedEventFilter =
  TypedEventFilter<PlatformFeeTypeUpdatedEvent>;

export interface PrimarySaleRecipientUpdatedEventObject {
  recipient: string;
}
export type PrimarySaleRecipientUpdatedEvent = TypedEvent<
  [string],
  PrimarySaleRecipientUpdatedEventObject
>;

export type PrimarySaleRecipientUpdatedEventFilter =
  TypedEventFilter<PrimarySaleRecipientUpdatedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface RoyaltyForTokenEventObject {
  tokenId: BigNumber;
  royaltyRecipient: string;
  royaltyBps: BigNumber;
}
export type RoyaltyForTokenEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  RoyaltyForTokenEventObject
>;

export type RoyaltyForTokenEventFilter = TypedEventFilter<RoyaltyForTokenEvent>;

export interface SharedMetadataUpdatedEventObject {
  name: string;
  description: string;
  imageURI: string;
  animationURI: string;
}
export type SharedMetadataUpdatedEvent = TypedEvent<
  [string, string, string, string],
  SharedMetadataUpdatedEventObject
>;

export type SharedMetadataUpdatedEventFilter =
  TypedEventFilter<SharedMetadataUpdatedEvent>;

export interface TokensClaimedEventObject {
  claimConditionIndex: BigNumber;
  claimer: string;
  receiver: string;
  startTokenId: BigNumber;
  quantityClaimed: BigNumber;
}
export type TokensClaimedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber],
  TokensClaimedEventObject
>;

export type TokensClaimedEventFilter = TypedEventFilter<TokensClaimedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface OpenEditionERC721FlatFee extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OpenEditionERC721FlatFeeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claim(
      _receiver: string,
      _quantity: BigNumberish,
      _currency: string,
      _pricePerToken: BigNumberish,
      _allowlistProof: IDrop.AllowlistProofStruct,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimCondition(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { currentStartId: BigNumber; count: BigNumber }
    >;

    contractURI(overrides?: CallOverrides): Promise<[string]>;

    explicitOwnershipOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [IERC721AUpgradeable.TokenOwnershipStructOutput] & {
        ownership: IERC721AUpgradeable.TokenOwnershipStructOutput;
      }
    >;

    getActiveClaimConditionId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getClaimConditionById(
      _conditionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [IClaimCondition.ClaimConditionStructOutput] & {
        condition: IClaimCondition.ClaimConditionStructOutput;
      }
    >;

    getDefaultRoyaltyInfo(overrides?: CallOverrides): Promise<[string, number]>;

    getFlatPlatformFeeInfo(
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    getPlatformFeeInfo(overrides?: CallOverrides): Promise<[string, number]>;

    getPlatformFeeType(overrides?: CallOverrides): Promise<[number]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { member: string }>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    getRoyaltyInfoForToken(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, number]>;

    getSupplyClaimedByWallet(
      _conditionId: BigNumberish,
      _claimer: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { supplyClaimedByWallet: BigNumber }>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasRoleWithSwitch(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _defaultAdmin: string,
      _name: string,
      _symbol: string,
      _contractURI: string,
      _trustedForwarders: string[],
      _saleRecipient: string,
      _royaltyRecipient: string,
      _royaltyBps: BigNumberish,
      _platformFeeBps: BigNumberish,
      _platformFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nextTokenIdToClaim(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextTokenIdToMint(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    primarySaleRecipient(overrides?: CallOverrides): Promise<[string]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    royaltyInfo(
      tokenId: BigNumberish,
      salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { receiver: string; royaltyAmount: BigNumber }
    >;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setClaimConditions(
      _conditions: IClaimCondition.ClaimConditionStruct[],
      _resetClaimEligibility: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setContractURI(
      _uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDefaultRoyaltyInfo(
      _royaltyRecipient: string,
      _royaltyBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFlatPlatformFeeInfo(
      _platformFeeRecipient: string,
      _flatFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPlatformFeeInfo(
      _platformFeeRecipient: string,
      _platformFeeBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPlatformFeeType(
      _feeType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPrimarySaleRecipient(
      _saleRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRoyaltyInfoForToken(
      _tokenId: BigNumberish,
      _recipient: string,
      _bps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSharedMetadata(
      _metadata: ISharedMetadata.SharedMetadataInfoStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sharedMetadata(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        name: string;
        description: string;
        imageURI: string;
        animationURI: string;
      }
    >;

    startTokenId(overrides?: CallOverrides): Promise<[BigNumber]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokensOfOwner(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    tokensOfOwnerIn(
      owner: string,
      start: BigNumberish,
      stop: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    totalMinted(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifyClaim(
      _conditionId: BigNumberish,
      _claimer: string,
      _quantity: BigNumberish,
      _currency: string,
      _pricePerToken: BigNumberish,
      _allowlistProof: IDrop.AllowlistProofStruct,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isOverride: boolean }>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  burn(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claim(
    _receiver: string,
    _quantity: BigNumberish,
    _currency: string,
    _pricePerToken: BigNumberish,
    _allowlistProof: IDrop.AllowlistProofStruct,
    _data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimCondition(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { currentStartId: BigNumber; count: BigNumber }
  >;

  contractURI(overrides?: CallOverrides): Promise<string>;

  explicitOwnershipOf(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IERC721AUpgradeable.TokenOwnershipStructOutput>;

  getActiveClaimConditionId(overrides?: CallOverrides): Promise<BigNumber>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getClaimConditionById(
    _conditionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IClaimCondition.ClaimConditionStructOutput>;

  getDefaultRoyaltyInfo(overrides?: CallOverrides): Promise<[string, number]>;

  getFlatPlatformFeeInfo(
    overrides?: CallOverrides
  ): Promise<[string, BigNumber]>;

  getPlatformFeeInfo(overrides?: CallOverrides): Promise<[string, number]>;

  getPlatformFeeType(overrides?: CallOverrides): Promise<number>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRoyaltyInfoForToken(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, number]>;

  getSupplyClaimedByWallet(
    _conditionId: BigNumberish,
    _claimer: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasRoleWithSwitch(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _defaultAdmin: string,
    _name: string,
    _symbol: string,
    _contractURI: string,
    _trustedForwarders: string[],
    _saleRecipient: string,
    _royaltyRecipient: string,
    _royaltyBps: BigNumberish,
    _platformFeeBps: BigNumberish,
    _platformFeeRecipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTrustedForwarder(
    forwarder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  multicall(
    data: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nextTokenIdToClaim(overrides?: CallOverrides): Promise<BigNumber>;

  nextTokenIdToMint(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  primarySaleRecipient(overrides?: CallOverrides): Promise<string>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  royaltyInfo(
    tokenId: BigNumberish,
    salePrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { receiver: string; royaltyAmount: BigNumber }
  >;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setClaimConditions(
    _conditions: IClaimCondition.ClaimConditionStruct[],
    _resetClaimEligibility: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setContractURI(
    _uri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDefaultRoyaltyInfo(
    _royaltyRecipient: string,
    _royaltyBps: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFlatPlatformFeeInfo(
    _platformFeeRecipient: string,
    _flatFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPlatformFeeInfo(
    _platformFeeRecipient: string,
    _platformFeeBps: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPlatformFeeType(
    _feeType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPrimarySaleRecipient(
    _saleRecipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRoyaltyInfoForToken(
    _tokenId: BigNumberish,
    _recipient: string,
    _bps: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSharedMetadata(
    _metadata: ISharedMetadata.SharedMetadataInfoStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sharedMetadata(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string] & {
      name: string;
      description: string;
      imageURI: string;
      animationURI: string;
    }
  >;

  startTokenId(overrides?: CallOverrides): Promise<BigNumber>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenURI(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  tokensOfOwner(owner: string, overrides?: CallOverrides): Promise<BigNumber[]>;

  tokensOfOwnerIn(
    owner: string,
    start: BigNumberish,
    stop: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  totalMinted(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifyClaim(
    _conditionId: BigNumberish,
    _claimer: string,
    _quantity: BigNumberish,
    _currency: string,
    _pricePerToken: BigNumberish,
    _allowlistProof: IDrop.AllowlistProofStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    claim(
      _receiver: string,
      _quantity: BigNumberish,
      _currency: string,
      _pricePerToken: BigNumberish,
      _allowlistProof: IDrop.AllowlistProofStruct,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    claimCondition(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { currentStartId: BigNumber; count: BigNumber }
    >;

    contractURI(overrides?: CallOverrides): Promise<string>;

    explicitOwnershipOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IERC721AUpgradeable.TokenOwnershipStructOutput>;

    getActiveClaimConditionId(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getClaimConditionById(
      _conditionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IClaimCondition.ClaimConditionStructOutput>;

    getDefaultRoyaltyInfo(overrides?: CallOverrides): Promise<[string, number]>;

    getFlatPlatformFeeInfo(
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    getPlatformFeeInfo(overrides?: CallOverrides): Promise<[string, number]>;

    getPlatformFeeType(overrides?: CallOverrides): Promise<number>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoyaltyInfoForToken(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, number]>;

    getSupplyClaimedByWallet(
      _conditionId: BigNumberish,
      _claimer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasRoleWithSwitch(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _defaultAdmin: string,
      _name: string,
      _symbol: string,
      _contractURI: string,
      _trustedForwarders: string[],
      _saleRecipient: string,
      _royaltyRecipient: string,
      _royaltyBps: BigNumberish,
      _platformFeeBps: BigNumberish,
      _platformFeeRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    name(overrides?: CallOverrides): Promise<string>;

    nextTokenIdToClaim(overrides?: CallOverrides): Promise<BigNumber>;

    nextTokenIdToMint(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    primarySaleRecipient(overrides?: CallOverrides): Promise<string>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    royaltyInfo(
      tokenId: BigNumberish,
      salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { receiver: string; royaltyAmount: BigNumber }
    >;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setClaimConditions(
      _conditions: IClaimCondition.ClaimConditionStruct[],
      _resetClaimEligibility: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setContractURI(_uri: string, overrides?: CallOverrides): Promise<void>;

    setDefaultRoyaltyInfo(
      _royaltyRecipient: string,
      _royaltyBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFlatPlatformFeeInfo(
      _platformFeeRecipient: string,
      _flatFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(_newOwner: string, overrides?: CallOverrides): Promise<void>;

    setPlatformFeeInfo(
      _platformFeeRecipient: string,
      _platformFeeBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPlatformFeeType(
      _feeType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPrimarySaleRecipient(
      _saleRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRoyaltyInfoForToken(
      _tokenId: BigNumberish,
      _recipient: string,
      _bps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSharedMetadata(
      _metadata: ISharedMetadata.SharedMetadataInfoStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    sharedMetadata(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        name: string;
        description: string;
        imageURI: string;
        animationURI: string;
      }
    >;

    startTokenId(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    tokensOfOwner(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    tokensOfOwnerIn(
      owner: string,
      start: BigNumberish,
      stop: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    totalMinted(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyClaim(
      _conditionId: BigNumberish,
      _claimer: string,
      _quantity: BigNumberish,
      _currency: string,
      _pricePerToken: BigNumberish,
      _allowlistProof: IDrop.AllowlistProofStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "BatchMetadataUpdate(uint256,uint256)"(
      _fromTokenId?: null,
      _toTokenId?: null
    ): BatchMetadataUpdateEventFilter;
    BatchMetadataUpdate(
      _fromTokenId?: null,
      _toTokenId?: null
    ): BatchMetadataUpdateEventFilter;

    "ClaimConditionsUpdated(tuple[],bool)"(
      claimConditions?: null,
      resetEligibility?: null
    ): ClaimConditionsUpdatedEventFilter;
    ClaimConditionsUpdated(
      claimConditions?: null,
      resetEligibility?: null
    ): ClaimConditionsUpdatedEventFilter;

    "ConsecutiveTransfer(uint256,uint256,address,address)"(
      fromTokenId?: BigNumberish | null,
      toTokenId?: null,
      from?: string | null,
      to?: string | null
    ): ConsecutiveTransferEventFilter;
    ConsecutiveTransfer(
      fromTokenId?: BigNumberish | null,
      toTokenId?: null,
      from?: string | null,
      to?: string | null
    ): ConsecutiveTransferEventFilter;

    "ContractURIUpdated(string,string)"(
      prevURI?: null,
      newURI?: null
    ): ContractURIUpdatedEventFilter;
    ContractURIUpdated(
      prevURI?: null,
      newURI?: null
    ): ContractURIUpdatedEventFilter;

    "DefaultRoyalty(address,uint256)"(
      newRoyaltyRecipient?: string | null,
      newRoyaltyBps?: null
    ): DefaultRoyaltyEventFilter;
    DefaultRoyalty(
      newRoyaltyRecipient?: string | null,
      newRoyaltyBps?: null
    ): DefaultRoyaltyEventFilter;

    "FlatPlatformFeeUpdated(address,uint256)"(
      platformFeeRecipient?: null,
      flatFee?: null
    ): FlatPlatformFeeUpdatedEventFilter;
    FlatPlatformFeeUpdated(
      platformFeeRecipient?: null,
      flatFee?: null
    ): FlatPlatformFeeUpdatedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "MetadataUpdate(uint256)"(_tokenId?: null): MetadataUpdateEventFilter;
    MetadataUpdate(_tokenId?: null): MetadataUpdateEventFilter;

    "OwnerUpdated(address,address)"(
      prevOwner?: string | null,
      newOwner?: string | null
    ): OwnerUpdatedEventFilter;
    OwnerUpdated(
      prevOwner?: string | null,
      newOwner?: string | null
    ): OwnerUpdatedEventFilter;

    "PlatformFeeInfoUpdated(address,uint256)"(
      platformFeeRecipient?: string | null,
      platformFeeBps?: null
    ): PlatformFeeInfoUpdatedEventFilter;
    PlatformFeeInfoUpdated(
      platformFeeRecipient?: string | null,
      platformFeeBps?: null
    ): PlatformFeeInfoUpdatedEventFilter;

    "PlatformFeeTypeUpdated(uint8)"(
      feeType?: null
    ): PlatformFeeTypeUpdatedEventFilter;
    PlatformFeeTypeUpdated(feeType?: null): PlatformFeeTypeUpdatedEventFilter;

    "PrimarySaleRecipientUpdated(address)"(
      recipient?: string | null
    ): PrimarySaleRecipientUpdatedEventFilter;
    PrimarySaleRecipientUpdated(
      recipient?: string | null
    ): PrimarySaleRecipientUpdatedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "RoyaltyForToken(uint256,address,uint256)"(
      tokenId?: BigNumberish | null,
      royaltyRecipient?: string | null,
      royaltyBps?: null
    ): RoyaltyForTokenEventFilter;
    RoyaltyForToken(
      tokenId?: BigNumberish | null,
      royaltyRecipient?: string | null,
      royaltyBps?: null
    ): RoyaltyForTokenEventFilter;

    "SharedMetadataUpdated(string,string,string,string)"(
      name?: null,
      description?: null,
      imageURI?: null,
      animationURI?: null
    ): SharedMetadataUpdatedEventFilter;
    SharedMetadataUpdated(
      name?: null,
      description?: null,
      imageURI?: null,
      animationURI?: null
    ): SharedMetadataUpdatedEventFilter;

    "TokensClaimed(uint256,address,address,uint256,uint256)"(
      claimConditionIndex?: BigNumberish | null,
      claimer?: string | null,
      receiver?: string | null,
      startTokenId?: null,
      quantityClaimed?: null
    ): TokensClaimedEventFilter;
    TokensClaimed(
      claimConditionIndex?: BigNumberish | null,
      claimer?: string | null,
      receiver?: string | null,
      startTokenId?: null,
      quantityClaimed?: null
    ): TokensClaimedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claim(
      _receiver: string,
      _quantity: BigNumberish,
      _currency: string,
      _pricePerToken: BigNumberish,
      _allowlistProof: IDrop.AllowlistProofStruct,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimCondition(overrides?: CallOverrides): Promise<BigNumber>;

    contractURI(overrides?: CallOverrides): Promise<BigNumber>;

    explicitOwnershipOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActiveClaimConditionId(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimConditionById(
      _conditionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDefaultRoyaltyInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getFlatPlatformFeeInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getPlatformFeeInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getPlatformFeeType(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoyaltyInfoForToken(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSupplyClaimedByWallet(
      _conditionId: BigNumberish,
      _claimer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasRoleWithSwitch(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _defaultAdmin: string,
      _name: string,
      _symbol: string,
      _contractURI: string,
      _trustedForwarders: string[],
      _saleRecipient: string,
      _royaltyRecipient: string,
      _royaltyBps: BigNumberish,
      _platformFeeBps: BigNumberish,
      _platformFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nextTokenIdToClaim(overrides?: CallOverrides): Promise<BigNumber>;

    nextTokenIdToMint(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    primarySaleRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    royaltyInfo(
      tokenId: BigNumberish,
      salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setClaimConditions(
      _conditions: IClaimCondition.ClaimConditionStruct[],
      _resetClaimEligibility: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setContractURI(
      _uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDefaultRoyaltyInfo(
      _royaltyRecipient: string,
      _royaltyBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFlatPlatformFeeInfo(
      _platformFeeRecipient: string,
      _flatFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOwner(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPlatformFeeInfo(
      _platformFeeRecipient: string,
      _platformFeeBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPlatformFeeType(
      _feeType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPrimarySaleRecipient(
      _saleRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRoyaltyInfoForToken(
      _tokenId: BigNumberish,
      _recipient: string,
      _bps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSharedMetadata(
      _metadata: ISharedMetadata.SharedMetadataInfoStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sharedMetadata(overrides?: CallOverrides): Promise<BigNumber>;

    startTokenId(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokensOfOwner(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    tokensOfOwnerIn(
      owner: string,
      start: BigNumberish,
      stop: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalMinted(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifyClaim(
      _conditionId: BigNumberish,
      _claimer: string,
      _quantity: BigNumberish,
      _currency: string,
      _pricePerToken: BigNumberish,
      _allowlistProof: IDrop.AllowlistProofStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      _receiver: string,
      _quantity: BigNumberish,
      _currency: string,
      _pricePerToken: BigNumberish,
      _allowlistProof: IDrop.AllowlistProofStruct,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimCondition(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contractURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    explicitOwnershipOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActiveClaimConditionId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClaimConditionById(
      _conditionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDefaultRoyaltyInfo(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFlatPlatformFeeInfo(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlatformFeeInfo(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlatformFeeType(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoyaltyInfoForToken(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSupplyClaimedByWallet(
      _conditionId: BigNumberish,
      _claimer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasRoleWithSwitch(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _defaultAdmin: string,
      _name: string,
      _symbol: string,
      _contractURI: string,
      _trustedForwarders: string[],
      _saleRecipient: string,
      _royaltyRecipient: string,
      _royaltyBps: BigNumberish,
      _platformFeeBps: BigNumberish,
      _platformFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextTokenIdToClaim(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextTokenIdToMint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    primarySaleRecipient(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    royaltyInfo(
      tokenId: BigNumberish,
      salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setClaimConditions(
      _conditions: IClaimCondition.ClaimConditionStruct[],
      _resetClaimEligibility: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setContractURI(
      _uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDefaultRoyaltyInfo(
      _royaltyRecipient: string,
      _royaltyBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFlatPlatformFeeInfo(
      _platformFeeRecipient: string,
      _flatFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPlatformFeeInfo(
      _platformFeeRecipient: string,
      _platformFeeBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPlatformFeeType(
      _feeType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPrimarySaleRecipient(
      _saleRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRoyaltyInfoForToken(
      _tokenId: BigNumberish,
      _recipient: string,
      _bps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSharedMetadata(
      _metadata: ISharedMetadata.SharedMetadataInfoStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sharedMetadata(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startTokenId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensOfOwner(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensOfOwnerIn(
      owner: string,
      start: BigNumberish,
      stop: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalMinted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifyClaim(
      _conditionId: BigNumberish,
      _claimer: string,
      _quantity: BigNumberish,
      _currency: string,
      _pricePerToken: BigNumberish,
      _allowlistProof: IDrop.AllowlistProofStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
