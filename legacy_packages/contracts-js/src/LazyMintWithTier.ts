/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace LazyMintWithTier {
  export type TokenRangeStruct = {
    startIdInclusive: BigNumberish;
    endIdNonInclusive: BigNumberish;
  };

  export type TokenRangeStructOutput = [BigNumber, BigNumber] & {
    startIdInclusive: BigNumber;
    endIdNonInclusive: BigNumber;
  };

  export type TierMetadataStruct = {
    tier: string;
    ranges: LazyMintWithTier.TokenRangeStruct[];
    baseURIs: string[];
  };

  export type TierMetadataStructOutput = [
    string,
    LazyMintWithTier.TokenRangeStructOutput[],
    string[]
  ] & {
    tier: string;
    ranges: LazyMintWithTier.TokenRangeStructOutput[];
    baseURIs: string[];
  };
}

export interface LazyMintWithTierInterface extends utils.Interface {
  functions: {
    "batchFrozen(uint256)": FunctionFragment;
    "getBaseURICount()": FunctionFragment;
    "getBatchIdAtIndex(uint256)": FunctionFragment;
    "getMetadataForAllTiers()": FunctionFragment;
    "lazyMint(uint256,string,string,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "batchFrozen"
      | "getBaseURICount"
      | "getBatchIdAtIndex"
      | "getMetadataForAllTiers"
      | "lazyMint"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "batchFrozen",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseURICount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBatchIdAtIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMetadataForAllTiers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lazyMint",
    values: [BigNumberish, string, string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "batchFrozen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBaseURICount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBatchIdAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMetadataForAllTiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lazyMint", data: BytesLike): Result;

  events: {
    "BatchMetadataUpdate(uint256,uint256)": EventFragment;
    "MetadataFrozen()": EventFragment;
    "TokensLazyMinted(string,uint256,uint256,string,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BatchMetadataUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetadataFrozen"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensLazyMinted"): EventFragment;
}

export interface BatchMetadataUpdateEventObject {
  _fromTokenId: BigNumber;
  _toTokenId: BigNumber;
}
export type BatchMetadataUpdateEvent = TypedEvent<
  [BigNumber, BigNumber],
  BatchMetadataUpdateEventObject
>;

export type BatchMetadataUpdateEventFilter =
  TypedEventFilter<BatchMetadataUpdateEvent>;

export interface MetadataFrozenEventObject {}
export type MetadataFrozenEvent = TypedEvent<[], MetadataFrozenEventObject>;

export type MetadataFrozenEventFilter = TypedEventFilter<MetadataFrozenEvent>;

export interface TokensLazyMintedEventObject {
  tier: string;
  startTokenId: BigNumber;
  endTokenId: BigNumber;
  baseURI: string;
  encryptedBaseURI: string;
}
export type TokensLazyMintedEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, string],
  TokensLazyMintedEventObject
>;

export type TokensLazyMintedEventFilter =
  TypedEventFilter<TokensLazyMintedEvent>;

export interface LazyMintWithTier extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LazyMintWithTierInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    batchFrozen(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getBaseURICount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBatchIdAtIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMetadataForAllTiers(
      overrides?: CallOverrides
    ): Promise<
      [LazyMintWithTier.TierMetadataStructOutput[]] & {
        metadataForAllTiers: LazyMintWithTier.TierMetadataStructOutput[];
      }
    >;

    lazyMint(
      _amount: BigNumberish,
      _baseURIForTokens: string,
      _tier: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  batchFrozen(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  getBaseURICount(overrides?: CallOverrides): Promise<BigNumber>;

  getBatchIdAtIndex(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMetadataForAllTiers(
    overrides?: CallOverrides
  ): Promise<LazyMintWithTier.TierMetadataStructOutput[]>;

  lazyMint(
    _amount: BigNumberish,
    _baseURIForTokens: string,
    _tier: string,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    batchFrozen(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getBaseURICount(overrides?: CallOverrides): Promise<BigNumber>;

    getBatchIdAtIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMetadataForAllTiers(
      overrides?: CallOverrides
    ): Promise<LazyMintWithTier.TierMetadataStructOutput[]>;

    lazyMint(
      _amount: BigNumberish,
      _baseURIForTokens: string,
      _tier: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "BatchMetadataUpdate(uint256,uint256)"(
      _fromTokenId?: null,
      _toTokenId?: null
    ): BatchMetadataUpdateEventFilter;
    BatchMetadataUpdate(
      _fromTokenId?: null,
      _toTokenId?: null
    ): BatchMetadataUpdateEventFilter;

    "MetadataFrozen()"(): MetadataFrozenEventFilter;
    MetadataFrozen(): MetadataFrozenEventFilter;

    "TokensLazyMinted(string,uint256,uint256,string,bytes)"(
      tier?: string | null,
      startTokenId?: BigNumberish | null,
      endTokenId?: null,
      baseURI?: null,
      encryptedBaseURI?: null
    ): TokensLazyMintedEventFilter;
    TokensLazyMinted(
      tier?: string | null,
      startTokenId?: BigNumberish | null,
      endTokenId?: null,
      baseURI?: null,
      encryptedBaseURI?: null
    ): TokensLazyMintedEventFilter;
  };

  estimateGas: {
    batchFrozen(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBaseURICount(overrides?: CallOverrides): Promise<BigNumber>;

    getBatchIdAtIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMetadataForAllTiers(overrides?: CallOverrides): Promise<BigNumber>;

    lazyMint(
      _amount: BigNumberish,
      _baseURIForTokens: string,
      _tier: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    batchFrozen(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBaseURICount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBatchIdAtIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMetadataForAllTiers(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lazyMint(
      _amount: BigNumberish,
      _baseURIForTokens: string,
      _tier: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
