/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace ITWMultichainRegistry {
  export type DeploymentStruct = {
    deploymentAddress: string;
    chainId: BigNumberish;
    metadataURI: string;
  };

  export type DeploymentStructOutput = [string, BigNumber, string] & {
    deploymentAddress: string;
    chainId: BigNumber;
    metadataURI: string;
  };
}

export interface ITWMultichainRegistryInterface extends utils.Interface {
  functions: {
    "add(address,address,uint256,string)": FunctionFragment;
    "count(address)": FunctionFragment;
    "getAll(address)": FunctionFragment;
    "getMetadataUri(uint256,address)": FunctionFragment;
    "remove(address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "add"
      | "count"
      | "getAll"
      | "getMetadataUri"
      | "remove"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "add",
    values: [string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "count", values: [string]): string;
  encodeFunctionData(functionFragment: "getAll", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getMetadataUri",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "remove",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "count", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMetadataUri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "remove", data: BytesLike): Result;

  events: {
    "Added(address,address,uint256,string)": EventFragment;
    "Deleted(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Added"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deleted"): EventFragment;
}

export interface AddedEventObject {
  deployer: string;
  deployment: string;
  chainId: BigNumber;
  metadataUri: string;
}
export type AddedEvent = TypedEvent<
  [string, string, BigNumber, string],
  AddedEventObject
>;

export type AddedEventFilter = TypedEventFilter<AddedEvent>;

export interface DeletedEventObject {
  deployer: string;
  deployment: string;
  chainId: BigNumber;
}
export type DeletedEvent = TypedEvent<
  [string, string, BigNumber],
  DeletedEventObject
>;

export type DeletedEventFilter = TypedEventFilter<DeletedEvent>;

export interface ITWMultichainRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITWMultichainRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    add(
      _deployer: string,
      _deployment: string,
      _chainId: BigNumberish,
      metadataUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    count(
      _deployer: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { deploymentCount: BigNumber }>;

    getAll(
      _deployer: string,
      overrides?: CallOverrides
    ): Promise<
      [ITWMultichainRegistry.DeploymentStructOutput[]] & {
        allDeployments: ITWMultichainRegistry.DeploymentStructOutput[];
      }
    >;

    getMetadataUri(
      _chainId: BigNumberish,
      _deployment: string,
      overrides?: CallOverrides
    ): Promise<[string] & { metadataUri: string }>;

    remove(
      _deployer: string,
      _deployment: string,
      _chainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  add(
    _deployer: string,
    _deployment: string,
    _chainId: BigNumberish,
    metadataUri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  count(_deployer: string, overrides?: CallOverrides): Promise<BigNumber>;

  getAll(
    _deployer: string,
    overrides?: CallOverrides
  ): Promise<ITWMultichainRegistry.DeploymentStructOutput[]>;

  getMetadataUri(
    _chainId: BigNumberish,
    _deployment: string,
    overrides?: CallOverrides
  ): Promise<string>;

  remove(
    _deployer: string,
    _deployment: string,
    _chainId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    add(
      _deployer: string,
      _deployment: string,
      _chainId: BigNumberish,
      metadataUri: string,
      overrides?: CallOverrides
    ): Promise<void>;

    count(_deployer: string, overrides?: CallOverrides): Promise<BigNumber>;

    getAll(
      _deployer: string,
      overrides?: CallOverrides
    ): Promise<ITWMultichainRegistry.DeploymentStructOutput[]>;

    getMetadataUri(
      _chainId: BigNumberish,
      _deployment: string,
      overrides?: CallOverrides
    ): Promise<string>;

    remove(
      _deployer: string,
      _deployment: string,
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Added(address,address,uint256,string)"(
      deployer?: string | null,
      deployment?: string | null,
      chainId?: BigNumberish | null,
      metadataUri?: null
    ): AddedEventFilter;
    Added(
      deployer?: string | null,
      deployment?: string | null,
      chainId?: BigNumberish | null,
      metadataUri?: null
    ): AddedEventFilter;

    "Deleted(address,address,uint256)"(
      deployer?: string | null,
      deployment?: string | null,
      chainId?: BigNumberish | null
    ): DeletedEventFilter;
    Deleted(
      deployer?: string | null,
      deployment?: string | null,
      chainId?: BigNumberish | null
    ): DeletedEventFilter;
  };

  estimateGas: {
    add(
      _deployer: string,
      _deployment: string,
      _chainId: BigNumberish,
      metadataUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    count(_deployer: string, overrides?: CallOverrides): Promise<BigNumber>;

    getAll(_deployer: string, overrides?: CallOverrides): Promise<BigNumber>;

    getMetadataUri(
      _chainId: BigNumberish,
      _deployment: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    remove(
      _deployer: string,
      _deployment: string,
      _chainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    add(
      _deployer: string,
      _deployment: string,
      _chainId: BigNumberish,
      metadataUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    count(
      _deployer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAll(
      _deployer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMetadataUri(
      _chainId: BigNumberish,
      _deployment: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    remove(
      _deployer: string,
      _deployment: string,
      _chainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
