/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace IExtension {
  export type ExtensionMetadataStruct = {
    name: string;
    metadataURI: string;
    implementation: string;
  };

  export type ExtensionMetadataStructOutput = [string, string, string] & {
    name: string;
    metadataURI: string;
    implementation: string;
  };

  export type ExtensionFunctionStruct = {
    functionSelector: BytesLike;
    functionSignature: string;
  };

  export type ExtensionFunctionStructOutput = [string, string] & {
    functionSelector: string;
    functionSignature: string;
  };

  export type ExtensionStruct = {
    metadata: IExtension.ExtensionMetadataStruct;
    functions: IExtension.ExtensionFunctionStruct[];
  };

  export type ExtensionStructOutput = [
    IExtension.ExtensionMetadataStructOutput,
    IExtension.ExtensionFunctionStructOutput[]
  ] & {
    metadata: IExtension.ExtensionMetadataStructOutput;
    functions: IExtension.ExtensionFunctionStructOutput[];
  };
}

export interface IRouterStateInterface extends utils.Interface {
  functions: {
    "getAllExtensions()": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "getAllExtensions"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAllExtensions",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getAllExtensions",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IRouterState extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRouterStateInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAllExtensions(
      overrides?: CallOverrides
    ): Promise<
      [IExtension.ExtensionStructOutput[]] & {
        allExtensions: IExtension.ExtensionStructOutput[];
      }
    >;
  };

  getAllExtensions(
    overrides?: CallOverrides
  ): Promise<IExtension.ExtensionStructOutput[]>;

  callStatic: {
    getAllExtensions(
      overrides?: CallOverrides
    ): Promise<IExtension.ExtensionStructOutput[]>;
  };

  filters: {};

  estimateGas: {
    getAllExtensions(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getAllExtensions(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
